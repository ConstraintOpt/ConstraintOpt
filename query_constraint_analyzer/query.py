# Q 0 : # ::Person.in_group_ids(small_groups.pluck(:id)).where("people.id != ?", id)
Query(::Person)

# Q 1 : # ::Person.undeleted.includes(:family, :custom_field_values).find_each
Query(::Person)
.includes('family')
# Q 2 : # ::Person.where(id: ids[:family_ids] + ids[:friend_ids] + ids[:groupy_ids].map(&:first))
Query(::Person)
.where("id = ?")
# Q 3 : # @admin.people.order("last_name, first_name")
Query(Person)
.where("admin_id = ?")
.order('id, last_name, first_name')
# Q 4 : # @album.pictures.order(:id).page(params[:page])
Query(Picture)
.where("album_id = ?")
.order('id')
# Q 5 : # @attachment.group
Query(Group)
.where("id = ?")
# Q 6 : # @family.people.create(email: email, first_name: first_name, last_name: last_name, birthday: birthday, gender: gender, mobile_phone: mobile_phone, status: status)
Query(Person)
.where("family_id = ?")
# Q 7 : # @family.people.find(params[:id])
Query(Person)
.where("family_id = ?")
.where("id = ?")
# Q 8 : # @family.people.undeleted.order(:position)
Query(Person)
.where("family_id = ?")
.order('position')
# Q 9 : # @family.people.undeleted.to_a.select
Query(Person)
.where("family_id = ?")
# Q 10 : # @group.album_pictures.references(:album)
Query(Group)
.where("group_id = ?")
# Q 11 : # @group.attendance_records.create!(attended_at: @attended_at, first_name: person["first_name"], last_name: person["last_name"], age: person["age"])
Query(AttendanceRecord)
.where("group_id = ?")
# Q 12 : # @group.attendance_records.create!(person_id: person.id, attended_at: @attended_at, first_name: person.first_name, last_name: person.last_name, family_name: person.family.name, age: person.age_group, can_pick_up: person.can_pick_up, cannot_pick_up: person.cannot_pick_up, medical_notes: person.medical_notes)
Query(AttendanceRecord)
.where("group_id = ?")
# Q 13 : # @group.membership_requests
Query(MembershipRequest)
.where("group_id = ?")
# Q 14 : # @group.membership_requests.create(person: @person)
Query(MembershipRequest)
.where("group_id = ?")
# Q 15 : # @group.membership_requests.where(person_id: @ids).delete_all
Query(MembershipRequest)
.where("group_id = ?")
.where("person_id = ?")
# Q 16 : # @group.memberships.create(person: @logged_in, admin: true)
Query(Membership)
.where("group_id = ?")
# Q 17 : # @group.memberships.create(person: @person)
Query(Membership)
.where("group_id = ?")
# Q 18 : # @group.memberships.find(params[:id])
Query(Membership)
.where("group_id = ?")
.where("id = ?")
# Q 19 : # @group.memberships.find(params[:id])
Query(Membership)
.where("group_id = ?")
.where("id = ?")
# Q 20 : # @group.memberships.includes(:person).order(name_order).paginate(page: params[:page], per_page: 100)
Query(Membership)
.where("group_id = ?")
.includes('person')
.order('')
# Q 21 : # @group.memberships.where(person_id: id).first
Query(Membership)
.where("group_id = ?")
.where("person_id = ?")
.return_limit('1')
# Q 22 : # @group.memberships.where(person_id: params[:id]).first!
Query(Membership)
.where("group_id = ?")
.where("person_id = ?")
.return_limit('1')
# Q 23 : # @group.messages.new
Query(Message)
.where("group_id = ?")
# Q 24 : # @group.people.minimal.order("last_name, first_name")
Query(Person)
.where("group_id = ?")
.order('id, last_name, first_name')
# Q 25 : # @group.share_token
Query(Group)
.select('share_token')
# Q 26 : # @group.stream_items
Query(StreamItem)
.where("group_id = ?")
# Q 27 : # @group.stream_items.none
Query(StreamItem)
.where("group_id = ?")
# Q 28 : # @group.tasks.find(params[:id])
Query(Task)
.where("group_id = ?")
.where("id = ?")
# Q 29 : # @group.tasks.references(:task)
Query(Task)
.where("group_id = ?")
# Q 30 : # @group.try(:admin?, @logged_in)
Query(Group)
.select('admin?')
# Q 31 : # @group.update_attribute(:approved, true)
Query(Group)

# Q 32 : # @groups.order!(:name)
Query(Group)

# Q 33 : # @groups.where!("name like ?", "%#{
# params[:name]}%")
Query(Group)

# Q 34 : # @groups.where!(approved: true)
Query(Group)
.where("approved = ?")
# Q 35 : # @groups.where!(category: params[:category])
Query(Group)
.where("category = ?")
# Q 36 : # @groups.where!(hidden: false)
Query(Group)
.where("hidden = ?")
# Q 37 : # @groups.where(hidden: true)
Query(Group)
.where("hidden = ?")
# Q 38 : # @import.rows.first.try(:import_attributes_as_hash, keep_invalid: true)
Query(ImportRow)
.where("import_id = ?")
.return_limit('1')
.select('import_attributes_as_hash')
# Q 39 : # @import.rows.where(status: ImportRow.statuses[row_status_before]).find_each
Query(ImportRow)
.where("import_id = ?")
.where("status = ?")
# Q 40 : # @memberships.order_by_birthday
Query(Membership)

# Q 41 : # @memberships.order_by_name
Query(Membership)

# Q 42 : # @message.group
Query(Group)
.where("id = ?")
# Q 43 : # @message.group
Query(Group)
.where("id = ?")
# Q 44 : # @person.albums.order(created_at: :desc)
Query(Album)
.where("person_id = ?")
.order('created_at')
# Q 45 : # @person.family.people.undeleted.where.not(id: @person.id)
Query(Person)
.where("id = ?")
.where("family_id = ?")
.where("id = ?")
# Q 46 : # @person.friendship_requests.find(params[:id])
Query(Person)
.where("id = ?")
# Q 47 : # @person.friendships.where(friend_id: params[:id]).first
Query(Person)
.where("friend_id = ?")
.return_limit('1')
# Q 48 : # @person.friendships.where(id: id).first
Query(Person)
.where("id = ?")
.return_limit('1')
# Q 49 : # @person.groups.is_public.approved.limit(3).order("(select created_at from stream_items where group_id=groups.id order by created_at desc limit 1) desc")
Query(Person)
.return_limit('')
.order('id, group_id, created_at')
# Q 50 : # @person.inward_relationships.includes(:person).order("people.last_name", "people.first_name")
Query(Person)
.order('id, last_name, first_name')
# Q 51 : # @person.relationship.find(params[:id]).destroy
Query(Person)
.where("id = ?")
# Q 52 : # @person.relationships.includes(:related).order("people.last_name", "people.first_name")
Query(Person)
.order('id, last_name, first_name')
# Q 53 : # @person.verses.order(:book, :chapter, :verse)
Query(Verse)
.where("id = ?")
.order('book, chapter, verse')
# Q 54 : # @person.verses.paginate(order: "created_at desc", page: params[:page])
Query(Verse)
.where("id = ?")
# Q 55 : # @stream_items.where!(person_id: params[:person_id])
Query(StreamItem)
.where("person_id = ?")
# Q 56 : # Admin.find(params[:id])
Query(Admin)
.where("id = ?")
# Q 57 : # Admin.find(params[:id])
Query(Admin)
.where("id = ?")
# Q 58 : # Admin.find(params[:id])
Query(Admin)
.where("id = ?")
# Q 59 : # Admin.find(params[:template_id])
Query(Admin)
.where("id = ?")
# Q 60 : # Admin.where("template_name is not null").order(:template_name).select("*, (select count(*) from people where admin_id=admins.id) as people_count")
Query(Admin)
.order('template_name')
.select('*, (select count(*) from people where admin_id=admins.id) as people_count')
# Q 61 : # Admin.where(super_admin: true).map
Query(Admin)
.where("super_admin = ?")
# Q 62 : # Attachment.find(params[:id])
Query(Attachment)
.where("id = ?")
# Q 63 : # Attachment.find(params[:id])
Query(Attachment)
.where("id = ?")
# Q 64 : # AttendanceRecord.find(params[:id])
Query(AttendanceRecord)
.where("id = ?")
# Q 65 : # AttendanceRecord.find_for_people_and_date(@family_people.map(&:id), Date.current).group_by(&:person_id)
Query(AttendanceRecord)

# Q 66 : # AttendanceRecord.on_date(@attendance_last_date).count
Query(AttendanceRecord)

# Q 67 : # AttendanceRecord.where("attended_at < ?", @attended_at.strftime("%Y/%m/%d 0:00")).maximum(:attended_at)
Query(AttendanceRecord)

# Q 68 : # AttendanceRecord.where("attended_at > ?", @attended_at.strftime("%Y/%m/%d 23:59:59")).minimum(:attended_at)
Query(AttendanceRecord)

# Q 69 : # AttendanceRecord.where("attended_at >= ? and attended_at <= ?", @attended_at.strftime("%Y-%m-%d 0:00"), @attended_at.strftime("%Y-%m-%d 23:59:59"))
Query(AttendanceRecord)

# Q 70 : # AttendanceRecord.where(person_id: person.id, attended_at: @attended_at).delete_all
Query(AttendanceRecord)
.where("person_id = ?")
.where("attended_at = ?")
# Q 71 : # CheckinFolder.find(id)
Query(CheckinFolder)
.where("id = ?")
# Q 72 : # CheckinLabel.all.order(:name)
Query(CheckinLabel)
.order('name')
# Q 73 : # CheckinLabel.all.order(:name)
Query(CheckinLabel)
.order('name')
# Q 74 : # CheckinLabel.all.order(:name)
Query(CheckinLabel)
.order('name')
# Q 75 : # CheckinLabel.find(params[:id])
Query(CheckinLabel)
.where("id = ?")
# Q 76 : # CheckinLabel.find(params[:id])
Query(CheckinLabel)
.where("id = ?")
# Q 77 : # CheckinLabel.find(params[:id]).destroy
Query(CheckinLabel)
.where("id = ?")
# Q 78 : # CheckinLabel.order(:name)
Query(CheckinLabel)
.order('name')
# Q 79 : # CheckinTime.find(checkin_time_id)
Query(CheckinTime)
.where("id = ?")
# Q 80 : # CheckinTime.find(params[:id])
Query(CheckinTime)
.where("id = ?")
# Q 81 : # CheckinTime.find(params[:id])
Query(CheckinTime)
.where("id = ?")
# Q 82 : # CheckinTime.find(params[:id])
Query(CheckinTime)
.where("id = ?")
# Q 83 : # CheckinTime.find(params[:time_id])
Query(CheckinTime)
.where("id = ?")
# Q 84 : # CheckinTime.find(params[:time_id]).decorate
Query(CheckinTime)
.where("id = ?")
# Q 85 : # CheckinTime.future_singles.order(:the_datetime)
Query(CheckinTime)
.order('the_datetime')
# Q 86 : # CheckinTime.recurring.order(:weekday, :time)
Query(CheckinTime)
.order('weekday, time')
# Q 87 : # Comment.find(params[:id])
Query(Comment)
.where("id = ?")
# Q 88 : # CustomField.find(params[:id])
Query(CustomField)
.where("id = ?")
# Q 89 : # CustomField.find(params[:id])
Query(CustomField)
.where("id = ?")
# Q 90 : # CustomField.find(params[:id])
Query(CustomField)
.where("id = ?")
# Q 91 : # CustomField.find(params[:id])
Query(CustomField)
.where("id = ?")
# Q 92 : # CustomField.pluck(:id)
Query(CustomField)
.select('id')
# Q 93 : # CustomFieldTab.find(old_tab_id)
Query(CustomFieldTab)
.where("id = ?")
# Q 94 : # CustomFieldTab.find(params[:id])
Query(CustomFieldTab)
.where("id = ?")
# Q 95 : # CustomFieldTab.find(params[:id])
Query(CustomFieldTab)
.where("id = ?")
# Q 96 : # CustomFieldTab.find(params[:id])
Query(CustomFieldTab)
.where("id = ?")
# Q 97 : # CustomFieldTab.find(params[:tab_id])
Query(CustomFieldTab)
.where("id = ?")
# Q 98 : # CustomFieldTab.find(params[:tab_id])
Query(CustomFieldTab)
.where("id = ?")
# Q 99 : # CustomFieldTab.order(:position).includes(:fields)
Query(CustomFieldTab)
.order('position')
.includes('fields')
# Q 100 : # Document.find(params[:id])
Query(Document)
.where("id = ?")
# Q 101 : # Document.find(params[:id])
Query(Document)
.where("id = ?")
# Q 102 : # Document.find(params[:id])
Query(Document)
.where("id = ?")
# Q 103 : # Document.find(params[:id])
Query(Document)
.where("id = ?")
# Q 104 : # Document.find(params[:id])
Query(Document)
.where("id = ?")
# Q 105 : # DocumentFolder.find(params[:folder_id])
Query(DocumentFolder)
.where("id = ?")
# Q 106 : # DocumentFolder.find(params[:id])
Query(DocumentFolder)
.where("id = ?")
# Q 107 : # DocumentFolder.find(params[:id])
Query(DocumentFolder)
.where("id = ?")
# Q 108 : # DocumentFolder.find(params[:id])
Query(DocumentFolder)
.where("id = ?")
# Q 109 : # DocumentFolder.find(parent_folder_ids).sort_by
Query(DocumentFolder)
.where("id = ?")
# Q 110 : # DocumentFolder.where.not(id: folder.try(:id) || 0).order(:path).reject { |f|
#   
#   f.parent_folder_ids.include?(folder.try(:id))
# }.map
Query(DocumentFolder)
.where("id = ?")
.order('path')
# Q 111 : # Family.find(@family_id)
Query(Family)
.where("id = ?")
# Q 112 : # Family.find(family_id)
Query(Family)
.where("id = ?")
# Q 113 : # Family.find(id).destroy
Query(Family)
.where("id = ?")
# Q 114 : # Family.find(params[:family_id])
Query(Family)
.where("id = ?")
# Q 115 : # Family.find(params[:family_id])
Query(Family)
.where("id = ?")
# Q 116 : # Family.find(params[:family_id])
Query(Family)
.where("id = ?")
# Q 117 : # Family.find(params[:family_id])
Query(Family)
.where("id = ?")
# Q 118 : # Family.find(params[:id])
Query(Family)
.where("id = ?")
# Q 119 : # Family.includes(:people)
Query(Family)
.includes('people')
# Q 120 : # Family.order("last_name, name").paginate(page: params[:page], per_page: params[:per_page] || MAX_EXPORT_AT_A_TIME)
Query(Family)
.order('id, last_name, name')
# Q 121 : # Family.undeleted.by_barcode(params[:barcode]).first
Query(Family)
.return_limit('1')
# Q 122 : # Family.undeleted.find(params[:family_id])
Query(Family)
.where("id = ?")
# Q 123 : # Family.undeleted.find(params[:family_id])
Query(Family)
.where("id = ?")
# Q 124 : # Family.undeleted.find(params[:id])
Query(Family)
.where("id = ?")
# Q 125 : # Family.undeleted.find(params[:id])
Query(Family)
.where("id = ?")
# Q 126 : # Family.undeleted.has_printable_people.order("families.last_name, families.name, people.position").includes(:people).references(:people)
Query(Family)
.order('id, last_name, name, position')
.includes('people')
# Q 127 : # Family.undeleted.includes(people: :custom_field_values).find_each
Query(Family)

# Q 128 : # Family.undeleted.where(["(select count(id) from people where deleted = ? and family_id=families.id) = 0", false]).order("name")
Query(Family)
.order('id, name')
# Q 129 : # Family.undeleted.where(email: params[:email].downcase).first
Query(Family)
.where("email = ?")
.return_limit('1')
# Q 130 : # Family.where("barcode_id is not null and barcode_id != '' and deleted = ?", false)
Query(Family)

# Q 131 : # Family.where(alternate_barcode_id: params[:id], deleted: false).first
Query(Family)
.where("alternate_barcode_id = ?")
.where("deleted = ?")
.return_limit('1')
# Q 132 : # Family.where(barcode_id: params[:id], deleted: false).first
Query(Family)
.where("barcode_id = ?")
.where("deleted = ?")
.return_limit('1')
# Q 133 : # Family.where(id: params[:id], deleted: false).first
Query(Family)
.where("id = ?")
.where("deleted = ?")
.return_limit('1')
# Q 134 : # Family.where(legacy_id: params[:id]).first
Query(Family)
.where("legacy_id = ?")
.return_limit('1')
# Q 135 : # Friendship.where("(friend_id = ? and person_id = ?) or (friend_id = ? and person_id = ?)", person.id, friend.id, friend.id, person.id).delete_all
Query(Friendship)

# Q 136 : # Group.approved.order(:name)
Query(Group)
.select('approved')
.order('name')
# Q 137 : # Group.find(ids[:groupy_ids].select { |id, _group_id|
#   
#   id == person.id
# }.map(&:last))
Query(Group)
.where("id = ?")
# Q 138 : # Group.find(options[:group_id])
Query(Group)
.where("id = ?")
# Q 139 : # Group.find(params[:group_id])
Query(Group)
.where("id = ?")
# Q 140 : # Group.find(params[:group_id])
Query(Group)
.where("id = ?")
# Q 141 : # Group.find(params[:group_id]).people.order("last_name, first_name").to_a
Query(Person)
.where("id = ?")
.where("group_id = ?")
.order('id, last_name, first_name')
# Q 142 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 143 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 144 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 145 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 146 : # Group.find(params[:ids])
Query(Group)
.where("id = ?")
# Q 147 : # Group.find(params[:message][:group_id])
Query(Group)
.where("id = ?")
# Q 148 : # Group.find(parents_of).people.map(&:parents).flatten.uniq
Query(Person)
.where("id = ?")
.where("group_id = ?")
.distinct('')
# Q 149 : # Group.find_by_sql("select category, count(*) as group_count from groups where category is not null and category != '' and category != 'Subscription' and site_id = #{
# Site.current.id} group by category").map
Query(Group)

# Q 150 : # Group.order("category, name")
Query(Group)
.order('id, category, name')
# Q 151 : # Group.order("category, name")
Query(Group)
.order('id, category, name')
# Q 152 : # Group.where("id > ?", @logged_in.last_seen_group_id.to_i)
Query(Group)

# Q 153 : # Group.where("id in (select group_id from attendance_records where attended_at >= ? and attended_at <= ?)", attended_at.strftime("%Y-%m-%d 0:00"), attended_at.strftime("%Y-%m-%d 23:59:59")).order("name")
Query(Group)
.order('id, name')
# Q 154 : # Group.where(id: all_group_ids)
Query(Group)
.where("id = ?")
# Q 155 : # Group.where(id: parent_folder_group_ids)
Query(Group)
.where("id = ?")
# Q 156 : # Group.where(parents_of: id).each
Query(Group)
.where("parents_of = ?")
# Q 157 : # GroupTime.find(group_time_hash["id"])
Query(GroupTime)
.where("id = ?")
# Q 158 : # GroupTime.find(id)
Query(GroupTime)
.where("id = ?")
# Q 159 : # GroupTime.find(params[:id])
Query(GroupTime)
.where("id = ?")
# Q 160 : # GroupTime.includes(:checkin_folder).references(:checkin_folders).order("coalesce(checkin_folders.sequence, group_times.sequence)").where("group_times.checkin_folder_id in (?) or group_times.checkin_time_id = ?", checkin_folder_ids, id)
Query(GroupTime)
.includes('checkin_folder')
.order('id, sequence')
# Q 161 : # GroupTime.where("coalesce(section, '') != ''").distinct(:section).pluck(:section)
Query(GroupTime)
.distinct('')
.select('section')
# Q 162 : # Import.find(params[:id])
Query(Import)
.where("id = ?")
# Q 163 : # Import.find(params[:id])
Query(Import)
.where("id = ?")
# Q 164 : # Import.find(params[:id])
Query(Import)
.where("id = ?")
# Q 165 : # Import.find(params[:id])
Query(Import)
.where("id = ?")
# Q 166 : # Import.find(params[:id])
Query(Import)
.where("id = ?")
# Q 167 : # Import.order(:created_at).last
Query(Import)
.order('created_at')
.return_limit('1')
# Q 168 : # Import.order(created_at: :desc).includes(:person).with_row_counts.page(params[:page])
Query(Import)
.order('created_at')
.includes('person')
# Q 169 : # Membership.find(membership_id)
Query(Membership)
.where("id = ?")
# Q 170 : # Membership.where(admin: true).includes(:group, :person).map { |m|
#   
#   [m.person, m.group]
# }.sort_by
Query(Membership)
.where("admin = ?")
.includes('group')
.includes('person')
# Q 171 : # Membership.where(group_id: group_id, person_id: person_id).first
Query(Membership)
.where("group_id = ?")
.where("person_id = ?")
.return_limit('1')
# Q 172 : # MembershipRequest.all.to_a.group_by(&:group)
Query(MembershipRequest)

# Q 173 : # Message.find(params[:parent_id])
Query(Message)
.where("id = ?")
# Q 174 : # Message.where(id: Regexp.last_match(1)).first
Query(Message)
.where("id = ?")
.return_limit('1')
# Q 175 : # Message.where(id: message_id).first
Query(Message)
.where("id = ?")
.return_limit('1')
# Q 176 : # Message.where(id: message_id).first
Query(Message)
.where("id = ?")
.return_limit('1')
# Q 177 : # NewsItem.active.order("published desc").includes(:person).page(params[:page])
Query(NewsItem)
.select('active')
.order('id, published')
.includes('person')
# Q 178 : # NewsItem.find(params[:id])
Query(NewsItem)
.where("id = ?")
# Q 179 : # NewsItem.find(params[:id])
Query(NewsItem)
.where("id = ?")
# Q 180 : # NewsItem.find(params[:id])
Query(NewsItem)
.where("id = ?")
# Q 181 : # NewsItem.find(params[:id])
Query(NewsItem)
.where("id = ?")
# Q 182 : # NewsItem.where(active: true).includes(:person).limit(30).order("published desc")
Query(NewsItem)
.where("active = ?")
.includes('person')
.return_limit('')
.order('id, published')
# Q 183 : # Page.find(params[:id])
Query(Page)
.where("id = ?")
# Q 184 : # Page.find(params[:id])
Query(Page)
.where("id = ?")
# Q 185 : # Page.find(params[:id])
Query(Page)
.where("id = ?")
# Q 186 : # Page.find_by_id_or_path(@path)
Query(Page)
.where("id_or_path = ?")
# Q 187 : # Page.where(parent_id: nil, published: published, navigation: navigation).to_a.select
Query(Page)
.where("parent_id = ?")
.where("published = ?")
.where("navigation = ?")
# Q 188 : # Page.where(path: path).first
Query(Page)
.where("path = ?")
.return_limit('1')
# Q 189 : # Page.where(path: path).first
Query(Page)
.where("path = ?")
.return_limit('1')
# Q 190 : # Page.where(path: path, published: true).first
Query(Page)
.where("path = ?")
.where("published = ?")
.return_limit('1')
# Q 191 : # Page.where(system: true, published: true).order(:title)
Query(Page)
.where("system = ?")
.where("published = ?")
.order('title')
# Q 192 : # Person.create(provider: auth["provider"], uid: auth["uid"], first_name: first_name, last_name: last_name, email: auth["info"]["email"], family: family, status: :pending)
Query(Person)

# Q 193 : # Person.eager_load(:family, :groups)
Query(Person)
.includes('family')
# Q 194 : # Person.find(@id)
Query(Person)
.where("id = ?")
# Q 195 : # Person.find([].append(group_scope && group.memberships.pluck(:person_id)).flatten.append(person_id).reject(&:!)).each
Query(Person)
.where("id = ?")
# Q 196 : # Person.find(id)
Query(Person)
.where("id = ?")
# Q 197 : # Person.find(id)
Query(Person)
.where("id = ?")
# Q 198 : # Person.find(id)
Query(Person)
.where("id = ?")
# Q 199 : # Person.find(id).update_attribute(:email_changed, false)
Query(Person)
.where("id = ?")
# Q 200 : # Person.find(params[:friend_id])
Query(Person)
.where("id = ?")
# Q 201 : # Person.find(params[:id])
Query(Person)
.where("id = ?")
# Q 202 : # Person.find(params[:id])
Query(Person)
.where("id = ?")
# Q 203 : # Person.find(params[:id])
Query(Person)
.where("id = ?")
# Q 204 : # Person.find(params[:id])
Query(Person)
.where("id = ?")
# Q 205 : # Person.find(params[:id])
Query(Person)
.where("id = ?")
# Q 206 : # Person.find(params[:id])
Query(Person)
.where("id = ?")
# Q 207 : # Person.find(params[:message][:to_person_id])
Query(Person)
.where("id = ?")
# Q 208 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 209 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 210 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 211 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 212 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 213 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 214 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 215 : # Person.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 216 : # Person.find(params[:to_person_id])
Query(Person)
.where("id = ?")
# Q 217 : # Person.find(person_id)
Query(Person)
.where("id = ?")
# Q 218 : # Person.includes(:family).references(:family).where(conditions).order(params[:sort]).paginate(page: params[:page], per_page: 100)
Query(Person)
.includes('family')
.order('')
# Q 219 : # Person.joins(:family)
Query(Person)
.joins('family')
# Q 220 : # Person.joins(:family).where("families.id in (#{
# families.map(&:id).join(",")}) and people.deleted = ?", false).select(select)
Query(Person)
.joins('family')
# Q 221 : # Person.logged_in.admin?(:manage_groups)
Query(Person)

# Q 222 : # Person.undeleted.find(Array(params[:ids]).first)
Query(Person)
.where("id = ?")
# Q 223 : # Person.undeleted.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 224 : # Person.undeleted.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 225 : # Person.undeleted.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 226 : # Person.undeleted.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 227 : # Person.undeleted.find(params[:person_id])
Query(Person)
.where("id = ?")
# Q 228 : # Person.undeleted.joins(:family).where("(families.barcode_id = ? or families.alternate_barcode_id = ?)", params[:family_barcode_id], params[:family_barcode_id]).select(select)
Query(Person)
.joins('family')
# Q 229 : # Person.undeleted.where(email: email).where.not(id: id || 0).where.not(family_id: family_id || 0).any?
Query(Person)
.where("email = ?")
.where("id = ?")
.where("family_id = ?")
# Q 230 : # Person.undeleted.where(email: email, api_key: api_key).first
Query(Person)
.where("email = ?")
.where("api_key = ?")
.return_limit('1')
# Q 231 : # Person.undeleted.where(email: params[:email].downcase).first
Query(Person)
.where("email = ?")
.return_limit('1')
# Q 232 : # Person.undeleted.where(feed_code: params[:code], deleted: false).first
Query(Person)
.where("feed_code = ?")
.where("deleted = ?")
.return_limit('1')
# Q 233 : # Person.where("admin_id is not null").order(@order).includes(:admin)
Query(Person)
.order('')
.includes('admin')
# Q 234 : # Person.where("lower(alternate_email) = ?", email.from.first.downcase).first
Query(Person)
.return_limit('1')
# Q 235 : # Person.where("lower(email) = ?", email.from.first.downcase).to_a
Query(Person)

# Q 236 : # Person.where(email: email).first
Query(Person)
.where("email = ?")
.return_limit('1')
# Q 237 : # Person.where(email_changed: true, deleted: false).order("last_name, first_name")
Query(Person)
.where("email_changed = ?")
.where("deleted = ?")
.order('id, last_name, first_name')
# Q 238 : # Person.where(feed_code: feed_code).any?
Query(Person)
.where("feed_code = ?")
# Q 239 : # Person.where(id: id).first
Query(Person)
.where("id = ?")
.return_limit('1')
# Q 240 : # Person.where(id: id).first
Query(Person)
.where("id = ?")
.return_limit('1')
# Q 241 : # Person.where(id: member_ids).where.not(email: nil)
Query(Person)
.where("id = ?")
.where("email = ?")
# Q 242 : # Person.where(id: params[:id]).includes(:family).first
Query(Person)
.where("id = ?")
.includes('family')
.return_limit('1')
# Q 243 : # Person.where(legacy_id: params[:id]).includes(:family).first
Query(Person)
.where("legacy_id = ?")
.includes('family')
.return_limit('1')
# Q 244 : # Person.where(mobile_phone: mobile_phone.digits_only).first
Query(Person)
.where("mobile_phone = ?")
.return_limit('1')
# Q 245 : # Person.where(provider: auth["provider"], uid: auth["uid"].to_s).first
Query(Person)
.where("provider = ?")
.where("uid = ?")
.return_limit('1')
# Q 246 : # ProcessedMessage.where(header_message_id: email.message_id).any?
Query(ProcessedMessage)
.where("header_message_id = ?")
# Q 247 : # Relationship.where("id = ? and (person_id = ? or related_id = ?)", id, @person.id, @person.id).first
Query(Relationship)
.return_limit('1')
# Q 248 : # Relationship.where("person_id = ? and other_name like ?", person_id, "%Check-in Person%").map(&:related).uniq
Query(Relationship)
.distinct('')
# Q 249 : # Relationship.where("person_id in (?) and related_id in (?)", people_ids, people_ids)
Query(Relationship)

# Q 250 : # Relationship.where("related_id in (?) and other_name like '%Check-in Person%'", @people.map(&:id)).map(&:person).uniq
Query(Relationship)
.distinct('')
# Q 251 : # Setting.get(:features, :groups)
Query(Setting)

# Q 252 : # Setting.get(:features, :small_group_size)
Query(Setting)

# Q 253 : # Setting.where(global: true).to_a
Query(Setting)
.where("global = ?")
# Q 254 : # Setting.where(hidden: false).where("site_id = ? or global = ?", Site.current.id, true).order("section, name")
Query(Setting)
.where("hidden = ?")
.order('id, section, name')
# Q 255 : # Setting.where(site_id: site.id).to_a
Query(Setting)
.where("site_id = ?")
# Q 256 : # Site.find(id)
Query(Site)
.where("id = ?")
# Q 257 : # Site.where(active: true).each
Query(Site)
.where("active = ?")
# Q 258 : # Site.where(active: true).each
Query(Site)
.where("active = ?")
# Q 259 : # Site.where(email_host: address.downcase.split("@").last).first
Query(Site)
.where("email_host = ?")
.return_limit('1')
# Q 260 : # Site.where(host: address.downcase.split("@").last).first
Query(Site)
.where("host = ?")
.return_limit('1')
# Q 261 : # Site.where(host: request.host, active: true).first
Query(Site)
.where("host = ?")
.where("active = ?")
.return_limit('1')
# Q 262 : # Site.where(id: 1).first
Query(Site)
.where("id = ?")
.return_limit('1')
# Q 263 : # Site.where(id: ENV["ONEBODY_SITE"], active: true).first
Query(Site)
.where("id = ?")
.where("active = ?")
.return_limit('1')
# Q 264 : # Site.where(secondary_host: request.host, active: true).first
Query(Site)
.where("secondary_host = ?")
.where("active = ?")
.return_limit('1')
# Q 265 : # StreamItem.order(:id).where(streamable_type: @base_item.streamable_type).where("created_at >= ?", @base_item.created_at - GROUPING_PERIOD)
Query(StreamItem)
.order('id')
.where("streamable_type = ?")
# Q 266 : # StreamItem.shared_with(@logged_in).where(group: @group).paginate(page: params[:timeline_page], per_page: 5)
Query(StreamItem)
.where("group = ?")
# Q 267 : # StreamItem.shared_with(@logged_in).where(person_id: @person.id).paginate(page: params[:timeline_page], per_page: 5)
Query(StreamItem)
.where("person_id = ?")
# Q 268 : # StreamItem.shared_with(person).where("stream_items.created_at > ?", person.last_seen_stream_item.try(:created_at) || Time.now).count("distinct stream_items.id")
Query(StreamItem)

# Q 269 : # StreamItem.where(person_id: person_id).order("id").last
Query(StreamItem)
.where("person_id = ?")
.order('id')
.return_limit('1')
# Q 270 : # StreamItem.where(streamable_type: "Album", streamable_id: album_id).each
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 271 : # StreamItem.where(streamable_type: "Album", streamable_id: album_id).each
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 272 : # StreamItem.where(streamable_type: "Message", streamable_id: id).destroy_all
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 273 : # StreamItem.where(streamable_type: "Message", streamable_id: id).each
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 274 : # StreamItem.where(streamable_type: "NewsItem", streamable_id: id).destroy_all
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 275 : # StreamItem.where(streamable_type: "NewsItem", streamable_id: id).each
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 276 : # StreamItem.where(streamable_type: "PrayerRequest", streamable_id: id).destroy_all
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 277 : # StreamItem.where(streamable_type: "PrayerRequest", streamable_id: id).each
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 278 : # StreamItem.where(streamable_type: "StreamItemGroup").find(params[:stream_item_group_id])
Query(StreamItem)
.where("streamable_type = ?")
.where("id = ?")
# Q 279 : # StreamItem.where(streamable_type: "Verse", streamable_id: id, person_id: person.id).destroy_all
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
.where("person_id = ?")
# Q 280 : # StreamItem.where(streamable_type: streamable_type, streamable_id: streamable_id).to_a
Query(StreamItem)
.where("streamable_type = ?")
.where("streamable_id = ?")
# Q 281 : # Task.find(params[:id])
Query(Task)
.where("id = ?")
# Q 282 : # Task.find(params[:id])
Query(Task)
.where("id = ?")
# Q 283 : # Update.find(params[:id])
Query(Update)
.where("id = ?")
# Q 284 : # Update.find(params[:id])
Query(Update)
.where("id = ?")
# Q 285 : # Verification.find(params[:id])
Query(Verification)
.where("id = ?")
# Q 286 : # Verification.where(criteria(:for_verification)).where("created_at > ?", 1.day.ago).count
Query(Verification)

# Q 287 : # Verse.find(params[:id])
Query(Verse)
.where("id = ?")
# Q 288 : # Verse.find(params[:id])
Query(Verse)
.where("id = ?")
# Q 289 : # Verse.find(params[:id])
Query(Verse)
.where("id = ?")
# Q 290 : # Verse.find(params[:q])
Query(Verse)
.where("id = ?")
# Q 291 : # Verse.order(:book, :chapter, :verse).with_people_count.page(params[:page])
Query(Verse)
.order('book, chapter, verse')
# Q 292 : # album.pictures.order(:id).first
Query(Picture)
.where("album_id = ?")
.order('id')
.return_limit('1')
# Q 293 : # album.pictures.order(:id).last
Query(Picture)
.where("album_id = ?")
.order('id')
.return_limit('1')
# Q 294 : # album.pictures.order(:id).where("id < ?", id).last
Query(Picture)
.where("album_id = ?")
.order('id')
.return_limit('1')
# Q 295 : # album.pictures.order(:id).where("id > ?", id).first
Query(Picture)
.where("album_id = ?")
.order('id')
.return_limit('1')
# Q 296 : # albums.where(name: params[:album].presence).first_or_create!
Query(Album)
.where("name = ?")
# Q 297 : # attendance_records.find_by_sql("select distinct attended_at from attendance_records where group_id = #{
# id} and site_id = #{
# Site.current.id} order by attended_at desc").map(&:attended_at)
Query(AttendanceRecord)

# Q 298 : # attendance_records.on_date(Date.current).includes(:group).order(:attended_at)
Query(AttendanceRecord)
.includes('group')
.order('attended_at')
# Q 299 : # attendance_records.where("attended_at between ? and ?", date.strftime("%Y-%m-%d 0:00"), date.strftime("%Y-%m-%d 23:59:59"))
Query(AttendanceRecord)

# Q 300 : # families.where("lower(address1) = ?", hash["family_address1"].downcase).where("lower(city)     = ?", hash["family_city"].downcase).where("lower(state)    = ?", hash["family_state"].downcase).where("lower(zip)      = ?", hash["family_zip"].downcase).first
Query(Family)
.return_limit('1')
# Q 301 : # families.where(home_phone: hash["family_home_phone"].digits_only).first
Query(Family)
.where("home_phone = ?")
.return_limit('1')
# Q 302 : # families.where(id: hash["family_id"]).first
Query(Family)
.where("id = ?")
.return_limit('1')
# Q 303 : # families.where(legacy_id: legacy_id).first
Query(Family)
.where("legacy_id = ?")
.return_limit('1')
# Q 304 : # families.where(name: hash["family_name"]).first
Query(Family)
.where("name = ?")
.return_limit('1')
# Q 305 : # family.last_name
Query(Family)
.select('last_name')
# Q 306 : # family.last_name
Query(Family)
.select('last_name')
# Q 307 : # family.name.split.last
Query(Family)
.select('name')
.return_limit('1')
# Q 308 : # family.people.undeleted.first.photo.presence.try(:path, :large)
Query(Person)
.where("family_id = ?")
.return_limit('1')
.select('path')
.select('large')
# Q 309 : # family.people.undeleted.where(email: email).where.not(id: id)
Query(Person)
.where("family_id = ?")
.where("email = ?")
.where("id = ?")
# Q 310 : # family.people.undeleted.where(email: email).where.not(id: id).update_all(primary_emailer: false)
Query(Person)
.where("family_id = ?")
.where("email = ?")
.where("id = ?")
# Q 311 : # family.people.undeleted.where.not(id: id).pluck(:id)
Query(Person)
.where("family_id = ?")
.where("id = ?")
.select('id')
# Q 312 : # friendship_requests.where(from_id: person.id, rejected: true).delete_all
Query(FriendshipRequest)
.where("from_id = ?")
.where("rejected = ?")
# Q 313 : # group.address.present?
Query(Group)
.select('address')
# Q 314 : # group.admin?(person, :exclude_global_admins)
Query(Group)

# Q 315 : # group.admins.length
Query(Admin)
.where("group_id = ?")
# Q 316 : # group.messages.where(subject: email.subject.sub(/^re:\s?/i, "")).order("id desc").first
Query(Message)
.where("group_id = ?")
.where("subject = ?")
.order('id')
.return_limit('1')
# Q 317 : # group.people.each
Query(Person)
.where("group_id = ?")
# Q 318 : # group.people.each
Query(Person)
.where("group_id = ?")
# Q 319 : # group.people.each
Query(Person)
.where("group_id = ?")
# Q 320 : # group.try(:name)
Query(Group)
.select('name')
# Q 321 : # group.try(:photo).try(:exists?)
Query(Group)
.select('photo')
.select('exists?')
# Q 322 : # group_time.group.attendance_records.create!(person_id: person.id, attended_at: attended_at, first_name: person.first_name, last_name: person.last_name, family_name: person.family.try(:name), age: person.age_group, can_pick_up: person.can_pick_up, cannot_pick_up: person.cannot_pick_up, medical_notes: person.medical_notes, checkin_time_id: group_time.checkin_time_id || group_time.checkin_folder.try(:checkin_time_id), label_id: group_time.label_id, print_extra_nametag: group_time.print_extra_nametag?, barcode_id: barcode_id)
Query(AttendanceRecord)
.where("id = ?")
.where("group_id = ?")
# Q 323 : # groups.active
Query(Group)

# Q 324 : # groups.active.where("(select count(*) from memberships where group_id=groups.id) <= #{
# size.to_i}")
Query(Group)

# Q 325 : # groups.group
Query(Group)
.group('')
# Q 326 : # groups.is_public
Query(Group)

# Q 327 : # includes(:group_times).where("group_times.checkin_time_id is not null").order("group_times.ordering")
Query(Group)
.includes('group_times')
.order('id, ordering')
# Q 328 : # joins("left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id").where("dfg.id is not null")
Query(DocumentFolder)

# Q 329 : # joins("left join document_folder_groups dfg on dfg.document_folder_id = document_folders.id").where("dfg.id is null")
Query(DocumentFolder)

# Q 330 : # memberships.where(auto: true).destroy_all
Query(Membership)
.where("auto = ?")
# Q 331 : # memberships.where(group_id: group.id).any?
Query(Membership)
.where("group_id = ?")
# Q 332 : # memberships.where(person_id: (
# new_people & people).map(&:id)).includes(:person).each
Query(Membership)
.where("person_id = ?")
.includes('person')
# Q 333 : # memberships.where(person_id: (
# people - new_people).map(&:id), auto: true).delete_all
Query(Membership)
.where("person_id = ?")
.where("auto = ?")
# Q 334 : # memberships.where(person_id: person.id).first
Query(Membership)
.where("person_id = ?")
.return_limit('1')
# Q 335 : # memberships.where(person_id: person.id).first.update_attributes!(options)
Query(Membership)
.where("person_id = ?")
.return_limit('1')
# Q 336 : # message.attachments.create(name: File.split(file.original_filename).last, content_type: file.content_type, file: file)
Query(Attachment)
.where("message_id = ?")
# Q 337 : # messages.order(created_at: :desc).page(params[:page])
Query(Message)
.order('created_at')
# Q 338 : # order("ifnull(month(people.birthday), 99)")
Query(Membership)
.order('id, birthday')
# Q 339 : # order("people.first_name, people.last_name")
Query(Membership)
.order('id, first_name, last_name')
# Q 340 : # order(created_at: :desc).includes(:person, :group).where(streamable_type: shared_streamable_types).where(shared: true).where("(group_id is not null or streamable_type != 'Message')").where("(group_id in (:group_ids) or " "(group_id is null and person_id in (:friend_ids)) or " "person_id = :id or " "streamable_type in ('NewsItem', 'Site', 'Person') or " "is_public = :true)", group_ids: person.groups.active.pluck(:id), friend_ids: person.sharing_with_people.pluck(:id), id: person.id, true: true).where("streamable_type != 'Person' or person_id != :id", id: person.id).where(stream_item_group_id: nil)
Query(StreamItem)
.order('created_at')
.includes('person')
.includes('group')
.where("streamable_type = ?")
.where("shared = ?")
.where("stream_item_group_id = ?")
# Q 341 : # people.select(&:adult?)
Query(Person)
.select('adult?')
# Q 342 : # people.select(&:primary_emailer?)
Query(Person)
.select('primary_emailer?')
# Q 343 : # people.undeleted.adults.limit(2).map
Query(Person)
.return_limit('')
# Q 344 : # people.undeleted.order(:position)
Query(Person)
.order('position')
# Q 345 : # people.undeleted.reorder(:id).select
Query(Person)
.order('id')
# Q 346 : # people.undeleted.select
Query(Person)

# Q 347 : # people.where(email: hash["email"].downcase).first
Query(Person)
.where("email = ?")
.return_limit('1')
# Q 348 : # people.where(id: hash["id"]).first
Query(Person)
.where("id = ?")
.return_limit('1')
# Q 349 : # people.where(legacy_id: hash["legacy_id"]).first
Query(Person)
.where("legacy_id = ?")
.return_limit('1')
# Q 350 : # people.where(mobile_phone: hash["mobile_phone"].digits_only).first
Query(Person)
.where("mobile_phone = ?")
.return_limit('1')
# Q 351 : # person.admin?(:manage_groups)
Query(Person)

# Q 352 : # person.friendship_requests.where(from_id: id, rejected: false).any?
Query(Person)
.where("from_id = ?")
.where("rejected = ?")
# Q 353 : # person.friendship_requests.where(from_id: id, rejected: true).any?
Query(Person)
.where("from_id = ?")
.where("rejected = ?")
# Q 354 : # pictures.find(picture.id).update_attributes!(cover: true)
Query(Picture)
.where("id = ?")
# Q 355 : # pictures.order("cover desc, id").first
Query(Picture)
.order('id, cover')
.return_limit('1')
# Q 356 : # prayer_requests.order(created_at: :desc).page(params[:page])
Query(PrayerRequest)
.order('created_at')
# Q 357 : # prayer_requests.where("coalesce(answer, '') != ''").order(created_at: :desc).page(params[:page])
Query(PrayerRequest)
.order('created_at')
# Q 358 : # relationships.includes(:related).to_a.reject do |relationship|
#   
#   Setting.get(:system, :online_only_relationships).include?(relationship.name_or_other)
# end.map do |relationship|
#   
#   "#{
#   relationship.related.legacy_id}[#{
#   relationship.name_or_other}]"
# end.sort
Query(Relationship)
.includes('related')
# Q 359 : # select("*, (select count(*) from people_verses where verse_id = verses.id) as people_count")
Query(Verse)
.select('*, (select count(*) from people_verses where verse_id = verses.id) as people_count')
# Q 360 : # settings.where(section: "Name", name: "Site").first.value
Query(Setting)
.where("section = ?")
.where("name = ?")
.return_limit('1')
.select('value')
# Q 361 : # settings.where(section: "URL", name: "Site").first
Query(Setting)
.where("section = ?")
.where("name = ?")
.return_limit('1')
# Q 362 : # tasks.order(completed: :asc, duedate: :asc).page(params[:page])
Query(Task)
.order('completed, duedate')
# Q 363 : # undeleted.where("admin_id is not null")
Query(Person)

# Q 364 : # undeleted.where(status: Person.statuses.values_at(:pending, :active))
Query(Person)
.where("status = ?")
# Q 365 : # where!("(people.child = ? or coalesce(people.parental_consent, '') != '')", false)
Query(Search)

# Q 366 : # where!("coalesce(people.business_name, '') != ''")
Query(Search)

# Q 367 : # where!("coalesce(people.testimony, '') != ''")
Query(Search)

# Q 368 : # where!("extract( day from people.birthday)   = ?", birthday[:day])
Query(Search)

# Q 369 : # where!("extract( month from people.birthday) = ?", birthday[:month])
Query(Search)

# Q 370 : # where!("extract(day from people.anniversary)   = ?", anniversary[:day])
Query(Search)

# Q 371 : # where!("extract(month from people.anniversary) = ?", anniversary[:month])
Query(Search)

# Q 372 : # where!("families.city  #{
# like} ?", like_match(address[:city], :after))
Query(Search)

# Q 373 : # where!("families.state #{
# like} ?", like_match(address[:state], :after))
Query(Search)

# Q 374 : # where!("families.zip   #{
# like} ?", like_match(address[:zip], :after))
Query(Search)

# Q 375 : # where!("groups.category != ? OR groups.category IS NULL", group_category)
Query(Search)

# Q 376 : # where!("groups.category = ?", group_category)
Query(Search)

# Q 377 : # where!("people.custom_type = ?", type)
Query(Search)

# Q 378 : # where!(families: { deleted: false })
Query(Search)
.where("deleted = ?")
# Q 379 : # where!(families: { visible: true })
Query(Search)
.where("visible = ?")
# Q 380 : # where!(people: { deleted: false })
Query(Search)
.where("deleted = ?")
# Q 381 : # where!(people: { gender: gender })
Query(Search)
.where("gender = ?")
# Q 382 : # where!(people: { visible: true, status: Person.statuses.values_at(:active, :pending) })
Query(Search)
.where("visible = ?")
# Q 383 : # where("((the_datetime >= ? and the_datetime <= ?) or weekday = ?)", date.beginning_of_day.strftime("%Y-%m-%dT%H:%M:%S"), date.end_of_day.strftime("%Y-%m-%dT%H:%M:%S"), date.wday)
Query(CheckinTime)

# Q 384 : # where("(select count(*) from people where family_id = families.id and status = ? and deleted = ?) > 0", Person.statuses[:active], false)
Query(Family)

# Q 385 : # where("barcode_id = ? or alternate_barcode_id = ?", b, b)
Query(Family)

# Q 386 : # where("birthday is not null and extract(month from birthday) = ?", m)
Query(Person)

# Q 387 : # where("business_category is not null and business_category != ''").order(:business_category).pluck("distinct business_category")
Query(Person)
.order('business_category')
.select('distinct business_category')
# Q 388 : # where("child = ? or coalesce(parental_consent, '') != ''", false)
Query(Person)

# Q 389 : # where("created_at < ?", 1.day.ago)
Query(GeneratedFile)

# Q 390 : # where("custom_type is not null and custom_type != ''").order(:custom_type).pluck("distinct custom_type")
Query(Person)
.order('custom_type')
.select('distinct custom_type')
# Q 391 : # where("date(attended_at) = date(?)", d)
Query(AttendanceRecord)

# Q 392 : # where("file_content_type like 'image/%'")
Query(Attachment)

# Q 393 : # where("file_content_type not like 'image/%'")
Query(Attachment)

# Q 394 : # where("id != ?", m.id || 0).where(person_id: m.person_id, subject: m.subject, body: m.body, to_person_id: m.to_person_id, group_id: m.group_id).where("created_at >= ?", 1.day.ago)
Query(Message)
.where("person_id = ?")
.where("subject = ?")
.where("body = ?")
.where("to_person_id = ?")
.where("group_id = ?")
# Q 395 : # where("link_code is not null and link_code != ''")
Query(Group)

# Q 396 : # where("parents_of is not null")
Query(Group)

# Q 397 : # where("parents_of is null and (link_code is null or link_code = '')")
Query(Group)

# Q 398 : # where("person_id in (?) and attended_at >= ? and attended_at <= ?", people_ids, date.strftime("%Y-%m-%d 0:00"), date.strftime("%Y-%m-%d 23:59:59"))
Query(AttendanceRecord)

# Q 399 : # where("the_datetime is not null and the_datetime >= ?", 1.hour.ago.strftime("%Y-%m-%dT%H:%M:%S"))
Query(CheckinTime)

# Q 400 : # where(active: true)
Query(NewsItem)
.where("active = ?")
# Q 401 : # where(approved: false)
Query(Group)
.where("approved = ?")
# Q 402 : # where(approved: true)
Query(Group)
.where("approved = ?")
# Q 403 : # where(child: false)
Query(Person)
.where("child = ?")
# Q 404 : # where(child: true)
Query(Person)
.where("child = ?")
# Q 405 : # where(complete: false)
Query(Update)
.where("complete = ?")
# Q 406 : # where(complete: true)
Query(Update)
.where("complete = ?")
# Q 407 : # where(completed: false)
Query(Task)
.where("completed = ?")
# Q 408 : # where(created_family: false, updated_family: false)
Query(ImportRow)
.where("created_family = ?")
.where("updated_family = ?")
# Q 409 : # where(created_family: true)
Query(ImportRow)
.where("created_family = ?")
# Q 410 : # where(created_person: false, updated_person: false)
Query(ImportRow)
.where("created_person = ?")
.where("updated_person = ?")
# Q 411 : # where(created_person: true)
Query(ImportRow)
.where("created_person = ?")
# Q 412 : # where(deleted: false)
Query(Family)
.where("deleted = ?")
# Q 413 : # where(deleted: false)
Query(Person)
.where("deleted = ?")
# Q 414 : # where(deleted: true)
Query(Person)
.where("deleted = ?")
# Q 415 : # where(deleted: true)
Query(Family)
.where("deleted = ?")
# Q 416 : # where(email: request.params[:email].downcase, ip: request.remote_ip).where("created_at >= ?", 15.minutes.ago)
Query(SigninFailure)
.where("email = ?")
.where("ip = ?")
# Q 417 : # where(errored: true)
Query(ImportRow)
.where("errored = ?")
# Q 418 : # where(folder_id: nil)
Query(Document)
.where("folder_id = ?")
# Q 419 : # where(folder_id: nil)
Query(DocumentFolder)
.where("folder_id = ?")
# Q 420 : # where(format: "select")
Query(CustomField)
.where("format = ?")
# Q 421 : # where(hidden: false)
Query(DocumentFolder)
.where("hidden = ?")
# Q 422 : # where(hidden: false)
Query(Group)
.where("hidden = ?")
# Q 423 : # where(hidden: true)
Query(Group)
.where("hidden = ?")
# Q 424 : # where(hidden: true)
Query(DocumentFolder)
.where("hidden = ?")
# Q 425 : # where(id: id_or_path).first
Query(Page)
.where("id = ?")
.return_limit('1')
# Q 426 : # where(leader: true)
Query(Membership)
.where("leader = ?")
# Q 427 : # where(path: id_or_path).first
Query(Page)
.where("path = ?")
.return_limit('1')
# Q 428 : # where(path: normalize_path(path)).first
Query(Page)
.where("path = ?")
.return_limit('1')
# Q 429 : # where(private: false, hidden: false)
Query(Group)
.where("private = ?")
.where("hidden = ?")
# Q 430 : # where(private: true, hidden: false)
Query(Group)
.where("private = ?")
.where("hidden = ?")
# Q 431 : # where(reference: reference).first
Query(Verse)
.where("reference = ?")
.return_limit('1')
# Q 432 : # where(site_id: site_id, section: section, name: name).first
Query(Setting)
.where("site_id = ?")
.where("section = ?")
.where("name = ?")
.return_limit('1')
# Q 433 : # where(streamable_type: "StreamItemGroup")
Query(StreamItem)
.where("streamable_type = ?")
# Q 434 : # where(the_datetime: nil)
Query(CheckinTime)
.where("the_datetime = ?")
# Q 435 : # where(updated_family: true)
Query(ImportRow)
.where("updated_family = ?")
# Q 436 : # where(updated_person: true)
Query(ImportRow)
.where("updated_person = ?")
# Q 437 : # where(verified: nil)
Query(Verification)
.where("verified = ?")
