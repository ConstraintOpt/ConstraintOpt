# Q 0 : # ::Poll.includes(:poll_votes, :poll_options).where(post: post).find_each
Query(Poll)
.includes('poll_votes')
.includes('poll_options')
.where("post = ?")
# Q 1 : # ::Poll.includes(poll_options: :poll_votes).where(post: post)
Query(Poll)
.includes('poll_votes')
.where("post = ?")
# Q 2 : # ::Poll.where(post: post).pluck(:name)
Query(Poll)
.where("post = ?")
.select('name')
# Q 3 : # @categories.pluck(:id)
Query(Category)
.select('id')
# Q 4 : # @categories.pluck(:topic_id)
Query(Category)
.select('topic_id')
# Q 5 : # @categories.where("categories.parent_category_id = ?", @options[:parent_category_id].to_i)
Query(Category)
# Q 7 : # @post.last_editor_id
Query(Post)
.select('last_editor_id')
# Q 8 : # @post.last_editor_id
Query(Post)
.select('last_editor_id')
# Q 9 : # @post.last_editor_id
Query(Post)
.select('last_editor_id')
# Q 10 : # @post.last_editor_id
Query(Post)
.select('last_editor_id')
# Q 11 : # @post.last_version_at
Query(Post)
.select('last_version_at')
# Q 12 : # @post.post_actions.where(post_action_type_id: PostActionType.flag_types_without_custom.values).each
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
# Q 13 : # @post.post_actions.where(user_id: @user.id).destroy_all
Query(PostAction)
.where("post_id = ?")
.where("user_id = ?")
# Q 14 : # @post.revisions.last
Query(PostRevision)
.where("post_id = ?")
.return_limit('1')
# Q 15 : # @post.topic.first_post
Query(Topic)
.where("id = ?")
# Q 16 : # @post.topic.topic_allowed_users.pluck(:user_id).include?(@user.id)
Query(Topic)
.where("id = ?")
.select('user_id')
# Q 17 : # @post.topic.topic_allowed_users.pluck(:user_id).include?(@user.id)
Query(Topic)
.where("id = ?")
.select('user_id')
# Q 19 : # @posts.map(&:topic_id).uniq.length
Query(Post)
.distinct('')
# Q 20 : # @posts.map(&:user_id).uniq.length
Query(Post)
.distinct('')
# Q 21 : # @posts.unscope(:order).order(sort_order: :desc)
Query(Post)
.order('sort_order')
# Q 22 : # @posts.where("COALESCE(users.trust_level,0) >= ? OR posts.score >= ?", @min_trust_level, @bypass_trust_level_score)
Query(Post)
.where('score >= ?')

# Q 23 : # @posts.where("COALESCE(users.trust_level,0) >= ?", @min_trust_level)
Query(Post)
.joins('user')
.where('user.trust_level >= ?')

# Q 24 : # @posts.where("posts.score >= ?", @min_score)
Query(Post)
.where('score >= ?')

# Q 25 : # @theme.remote_theme.update_from_remote
Query(RemoteTheme)
.where("id = ?")
# Q 26 : # @topic.all_allowed_users.where(id: @user.id).blank?
Query(Topic)
.where("id = ?")
# Q 28 : # @topic.last_posted_at
Query(Topic)
.select('last_posted_at')
# Q 29 : # @topic.last_posted_at.nil?
Query(Topic)
.select('last_posted_at')
# Q 30 : # @topic.posts.distinct.pluck(:user_id).to_a
Query(Topic)
.distinct('')
.select('user_id')
# Q 31 : # @topic.posts.where(user_id: @user.id).order("created_at desc").limit(SiteSetting.get_a_room_threshold).pluck(:reply_to_user_id).find_all
Query(Topic)
.where("user_id = ?")
.order('id, created_at')
.return_limit('10')
# Q 32 : # @topic.tags.order("tags.topic_count DESC").first.name
Query(Topic)
.order('id')
.return_limit('1')
# Q 33 : # @topic.topic_allowed_groups.where("group_id IN (
#                                               SELECT group_id FROM group_users where user_id = ?
#                                            )", @user.id).exists?
Query(Topic)
.return_limit('1')
# Q 34 : # @topic.topic_allowed_users.pluck(:user_id)
Query(Topic)
.select('user_id')
# Q 35 : # @topic.topic_allowed_users.where(user_id: @user.id).exists?
Query(Topic)
.where("user_id = ?")
.return_limit('1')
# Q 36 : # @topic.topic_users.find_by(user_id: @user.id)
Query(Topic)
.where("user_id = ?")
# Q 37 : # @topic.topic_users.find_by(user_id: user_id)
Query(Topic)
.where("user_id = ?")
# Q 38 : # @topic_user.last_read_post_number
Query(TopicUser)
.select('last_read_post_number')
# Q 39 : # @topic_user.last_read_post_number
Query(TopicUser)
.select('last_read_post_number')
# Q 40 : # @user.badges.where(id: Badge::BasicUser).count
Query(User)
.joins('badges')
.where("id = ?")
# Q 41 : # @user.email_tokens.unconfirmed.active.first
Query(EmailToken)
.where("user_id = ?")
.return_limit('1')
# Q 42 : # @user.email_tokens.unconfirmed.active.first
Query(EmailToken)
.where("user_id = ?")
.return_limit('1')
# Q 43 : # @user.posts.select("distinct topic_id").where("created_at > ? AND post_number > 1", time_period.days.ago).count
Query(Post)
.where("user_id = ?")
.select('topic_id')
# Q 44 : # @user.posts.where(topic_id: @topic.id).count
Query(Post)
.where("user_id = ?")
.where("topic_id = ?")
# Q 45 : # @user.posts.with_deleted.where("created_at > ? AND (spam_count > 0 OR inappropriate_count > 0)", time_period.days.ago).pluck(:id)
Query(Post)
.where("user_id = ?")
.select('id')
# Q 46 : # @user.user_stat.first_post_created_at.nil?
Query(UserStat)
.where("id = ?")
.select('first_post_created_at')
# Q 47 : # @user.user_visits.pluck(:posts_read).sum
Query(UserVisit)
.where("user_id = ?")
.select('posts_read')
# Q 48 : # @user.user_visits.where("visited_at > ? and posts_read > 0", time_period.days.ago).count
Query(UserVisit)
.where("user_id = ?")
# Q 49 : # @user.user_visits.where("visited_at > ?", time_period.days.ago).pluck(:posts_read).sum
Query(UserVisit)
.where("user_id = ?")
.select('posts_read')
# Q 50 : # @web_hook.web_hook_events.where(id: params[:ids])
Query(WebHookEvent)
.where("web_hook_id = ?")
.where("id = ?")
# Q 51 : # ApiKey.find_by!(id: params[:id])
Query(ApiKey)
.where("id = ?")
# Q 52 : # ApiKey.find_by!(id: params[:id])
Query(ApiKey)
.where("id = ?")
# Q 53 : # ApiKey.find_by!(id: params[:id])
Query(ApiKey)
.where("id = ?")
# Q 54 : # ApiKey.find_by(id: params[:id])
Query(ApiKey)
.where("id = ?")
# Q 55 : # ApiKey.find_by(id: params[:id])
Query(ApiKey)
.where("id = ?")
# Q 56 : # ApiKey.where(hidden: false)
Query(ApiKey)
.where("hidden = ?")
# Q 57 : # ApplicationRequest.where(req_type: ApplicationRequest.req_types[filter])
Query(ApplicationRequest)
.where("req_type = ?")
# Q 58 : # ApplicationRequest.where(req_type: [ApplicationRequest.req_types.reject { |k, v|
#   
#   k =~ /mobile/
# }.map { |k, v|
#   
#   v if k =~ /page_view/
# }.compact].flatten)
Query(ApplicationRequest)
.where("req_type = ?")
# Q 59 : # BackupDraftPost.where(user_id: user.id, key: key).delete_all
Query(Draft)
.where("user_id = ?")
.where("draft_key = ?")
# Q 60 : # BackupDraftPost.where(user_id: user.id, key: key).pluck_first(:post_id)
Query(Draft)
.where("user_id = ?")
.where("draft_key = ?")
# Q 63 : # Badge.enabled.find(params[:id])
Query(Badge)
.select('enabled')
.where("id = ?")
# Q 64 : # Badge.find(params[:id])
Query(Badge)
.where("id = ?")
# Q 65 : # Badge.find_by(id: params[:badge_id], enabled: true)
Query(Badge)
.where("id = ?")
.where("enabled = ?")
# Q 66 : # Badge.find_by(name: params[:badge_name], enabled: true)
Query(Badge)
.where("name = ?")
.where("enabled = ?")
# Q 67 : # Badge.includes(:badge_grouping).includes(:badge_type).references(:badge_grouping).order("badge_groupings.position, badge_type_id, badges.name").to_a
Query(Badge)
.includes('badge_grouping')
.includes('badge_type')
.order('badge_type_id, name')
# Q 68 : # Badge.pluck(:icon).uniq
Query(Badge)
.select('icon')
.distinct('')
# Q 69 : # BadgeGrouping.all.order(:position).to_a
Query(BadgeGrouping)
.order('position')
# Q 70 : # BadgeGrouping.all.order(:position).to_a
Query(BadgeGrouping)
.order('position')
# Q 71 : # BadgeGrouping.all.order(:position).to_a
Query(BadgeGrouping)
.order('position')
# Q 72 : # BadgeType.all.order(:id).to_a
Query(BadgeType)
.order('id')
# Q 76 : # Category.find(@category_id)
Query(Category)
.where("id = ?")
# Q 77 : # Category.find(SiteSetting.shared_drafts_category)
Query(Category)
.where("id = ?")
# Q 78 : # Category.find(cat.to_i)
Query(Category)
.where("id = ?")
# Q 79 : # Category.find(category || SiteSetting.uncategorized_category_id)
Query(Category)
.where("id = ?")
# Q 80 : # Category.find(manager.args[:category]).require_topic_approval?
Query(Category)
.where("id = ?")
# Q 81 : # Category.find(params["category_id"])
Query(Category)
.where("id = ?")
# Q 82 : # Category.find(params[:category_id].to_i)
Query(Category)
.where("id = ?")
# Q 83 : # Category.find(params[:destination_category_id])
Query(Category)
.where("id = ?")
# Q 84 : # Category.find_by(id: @opts[:category])
Query(Category)
.where("id = ?")
# Q 85 : # Category.find_by(id: @opts[:category_id])
Query(Category)
.where("id = ?")
# Q 86 : # Category.find_by(id: SiteSetting.lounge_category_id)
Query(Category)
.where("id = ?")
# Q 87 : # Category.find_by(id: SiteSetting.staff_category_id)
Query(Category)
.where("id = ?")
# Q 88 : # Category.find_by(id: category.parent_category_id)
Query(Category)
.where("id = ?")
# Q 89 : # Category.find_by(id: category_id)
Query(Category)
.where("id = ?")
# Q 90 : # Category.find_by(id: category_id)
Query(Category)
.where("id = ?")
# Q 91 : # Category.find_by(id: category_id)
Query(Category)
.where("id = ?")
# Q 92 : # Category.find_by(id: category_id)&.auto_bump_topic!
Query(Category)
.where("id = ?")
# Q 93 : # Category.find_by(id: changes[:category_id])
Query(Category)
.where("id = ?")
# Q 94 : # Category.find_by(id: manager.args[:category])
Query(Category)
.where("id = ?")
# Q 95 : # Category.find_by(id: new_category_id)
Query(Category)
.where("id = ?")
# Q 96 : # Category.find_by(id: opts[:category_id])
Query(Category)
.where("id = ?")
# Q 97 : # Category.find_by(id: params[:category_id])
Query(Category)
.where("id = ?")
# Q 98 : # Category.find_by(id: params[:id].to_i)
Query(Category)
.where("id = ?")
# Q 99 : # Category.find_by(id: params[:parent_category_id].to_i)
Query(Category)
.where("id = ?")
# Q 100 : # Category.find_by(id: search_context[:id].to_i)
Query(Category)
.where("id = ?")
# Q 101 : # Category.find_by(id: topic.category.parent_category_id).name
Query(Category)
.where("id = ?")
.select('name')
# Q 102 : # Category.find_by(topic_id: @topic.id)
Query(Category)
.where("topic_id = ?")
# Q 103 : # Category.find_by_email(address)
Query(Category)
.where("email_in = ?")
# Q 104 : # Category.find_by_email(email)
Query(Category)
.where("email_in = ?")
# Q 105 : # Category.find_by_id(id)
Query(Category)
.where("id = ?")
# Q 106 : # Category.find_by_id(id)
Query(Category)
.where("id = ?")
# Q 107 : # Category.find_by_id(params[:categoryId])
Query(Category)
.where("id = ?")
# Q 108 : # Category.find_by_id(parts.last.to_i)
Query(Category)
.where("id = ?")
# Q 109 : # Category.find_by_id(parts.last.to_i)
Query(Category)
.where("id = ?")
# Q 110 : # Category.find_by_slug(*slug_path.reverse)
Query(Category)
.where("slug = ?")
# Q 111 : # Category.find_by_slug(*slug_path.reverse)
Query(Category)
.where("slug = ?")
# Q 112 : # Category.find_by_slug(params[:category_slug], params[:parent_category_slug])
Query(Category)
.where("slug = ?")
# Q 113 : # Category.find_by_slug(params[:id])
Query(Category)
.where("slug = ?")
# Q 114 : # Category.find_by_slug(params[:parent_category_id])
Query(Category)
.where("slug = ?")
# Q 115 : # Category.includes(:category_search_data).where("category_search_data.search_data @@ #{
# ts_query}").references(:category_search_data).order("topics_month DESC").secured(@guardian).limit(limit)
Query(Category)
.order('id, topics_month')
.return_limit('10')
# Q 116 : # Category.includes(:uploaded_background, :uploaded_logo, :topic_only_relative_url, subcategories: [:topic_only_relative_url]).secured(@guardian)
Query(Category)
.includes('uploaded_background')
# Q 117 : # Category.includes(:uploaded_logo, :uploaded_background, :tags, :tag_groups).secured(@guardian).joins("LEFT JOIN topics t on t.id = categories.topic_id").select("categories.*, t.slug topic_slug").order(:position)
Query(Category)
.joins('topics')
.includes('uploaded_background')
.includes('tags')
.includes('tag_groups')
.select('topics.slug')
.order('position')
# Q 118 : # Category.joins("LEFT JOIN topics ON categories.topic_id = topics.id AND topics.deleted_at IS NULL").where("categories.id <> ?", SiteSetting.uncategorized_category_id).where(topics: { id: nil }).find_each
Query(Category)
.where("id = ?")
# Q 119 : # Category.joins(:topics).find_by(topics: { id: manager.args[:topic_id] })
Query(Category)
.joins('topics')
.where("id = ?")
# Q 120 : # Category.joins(tag_groups: :tags).where(id: guardian.allowed_category_ids, :"tags.id" => tag.id).pluck(:name)
Query(Category)
.joins('tags')
.select('name')
# Q 121 : # Category.pluck(:email_in).select(&:present?).map { |e|
#   
#   e.split("|")
# }.flatten.uniq
Query(Category)
.select('email_in')
.distinct('')
# Q 122 : # Category.pluck(:topic_id).compact
Query(Category)
.select('topic_id')
.where("id != 0")
# Q 123 : # Category.pluck(:topic_id).compact!
Query(Category)
.select('topic_id')
# Q 124 : # Category.pluck(:topic_id).compact!
Query(Category)
.select('topic_id')
# Q 125 : # Category.post_create_allowed(self).where(id: parent.category.id).count
Query(Category)
.where("id = ?")
# Q 126 : # Category.query_from_hashtag_slug(category_slug).try(:id)
Query(Category)
.select('id')
# Q 127 : # Category.secured(guardian).where(id: ids).map do |category|
#   
#   { slug: category.hashtag_slug, url: category.url_with_id }
# end.compact
Query(Category)
.where("id = ?")
.where("id != 0")
# Q 128 : # Category.select(:id, :topic_id, :num_featured_topics).where("id >= ?", next_category_id).order("id ASC").limit(batch_size).to_a
Query(Category)
.select('id')
.select('topic_id')
.select('num_featured_topics')
.order('id')
.return_limit('10')
# Q 129 : # Category.topic_create_allowed(@guardian).pluck(:id)
Query(Category)
.select('id')
# Q 130 : # Category.topic_create_allowed(guardian).where(id: @category.id).exists?
Query(Category)
.where("id = ?")
.return_limit('1')
# Q 131 : # Category.topic_create_allowed(guardian).where(id: @category.id).exists?
Query(Category)
.where("id = ?")
.return_limit('1')
# Q 132 : # Category.topic_create_allowed(self).where(id: category_id).count
Query(Category)
.where("id = ?")
# Q 133 : # Category.topic_create_allowed(self.id).select(:id)
Query(Category)
.select('id')
# Q 134 : # Category.unscoped.where(read_restricted: true)
Query(Category)
.where("read_restricted = ?")
# Q 135 : # Category.where("id > ?", categories.last.id).order("id asc").limit(1).pluck(:id)
Query(Category)
.order('id')
.return_limit('10')
.select('id')
# Q 136 : # Category.where("id IN (SELECT category_id FROM category_tags)").where("id IN (?)", guardian.allowed_category_ids).includes(:tags)
Query(Category)
.includes('tags')
# Q 137 : # Category.where("uploaded_background_id IS NOT NULL").each
Query(Category)

# Q 138 : # Category.where("uploaded_background_id IS NOT NULL").pluck(:updated_at).map(&:to_i).sum
Query(Category)
.select('updated_at')
# Q 139 : # Category.where(id: @topic.category_id).update_all(latest_post_id: @post.id)
Query(Category)
.where("id = ?")
# Q 140 : # Category.where(id: @topic.category_id).update_all(latest_topic_id: @topic.id)
Query(Category)
.where("id = ?")
# Q 141 : # Category.where(id: category_id || SiteSetting.uncategorized_category_id, topic_featured_link_allowed: true).exists?
Query(Category)
.where("id = ?")
.where("topic_featured_link_allowed = ?")
.return_limit('1')
# Q 142 : # Category.where(id: category_id).pluck_first(:sort_order, :sort_ascending)
Query(Category)
.where("id = ?")
# Q 143 : # Category.where(id: category_ids).count
Query(Category)
.where("id = ?")
# Q 144 : # Category.where(id: category_ids).or(Category.where(parent_category_id: category_ids)).to_a
Query(Category)
.where("id = ?")
# Q 145 : # Category.where(id: category_ids).pluck(:id)
Query(Category)
.where("id = ?")
.select('id')
# Q 146 : # Category.where(id: new_category.id).update_all("topic_count = topic_count + 1")
Query(Category)
.where("id = ?")
# Q 147 : # Category.where(id: old_category.id).update_all("topic_count = topic_count - 1")
Query(Category)
.where("id = ?")
# Q 148 : # Category.where(id: params[:category_id].to_i).first
Query(Category)
.where("id = ?")
.return_limit('1')
# Q 149 : # Category.where(id: post_count_query.limit(MAX_SUMMARY_RESULTS).pluck("category_id")).pluck(:id, :name, :color, :text_color, :slug, :read_restricted, :parent_category_id).each
Query(Category)
.where("id = ?")
.select('id')
.select('name')
.select('color')
.select('text_color')
.select('slug')
.select('read_restricted')
.select('parent_category_id')
# Q 150 : # Category.where(id: topic.category_id).pluck(:id)
Query(Category)
.where("id = ?")
.select('id')
# Q 151 : # Category.where(parent_category_id: @search_context.id).pluck(:id).push(@search_context.id)
Query(Category)
.where("parent_category_id = ?")
.select('id')
# Q 152 : # Category.where(parent_category_id: id).exists?
Query(Category)
.where("parent_category_id = ?")
.return_limit('1')
# Q 153 : # Category.where(read_restricted: false).pluck(:id)
Query(Category)
.where("read_restricted = ?")
.select('id')
# Q 154 : # Category.where(read_restricted: false).where.not(id: SiteSetting.uncategorized_category_id).order("id asc").pluck_first(:id)
Query(Category)
.where("read_restricted = ?")
.where("id = ?")
.order('id')
# Q 155 : # Category.where(review_group_id: self.id).update_all(review_group_id: nil)
Query(Category)
.where("reviewable_by_group_id = ?")
# Q 156 : # Category.where(review_group_id: self.id).update_all(review_group_id: nil)
Query(Category)
.where("reviewable_by_group_id = ?")
# Q 157 : # Category.where(slug: category_id_or_slug, parent_category_id: nil).pluck_first(:id)
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
# Q 158 : # Category.where(slug: child_slug, parent_category_id: category.select(:id)).first
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
.return_limit('1')
# Q 159 : # Category.where(slug: parent_slug, parent_category_id: nil)
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
# Q 160 : # Category.where(slug: self.slug, parent_category_id: parent_category_id).where.not(id: id).any?
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
.where("id = ?")
# Q 161 : # Category.where(topic_featured_link_allowed: true).pluck(:id)
Query(Category)
.where("topic_featured_link_allowed = ?")
.select('id')
# Q 162 : # Category.where.not(id: self.id).find_by_email(email)
Query(Category)
.where("id = ?")
.where("email_in = ?")
# Q 163 : # Category.where.not(reviewable_by_group_id: nil).pluck(:id)
Query(Category)
.where("reviewable_by_group_id = ?")
.select('id')
# Q 164 : # CategoryCustomField.where("name = 'import_id' AND value IN (?)", import_ids).select(:category_id, :value).to_a
Query(CategoryCustomField)
.select('category_id')
.select('value')
# Q 165 : # CategoryCustomField.where(name: "import_id", value: "#{
# external_category_id}#{
# import_source}").first&.category_id
Query(CategoryCustomField)
.where("name = ?")
.where("value = ?")
.return_limit('1')
.select('category_id')
# Q 166 : # CategoryCustomField.where(name: Category::NUM_AUTO_BUMP_DAILY).where("NULLIF(value, \'\')::int > 0").pluck(:category_id)
Query(CategoryCustomField)
.where("name = ?")
.select('category_id')
# Q 167 : # CategoryFeaturedTopic.select(:topic_id, :category_id).order(:rank).each
Query(CategoryFeaturedTopic)
.select('topic_id')
.select('category_id')
.order('rank')
# Q 168 : # CategoryFeaturedTopic.select([:category_id, :topic_id]).order(:rank)
Query(CategoryFeaturedTopic)
.select('category_id, topic_id')
.order('rank')
# Q 169 : # CategoryFeaturedTopic.where(category_id: c.id).delete_all
Query(CategoryFeaturedTopic)
.where("category_id = ?")
# Q 170 : # CategoryUser.where(category_id: (
# previous_category_ids - new_category_ids), notification_level: notification_level).delete_all
Query(CategoryUser)
.where("category_id = ?")
.where("notification_level = ?")
# Q 171 : # CategoryUser.where(category_id: category_id).pluck(:user_id)
Query(CategoryUser)
.where("category_id = ?")
.select('user_id')
# Q 172 : # CategoryUser.where(category_id: previous_category_ids - new_category_ids, notification_level: notification_level).distinct.pluck(:user_id)
Query(CategoryUser)
.where("category_id = ?")
.where("notification_level = ?")
.distinct('')
.select('user_id')
# Q 173 : # CategoryUser.where(user: guardian.user).pluck(:category_id, :notification_level)
Query(CategoryUser)
.where("user = ?")
.select('category_id')
.select('notification_level')
# Q 174 : # CategoryUser.where(user: user, category_id: category_id).first
Query(CategoryUser)
.where("user = ?")
.where("category_id = ?")
.return_limit('1')
# Q 175 : # CategoryUser.where(user_id: user.id, category_id: category_ids).where.not(notification_level: level_num).update_all(notification_level: level_num)
Query(CategoryUser)
.where("user_id = ?")
.where("category_id = ?")
.where("notification_level = ?")
# Q 176 : # CategoryUser.where(user_id: user.id, category_id: topic.category_id, notification_level: CategoryUser.watching_levels).destroy_all
Query(CategoryUser)
.where("user_id = ?")
.where("category_id = ?")
.where("notification_level = ?")
# Q 177 : # CategoryUser.where(user_id: user.id, notification_level: CategoryUser.notification_levels[:muted]).pluck(:category_id)
Query(CategoryUser)
.where("user_id = ?")
.where("notification_level = ?")
.select('category_id')
# Q 178 : # CategoryUser.where(user_id: user.id, notification_level: level_num).where.not(category_id: category_ids).delete_all
Query(CategoryUser)
.where("user_id = ?")
.where("notification_level = ?")
.where("category_id = ?")
# Q 179 : # CategoryUser.where(user_id: user_id).where("category_id IN (SELECT category_id FROM topics WHERE id = :id)", id: topic_id).where("notification_level IN (:levels)", levels: [CategoryUser.notification_levels[:watching], CategoryUser.notification_levels[:tracking]]).order("notification_level DESC").limit(1).pluck(:notification_level).first
Query(CategoryUser)
.where("user_id = ?")
.order('id, notification_level')
.select('notification_level')
.return_limit('1')
# Q 180 : # ChildTheme.where("child_theme_id = ?", id).destroy_all
Query(ChildTheme)
.where('child_theme_id = ?')

# Q 181 : # ChildTheme.where("parent_theme_id = ?", id).destroy_all
Query(ChildTheme)
.where('parent_theme_id = ?')

# Q 182 : # ChildTheme.where(parent_theme_id: theme_id).pluck(:child_theme_id)
Query(ChildTheme)
.where("parent_theme_id = ?")
.select('child_theme_id')
# Q 183 : # ColorScheme.all.includes(:theme, color_scheme_colors: :color_scheme).to_a
Query(ColorScheme)
.includes('theme')
# Q 184 : # ColorScheme.find(params[:id])
Query(ColorScheme)
.where("id = ?")
# Q 185 : # ColorScheme.find_by(base_scheme_id: scheme_name, via_wizard: true)
Query(ColorScheme)
.where("base_scheme_id = ?")
.where("via_wizard = ?")
# Q 186 : # ColorScheme.where(id: missing_scheme_names.values).delete_all
Query(ColorScheme)
.where("id = ?")
# Q 187 : # ColorScheme.where(name: c[:name]).exists?
Query(ColorScheme)
.where("name = ?")
.return_limit('1')
# Q 188 : # CustomEmoji.find_by(name: name)&.destroy!
Query(CustomEmoji)
.where("name = ?")
# Q 189 : # CustomEmoji.includes(:upload).order(:name).each
Query(CustomEmoji)
.includes('upload')
.order('name')
# Q 190 : # DirectoryItem.where(period_type: period_type).includes(:user)
Query(DirectoryItem)
.where("period_type = ?")
.includes('user')
# Q 191 : # DirectoryItem.where(period_type: period_type, user_id: user.id).first
Query(DirectoryItem)
.where("period_type = ?")
.where("user_id = ?")
.return_limit('1')
# Q 192 : # Draft.where("updated_at < ?", delete_drafts_older_than_n_days).destroy_all
Query(Draft)

# Q 193 : # Draft.where(sequence: sequence, user_id: @user.id, draft_key: draft_key).pluck_first(:revisions)
Query(Draft)
.where("sequence = ?")
.where("user_id = ?")
.where("draft_key = ?")
# Q 194 : # Draft.where(user_id: user.id, draft_key: key).destroy_all
Query(Draft)
.where("user_id = ?")
.where("draft_key = ?")
# Q 196 : # EmailLog.find_by(id: params[:id].to_i, bounced: true)
Query(EmailLog)
.where("id = ?")
.where("bounced = ?")
# Q 197 : # EmailLog.find_by(message_id: message_id, to_address: to_address)
Query(EmailLog)
.where("message_id = ?")
.where("to_address = ?")
# Q 198 : # EmailLog.joins("LEFT JOIN post_reply_keys
#       ON post_reply_keys.post_id = email_logs.post_id
# AND post_reply_keys.user_id = email_logs.user_id
# ")
Query(EmailLog)

# Q 199 : # EmailLog.where(message_id: message_ids).pluck(:post_id)
Query(EmailLog)
.where("message_id = ?")
.select('post_id')
# Q 200 : # EmailLog.where(post_id: old_post.id).update_all(post_id: new_post.id)
Query(EmailLog)
.where("post_id = ?")
# Q 201 : # EmailToken.where(confirmed: false, id: email_token.id, expired: false)
Query(EmailToken)
.where("confirmed = ?")
.where("id = ?")
.where("expired = ?")
# Q 202 : # EmailToken.where(email: user.email, confirmed: true).exists?
Query(EmailToken)
.where("email = ?")
.where("confirmed = ?")
.return_limit('1')
# Q 203 : # EmailToken.where(token: token).where(expired: false, confirmed: false).where("created_at >= ?", EmailToken.valid_after).includes(:user).first
Query(EmailToken)
.where("token = ?")
.where("expired = ?")
.where("confirmed = ?")
.includes('user')
.return_limit('1')
# Q 204 : # EmbeddableHost.all.order(:host)
Query(EmbeddableHost)
.order('host')
# Q 205 : # EmbeddableHost.where(id: params[:id]).first
Query(EmbeddableHost)
.where("id = ?")
.return_limit('1')
# Q 206 : # EmbeddableHost.where(id: params[:id]).first
Query(EmbeddableHost)
.where("id = ?")
.return_limit('1')
# Q 207 : # Embedding.find
Query(Embedding)
.where("id = ?")
# Q 208 : # GithubUserInfo.find_by(github_user_id: github_user_id)
Query(GithubUserInfo)
.where("github_user_id = ?")
# Q 209 : # GithubUserInfo.find_by(user_id: user.id)
Query(GithubUserInfo)
.where("user_id = ?")
# Q 210 : # GithubUserInfo.find_by(user_id: user.id)
Query(GithubUserInfo)
.where("user_id = ?")
# Q 211 : # GithubUserInfo.where("user_id = ? OR github_user_id = ?", user.id, github_user_id).destroy_all
Query(GithubUserInfo)

# Q 212 : # Group.find(params[:group_id].to_i)
Query(Group)
.where("id = ?")
# Q 213 : # Group.find(params[:group_id].to_i)
Query(Group)
.where("id = ?")
# Q 214 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 215 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 216 : # Group.find(primary_group_id)
Query(Group)
.where("id = ?")
# Q 217 : # Group.find_by(id: group_id)
Query(Group)
.where("id = ?")
# Q 218 : # Group.find_by(id: group_id).try(:name)
Query(Group)
.where("id = ?")
.select('name')
# Q 219 : # Group.find_by(id: group_id.to_i)
Query(Group)
.where("id = ?")
# Q 220 : # Group.find_by(id: id)
Query(Group)
.where("id = ?")
# Q 221 : # Group.find_by(id: params.require(:id))
Query(Group)
.where("id = ?")
# Q 222 : # Group.find_by(id: params.require(:id))
Query(Group)
.where("id = ?")
# Q 223 : # Group.find_by(id: params[:group_id].to_i)
Query(Group)
.where("id = ?")
# Q 224 : # Group.find_by(id: params[:id])
Query(Group)
.where("id = ?")
# Q 225 : # Group.find_by(id: params[:id])
Query(Group)
.where("id = ?")
# Q 226 : # Group.find_by(id: params[:id])
Query(Group)
.where("id = ?")
# Q 227 : # Group.find_by(name: name)
Query(Group)
.where("name = ?")
# Q 228 : # Group.find_by(name: name)
Query(Group)
.where("name = ?")
# Q 229 : # Group.find_by(name: params[:group])
Query(Group)
.where("name = ?")
# Q 230 : # Group.find_by(name: params[:group_name])
Query(Group)
.where("name = ?")
# Q 231 : # Group.find_by(name: params[:reviewable_by_group_name])&.id
Query(Group)
.where("name = ?")
# Q 232 : # Group.find_by_email(address)
Query(Group)
.where("incoming_email = ?")
# Q 233 : # Group.find_by_email(email)
Query(Group)
.where("incoming_email = ?")
# Q 234 : # Group.find_by_name(g[:name])
Query(Group)
.where("name = ?")
# Q 235 : # Group.find_by_name(group_name)
Query(Group)
.where("name = ?")
# Q 236 : # Group.joins("LEFT OUTER JOIN group_users gu ON gu.group_id = groups.id AND gu.user_id = #{
# user_id}").joins("LEFT OUTER JOIN topic_allowed_groups tag ON tag.topic_id = #{
# topic_id}").where("gu.id IS NOT NULL AND tag.id IS NOT NULL").pluck(:default_notification_level).first
Query(Group)
.select('default_notification_level')
.return_limit('1')
# Q 237 : # Group.joins(:category_groups).where("category_groups.category_id = ?", self.category_id).where("groups.public_admission OR groups.allow_membership_requests").order(:allow_membership_requests).first
Query(Group)
.joins('category_groups')
.order('allow_membership_requests')
.return_limit('1')
# Q 238 : # Group.joins(:category_groups).where("category_groups.category_id = ?", self.id).where("groups.public_admission OR groups.allow_membership_requests").order(:allow_membership_requests).first
Query(Group)
.joins('category_groups')
.order('allow_membership_requests')
.return_limit('1')
# Q 239 : # Group.mentionable(user).where(id: group.id).present?
Query(Group)
.where("id = ?")
# Q 240 : # Group.mentionable(user).where(name: usernames).pluck(:name, :user_count).map
Query(Group)
.where("name = ?")
.select('name')
.select('user_count')
# Q 241 : # Group.messageable(@user).where(id: target.id).exists?
Query(Group)
.where("id = ?")
.return_limit('1')
# Q 242 : # Group.messageable(user).where("name in (?)", recipients).pluck("name")
Query(Group)
.select('name')
# Q 243 : # Group.messageable(user).where(id: group.id).present?
Query(Group)
.where("id = ?")
# Q 244 : # Group.pluck(:incoming_email).select(&:present?).map { |e|
#   
#   e.split("|")
# }.flatten.uniq
Query(Group)
.select('incoming_email')
.distinct('')
# Q 251 : # Group.visible_groups(user).where("groups.id <> ?", Group::AUTO_GROUPS[:everyone]).order(:name)
Query(Group)
.order('name')
# Q 253 : # Group.where("LOWER(NAME) in (?) AND NOT automatic", names).pluck(:id)
Query(Group)
.select('id')
# Q 254 : # Group.where("LOWER(name) in (?) AND NOT automatic", split).pluck(:id).each
Query(Group)
.select('id')
# Q 255 : # Group.where("flair_url LIKE '%fa-%'").pluck(:flair_url).uniq
Query(Group)
.select('flair_url')
.distinct('')
# Q 256 : # Group.where("groups.id IN (
#           SELECT group_id FROM category_groups
#   JOIN groups g ON group_id = g.id
#           WHERE
#     category_id = ? AND
#             user_count < ?
# )
# ", secure_category_id, MAX_SIZE_PRIORITY_MENTION)
Query(Group)

# Q 257 : # Group.where("name ilike ?", @options[:group]).first
Query(Group)
.return_limit('1')
# Q 258 : # Group.where("name ilike ?", @options[:group_name]).pluck_first(:id)
Query(Group)
.select('id')

# Q 259 : # Group.where("name ilike ?", @options[:group_name]).select(:id, :publish_read_state).first
Query(Group)
.select('id')
.return_limit('1')
# Q 260 : # Group.where(automatic: false).where("LENGTH(COALESCE(automatic_membership_email_domains, '')) > 0").each
Query(Group)
.where("automatic = ?")
# Q 261 : # Group.where(id: user.primary_group_id).pluck_first(:name)
Query(Group)
.where("id = ?")
# Q 262 : # Group.where(id: group_ids)
Query(Group)
.where("id = ?")
# Q 263 : # Group.where(id: group_ids).select(self.class.lookup_columns).each
Query(Group)
.where("id = ?")
# Q 264 : # Group.where(id: only_subcategory_groups).pluck(:name).join(", ")
Query(Group)
.where("id = ?")
.select('name')
# Q 265 : # Group.where(id: primary_group_id_was).pluck_first(:title)
Query(Group)
.where("id = ?")
# Q 266 : # Group.where(id: primary_group_ids.to_a).pluck(:id, :name).each
Query(Group)
.where("id = ?")
.select('id')
.select('name')
# Q 267 : # Group.where(id: requested_group_ids).members_visible_groups(user)
Query(Group)
.where("id = ?")
# Q 268 : # Group.where(name: group_names)
Query(Group)
.where("name = ?")
# Q 269 : # Group.where(name: group_names).find_each
Query(Group)
.where("name = ?")
# Q 270 : # Group.where(name: names).each
Query(Group)
.where("name = ?")
# Q 271 : # Group.where(name: names.split(",")).pluck(:id)
Query(Group)
.where("name = ?")
.select('id')
# Q 272 : # Group.where(name: usernames).pluck(:name)
Query(Group)
.where("name = ?")
.select('name')
# Q 273 : # Group.where.not(id: self.id).find_by_email(email)
Query(Group)
.where("id = ?")
.where("incoming_email = ?")
# Q 274 : # GroupArchivedMessage.where(group_id: group_id, topic_id: topic_id).destroy_all
Query(GroupArchivedMessage)
.where("group_id = ?")
.where("topic_id = ?")
# Q 275 : # GroupArchivedMessage.where(group_id: group_id, topic_id: topic_id).destroy_all
Query(GroupArchivedMessage)
.where("group_id = ?")
.where("topic_id = ?")
# Q 276 : # GroupArchivedMessage.where(topic_id: @topic.id).pluck(:group_id).each
Query(GroupArchivedMessage)
.where("topic_id = ?")
.select('group_id')
# Q 277 : # GroupRequest.where(group_id: group.id, user_id: user.id).delete_all
Query(GroupRequest)
.where("group_id = ?")
.where("user_id = ?")
# Q 278 : # GroupUser.find_by(group_id: group.id, user_id: user.id)
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
# Q 279 : # GroupUser.find_by(group_id: group.id, user_id: user.id)
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
# Q 280 : # GroupUser.where("group_id IN (SELECT id FROM groups WHERE NOT automatic)").where(user_id: user.id)
Query(GroupUser)
.where("user_id = ?")
# Q 281 : # GroupUser.where(group: groups, user: user)
Query(GroupUser)
.where("group = ?")
.where("user = ?")
# Q 282 : # GroupUser.where(group: groups, user_id: user.id).pluck(:owner)
Query(GroupUser)
.where("group = ?")
.where("user_id = ?")
.select('owner')
# Q 283 : # GroupUser.where(group_id: group.id).where(user_id: user_id).update_all(notification_level: notification_level)
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
# Q 284 : # GroupUser.where(group_id: id, user_id: user.id).exists?
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 285 : # GroupUser.where(group_id: id, user_id: user_id).exists?
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 286 : # GroupUser.where(group_id: topic.category.reviewable_by_group_id, user_id: user.id).exists?
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 287 : # GroupUser.where(group_id: undesired, user_id: user_id).delete_all
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
# Q 288 : # GroupUser.where(user: user).joins(:group).where(groups: { id: post.topic.topic_allowed_groups.map(&:group_id), publish_read_state: true }).exists?
Query(GroupUser)
.where("user = ?")
.joins('group')
.where("id = ?")
.return_limit('1')
# Q 289 : # GroupUser.where(user_id: id).includes(:group).maximum("groups.grant_trust_level")
Query(GroupUser)
.where("user_id = ?")
.includes('group')
# Q 290 : # GroupUser.where(user_id: user.id).where("group_id IN (SELECT id FROM groups WHERE LOWER(name) in (?))", split).destroy_all
Query(GroupUser)
.where("user_id = ?")
# Q 291 : # IgnoredUser.find_by(user: user, ignored_user: user)
Query(IgnoredUser)
.where("ignored_user = ?")
# Q 292 : # IgnoredUser.where(user: user, ignored_user: user).delete_all
Query(IgnoredUser)
.where("ignored_user = ?")
# Q 293 : # IgnoredUser.where(user: user, ignored_user: user).delete_all
Query(IgnoredUser)
.where("ignored_user = ?")
# Q 294 : # IncomingEmail.find(params[:id].to_i)
Query(IncomingEmail)
.where("id = ?")
# Q 295 : # IncomingEmail.find(params[:id].to_i)
Query(IncomingEmail)
.where("id = ?")
# Q 296 : # IncomingEmail.find_by(to_addresses: bounced_to_address)
Query(IncomingEmail)
.where("to_addresses = ?")
# Q 297 : # IncomingEmail.find_by(to_addresses: bounced_to_address)
Query(IncomingEmail)
.where("to_addresses = ?")
# Q 298 : # IncomingEmail.joins(:post).where("posts.topic_id = ?", post_reply_key.post.topic_id).addressed_to(post_reply_key.reply_key).addressed_to_user(user).pluck(:to_addresses, :cc_addresses)
Query(IncomingEmail)
.joins('post')
.select('to_addresses')
.select('cc_addresses')
# Q 299 : # IncomingEmail.where(message_id: message_ids).addressed_to_user(user).pluck(:post_id, :to_addresses, :cc_addresses)
Query(IncomingEmail)
.where("message_id = ?")
.select('post_id')
.select('to_addresses')
.select('cc_addresses')
# Q 300 : # IncomingEmail.where(message_id: message_ids).pluck(:post_id)
Query(IncomingEmail)
.where("message_id = ?")
.select('post_id')
# Q 301 : # IncomingLink.joins(post: :topic).where("topics.archetype = ?", Archetype.default).merge(Topic.in_category_and_subcategories(category_id))
Query(IncomingLink)

# Q 302 : # Invite.find_by(email: Email.downcase(email))
Query(Invite)
.where("email = ?")
# Q 303 : # Invite.find_by(email: Email.downcase(email))
Query(Invite)
.where("email = ?")
# Q 304 : # Invite.find_by(invite_key: params[:id])
Query(Invite)
.where("invite_key = ?")
# Q 305 : # Invite.find_by(invite_key: params[:id])
Query(Invite)
.where("invite_key = ?")
# Q 306 : # Invite.find_by(invited_by_id: user.id, email: params[:email])
Query(Invite)
.where("invited_by_id = ?")
.where("email = ?")
# Q 307 : # Invite.find_by(invited_by_id: user.id, email: params[:email])
Query(Invite)
.where("invited_by_id = ?")
.where("email = ?")
# Q 308 : # Invite.where("email = ?", invite.email).update_all(["user_id = ?", invited_user.id])
Query(Invite)
.where('email = ?')

# Q 309 : # Invite.where("id = ? AND redeemed_at IS NULL AND updated_at >= ?", invite.id, SiteSetting.invite_expiry_days.days.ago).update_all("redeemed_at = CURRENT_TIMESTAMP")
Query(Invite)
.where('id = ?')
.where('redeemed_at = ?')
.where('updated_at >= ?')

# Q 310 : # Invite.where("invites.email = ? AND redeemed_at IS NULL AND invites.id != ?", invite.email, invite.id).delete_all
Query(Invite)
.where('email = ?')
.where('redeemed_at = ?')
.where('id != ?')

# Q 311 : # Invite.where("invites.user_id IS NULL AND invites.email IS NOT NULL AND invited_by_id = ? AND invites.updated_at < ?", user.id, SiteSetting.invite_expiry_days.days.ago).find_each
Query(Invite)
.where('user_id = ?')
.where('email != ?')
.where('invited_by_id = ?')
.where('updated_at < ?')

# Q 312 : # Invite.where("invites.user_id IS NULL AND invites.email IS NOT NULL AND invited_by_id = ?", user_id).find_each
Query(Invite)
.where('user_id = ?')
.where('email != ?')
.where('invited_by_id = ?')

# Q 313 : # Invite.where(email: params[:email], invited_by_id: user.id).first
Query(Invite)
.where("email = ?")
.where("invited_by_id = ?")
.return_limit('1')
# Q 314 : # Invite.where(email: params[:email], invited_by_id: user.id).first
Query(Invite)
.where("email = ?")
.where("invited_by_id = ?")
.return_limit('1')
# Q 315 : # Invite.where(invited_by_id: inviter.id).where("invites.email IS NOT NULL").includes(user: :user_stat).order("CASE WHEN invites.user_id IS NOT NULL THEN 0 ELSE 1 END, user_stats.time_read DESC, invites.redeemed_at DESC").limit(limit).offset(offset).references("user_stats")
Query(Invite)
.where("invited_by_id = ?")
.order('id, redeemed_at, user_id')
.return_limit('10')
# Q 316 : # Invite.with_deleted.where(email: lower_email, invited_by_id: invited_by.id).order("created_at DESC").first
Query(Invite)
.where("email = ?")
.where("invited_by_id = ?")
.order('id, created_at')
.return_limit('1')
# Q 317 : # JavascriptCache.where(digest: params[:digest]).limit(1)
Query(JavascriptCache)
.where("digest = ?")
.return_limit('10')
# Q 318 : # JavascriptCache.where(theme_id: theme_ids)
Query(JavascriptCache)
.where("theme_field_id = ?")
# Q 319 : # MutedUser.where(user: user, muted_user: user).delete_all
Query(MutedUser)
.where("muted_user = ?")
# Q 320 : # MutedUser.where(user: user, muted_user: user).delete_all
Query(MutedUser)
.where("muted_user = ?")
# Q 321 : # MutedUser.where(user_id: target_user.id, muted_user_id: invited_by.id).joins(:muted_user).where("NOT admin AND NOT moderator").exists?
Query(MutedUser)
.where("user_id = ?")
.where("muted_user_id = ?")
.joins('muted_user')
.return_limit('1')
# Q 322 : # Notification.find(params[:id])
Query(Notification)
.where("id = ?")
# Q 323 : # Notification.where(id: notification_ids, user_id: user.id, read: false).update_all(read: true)
Query(Notification)
.where("id = ?")
.where("user_id = ?")
.where("read = ?")
# Q 324 : # Notification.where(topic_id: @post.topic_id, post_number: @post.post_number).delete_all
Query(Notification)
.where("topic_id = ?")
.where("post_number = ?")
# Q 325 : # Notification.where(user_id: user.id).includes(:topic).where(read: false).update_all(read: true)
Query(Notification)
.where("user_id = ?")
.includes('topic')
.where("read = ?")
# Q 326 : # Notification.where(user_id: user.id, topic_id: topic_id).order(created_at: :desc).limit(1).first
Query(Notification)
.where("user_id = ?")
.where("topic_id = ?")
.order('created_at')
.return_limit('10')
# Q 327 : # Notification.where(user_id: user.id).visible.includes(:topic).order(created_at: :desc)
Query(Notification)
.where("user_id = ?")
.includes('topic')
.order('created_at')
# Q 328 : # Notification.where(user_id: user.id, topic_id: topic_id, post_number: post_numbers, read: false).update_all(read: true)
Query(Notification)
.where("user_id = ?")
.where("topic_id = ?")
.where("post_number = ?")
.where("read = ?")
# Q 329 : # Notification.where(user_id: user_id, topic_id: topic_id).delete_all
Query(Notification)
.where("user_id = ?")
.where("topic_id = ?")
# Q 330 : # Notification.where(user_id: user_id, topic_id: topic_id, notification_type: Notification.types[:invited_to_private_message]).exists?
Query(Notification)
.where("user_id = ?")
.where("topic_id = ?")
.where("notification_type = ?")
.return_limit('1')
# Q 331 : # Oauth2UserInfo.find_by(uid: oauth2_uid, provider: oauth2_provider)
Query(Oauth2UserInfo)
.where("uid = ?")
.where("provider = ?")
# Q 332 : # Oauth2UserInfo.find_by(user_id: user.id, provider: @name)
Query(Oauth2UserInfo)
.where("user_id = ?")
.where("provider = ?")
# Q 333 : # Permalink.find(params[:id])
Query(Permalink)
.where("id = ?")
# Q 334 : # Permalink.find_by_url("c/#{
# self.parent_category.slug}/#{
# slug}")
Query(Permalink)
.where("url = ?")
# Q 335 : # Permalink.find_by_url("c/#{
# slug}")
Query(Permalink)
.where("url = ?")
# Q 336 : # Permalink.find_by_url(path)
Query(Permalink)
.where("url = ?")
# Q 337 : # Permalink.find_by_url(url)
Query(Permalink)
.where("url = ?")
# Q 338 : # Permalink.find_by_url(url)
Query(Permalink)
.where("url = ?")
# Q 339 : # Permalink.find_by_url(url)
Query(Permalink)
.where("url = ?")
# Q 340 : # Permalink.includes(:topic, :post, :category).order("permalinks.created_at desc")
Query(Permalink)
.includes('topic')
.includes('post')
.includes('category')
.order('id, created_at')
# Q 341 : # Permalink.where(url: Permalink.normalize_url(request.fullpath)).exists?
Query(Permalink)
.where("url = ?")
.return_limit('1')
# Q 342 : # Permalink.where(url: url).exists?
Query(Permalink)
.where("url = ?")
.return_limit('1')
# Q 343 : # Permalink.where(url: url).update_all(category_id: id)
Query(Permalink)
.where("url = ?")
# Q 344 : # PluginStoreRow.find_by(plugin_name: plugin_name, key: key)
Query(PluginStoreRow)
.where("plugin_name = ?")
.where("key = ?")
# Q 345 : # PluginStoreRow.where("plugin_name = ? AND key IN (?)", plugin_name, keys).to_a
Query(PluginStoreRow)

# Q 346 : # PluginStoreRow.where(plugin_name: plugin_name, key: key).destroy_all
Query(PluginStoreRow)
.where("plugin_name = ?")
.where("key = ?")
# Q 347 : # Post.find(id)
Query(Post)
.where("id = ?")
# Q 348 : # Post.find(params[:id].to_i)
Query(Post)
.where("id = ?")
# Q 349 : # Post.find(params[:post_id].to_i)
Query(Post)
.where("id = ?")
# Q 350 : # Post.find_by("topic_id = :topic_id AND post_number = :post_number AND user_id <> :user_id", topic_id: topic_id, post_number: reply_to_post_number, user_id: user_id).try(:user)
Query(Post)
.where('topic_id = ?')
.where('post_number = ?')
.where('user_id != ?')
.select('user')
# Q 351 : # Post.find_by(id: @data[:last_post_id])
Query(Post)
.where("id = ?")
# Q 352 : # Post.find_by(id: data["postId"])
Query(Post)
.where("id = ?")
# Q 353 : # Post.find_by(id: post_id)
Query(Post)
.where("id = ?")
# Q 354 : # Post.find_by(id: post_id)
Query(Post)
.where("id = ?")
# Q 355 : # Post.find_by(id: post_id, topic_id: topic_id)
Query(Post)
.where("id = ?")
.where("topic_id = ?")
# Q 356 : # Post.find_by(id: post_ids.first)
Query(Post)
.where("id = ?")
# Q 357 : # Post.find_by(topic_id: SiteSetting.tos_topic_id, post_number: 1)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 358 : # Post.find_by(topic_id: id, post_number: 1)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 359 : # Post.find_by(topic_id: params[:topic_id].to_i, post_number: (
# params[:post_number] || 1).to_i)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 360 : # Post.find_by(topic_id: params[:topic_id].to_i, post_number: (
# params[:post_number] || 1).to_i)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 361 : # Post.find_by(topic_id: post.topic_id, post_number: 2, user_id: Discourse::SYSTEM_USER_ID)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
.where("user_id = ?")
# Q 362 : # Post.find_by(topic_id: topic.id, post_number: last_read_post_number)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 363 : # Post.find_by(topic_id: topic.id, post_number: post_number.to_i)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 364 : # Post.find_by(topic_id: topic_id, post_number: 1)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 365 : # Post.find_by(topic_id: topic_id, post_number: p)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 366 : # Post.find_by(topic_id: topic_id, post_number: post_number)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 367 : # Post.find_by(topic_id: topic_id, post_number: post_number).try(:id)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
.select('id')
# Q 368 : # Post.from(@posts, :posts).order(post_number: :asc)
Query(Post)
.order('post_number')
# Q 369 : # Post.have_uploads.joins(:topic).joins("LEFT JOIN post_custom_fields ON posts.id = post_custom_fields.post_id AND post_custom_fields.name = '#{
# Post::MISSING_UPLOADS_IGNORED}'").where("post_custom_fields.id IS NULL").select(:id, :cooked)
Query(Post)
.joins('topic')
.select('id')
.select('cooked')
# Q 370 : # Post.includes(:incoming_email).joins("INNER JOIN post_replies ON post_replies.post_id = posts.id ").where("post_replies.reply_id = ?", post_id).order(id: :desc)
Query(Post)
.includes('incoming_email')
.order('id')
# Q 371 : # Post.includes(:user, :topic, :deleted_by, :user_actions).where(user_id: user_id).with_deleted.order(created_at: :desc)
Query(Post)
.includes('topic')
.includes('user_actions')
.where("reply_to_user_id = ?")
.order('created_at')
# Q 372 : # Post.includes(:user, :topic, topic: :category).references(:posts, :topics, :category).where("topics.archetype = ?", Archetype.private_message).where(post_type: Post.types[:regular]).where("topics.id IN (SELECT topic_id FROM topic_allowed_groups WHERE group_id = ?)", self.id)
Query(Post)
.includes('user')
.includes('topic')
.where("post_type = ?")
.where('topic.archetype = ?')
# Q 373 : # Post.includes(topic: %i{topic_allowed_groups topic_allowed_users}).find(params[:id])
Query(Post)
.includes('topic')
.where("id = ?")
# Q 374 : # Post.joins(:group_mentions).includes(:user, :topic, topic: :category).references(:posts, :topics, :category).where("topics.archetype <> ?", Archetype.private_message).where(post_type: Post.types[:regular]).where("group_mentions.group_id = ?", self.id)
Query(Post)
.joins('group_mentions')
.joins('topic')
.includes('user')
.includes('topic')
.where('topic.archetype != ?')
.where("post_type = ?")
.where('group_mentions.group_id = ?')
# Q 375 : # Post.joins(:topic).includes(:topic).secured(@guardian).merge(Topic.listable_topics.visible.secured(@guardian)).where(user: @user).group("topics.category_id").order("COUNT(*) DESC")
Query(Post)
.joins('topic')
.includes('topic')
.where("user = ?")
.group('topic.category_id, id')
# Q 376 : # Post.joins(:topic).includes(:topic).secured(@guardian).merge(Topic.listable_topics.visible.secured(@guardian)).where(user: @user).where("post_number > 1").order("posts.like_count DESC, posts.created_at DESC").limit(MAX_SUMMARY_RESULTS)
Query(Post)
.joins('topic')
.includes('topic')
.where("user = ?")
.order('id, like_count, created_at')
.return_limit('10')
# Q 377 : # Post.joins(:topic).joins("JOIN posts replies ON posts.topic_id = replies.topic_id AND posts.reply_to_post_number = replies.post_number").includes(:topic).secured(@guardian).merge(Topic.listable_topics.visible.secured(@guardian)).where(user: @user).where("replies.user_id <> ?", @user.id).group("replies.user_id").order("COUNT(*) DESC").limit(MAX_SUMMARY_RESULTS).pluck("replies.user_id, COUNT(*)").each
Query(Post)
.joins('topic')
.includes('topic')
.where("user_id = ?")
.group('user_id, id')
.order('id')
.return_limit('10')
.select('user_id')
# Q 378 : # Post.joins(:topic).where("topics.id = :id AND topics.archetype = :archetype AND posts.post_number = 1", id: id, archetype: archetype).first
Query(Post)
.joins('topic')
.return_limit('1')
# Q 379 : # Post.joins(:topic).where(["topics.category_id = ?", self.id]).where("topics.visible = true").where("posts.deleted_at IS NULL").where("posts.user_deleted = false")
Query(Post)
.joins('topic')
# Q 380 : # Post.joins(:topic, user: :groups, topic: :category).preload(:topic, user: :groups, topic: :category).references(:posts, :topics, :category).where(groups: { id: id }).where("topics.archetype <> ?", Archetype.private_message).where("topics.visible").where(post_type: Post.types[:regular])
Query(Post)
.joins('topic')
.includes('topic')
.where("id = ?")
.where("post_type = ?")
# Q 381 : # Post.order("posts.created_at desc").where("NOT hidden").joins("join topics on topics.id = topic_id").where("topics.category_id = :id", id: self.id).limit(1).pluck("posts.id").first
Query(Post)
.order('id, created_at')
.select('id')
.return_limit('1')
# Q 382 : # Post.private_posts.order(created_at: :desc).where("posts.id <= ?", last_post_id).where("posts.id > ?", last_post_id - 50).includes(topic: :category).includes(user: :primary_group).includes(:reply_to_user).limit(50)
Query(Post)
.order('created_at')
.where('id <= ?')
.where('id > ?')
.return_limit('10')
# Q 383 : # Post.public_posts.order(created_at: :desc).where("posts.id <= ?", last_post_id).where("posts.id > ?", last_post_id - 50).includes(topic: :category).includes(user: :primary_group).includes(:reply_to_user).limit(50)
Query(Post)
.order('created_at')
.includes('topic')
.includes('user')
.where('id > ?')
.return_limit('10')
# Q 384 : # Post.public_posts.where(user_id: user.id).where(post_type: Post.types[:regular]).order(created_at: :desc).includes(:user).includes(topic: :category).limit(50)
Query(Post)
.where("user_id = ?")
.where("post_type = ?")
.order('created_at')
.includes('user')
.includes('topic')
.return_limit('10')
# Q 385 : # Post.secured(guardian).where(id: post_ids).includes(:user, :topic).order(:id).to_a
Query(Post)
.where("id = ?")
.includes('user')
.includes('topic')
.order('id')
# Q 386 : # Post.secured(guardian).where(id: replies.map { |r|
#   
#   r[:id]
# }).pluck(:id).to_set
Query(Post)
.where("id = ?")
.select('id')
# Q 387 : # Post.secured(guardian).where(topic_id: topic_id, user_id: @user.id).count
Query(Post)
.where("topic_id = ?")
.where("user_id = ?")
# Q 388 : # Post.select(:created_at, :user_id, :post_number).where("topic_id = ? and id <> ?", @post.topic_id, @post.id).order("created_at desc").limit(1).first
Query(Post)
.select('created_at')
.select('reply_to_user_id')
.select('post_number')
.where('topic_id != ?')
.where ('id != ?')
.order('id, created_at')
.return_limit('10')
# Q 389 : # Post.unscoped.find(params[:id].to_i)
Query(Post)
.where("id = ?")
# Q 390 : # Post.unscoped.order("id desc").offset(SiteSetting.search_recent_posts_size - 1).limit(2).pluck(:id)
Query(Post)
.order('id')
.return_limit('10')
.select('id')
# Q 391 : # Post.where("baked_version IS NULL OR baked_version < ?", BAKED_VERSION).order("id desc").limit(limit).pluck(:id).each
Query(Post)
.where('baked_version = ?')
.order('id')
.return_limit('10')
.select('id')
# Q 392 : # Post.where("created_at > ?", 30.days.ago).count
Query(Post)
.where('created_at > ?')

# Q 393 : # Post.where("created_at > ?", 7.days.ago).count
Query(Post)
.where('created_at > ?')

# Q 394 : # Post.where("post_number < ? AND topic_id = ? AND post_type = ? AND NOT hidden", @post.post_number, @post.topic_id, Post.types[:regular]).order("post_number DESC").limit(1).pluck(:cooked).first
Query(Post)
.where('post_number < ?')
.where('topic_id = ?')
.where('post_type = ?')
.where('hidden = ?')
.order('id, post_number')
.return_limit('1')
.select('cooked')
# Q 395 : # Post.where(deleted_at: nil, hidden: true).where("hidden_at < ?", 30.days.ago).find_each
Query(Post)
.where("deleted_at = ?")
.where("hidden = ?")
.where("hidden_at < ?")
# Q 396 : # Post.where(deleted_at: nil, user_deleted: true).where("NOT EXISTS (
#             SELECT 1 FROM topics t
#             WHERE t.deleted_at IS NOT NULL AND
#                   t.id = posts.topic_id
#         )").where("updated_at < ?", SiteSetting.delete_removed_posts_after.hours.ago).where("NOT EXISTS (
#                   SELECT 1
#                   FROM post_actions pa
#                   WHERE pa.post_id = posts.id
#                     AND pa.deleted_at IS NULL
#                     AND pa.deferred_at IS NULL
#                     AND pa.post_action_type_id IN (?)
#               )", PostActionType.notify_flag_type_ids).find_each
Query(Post)
.where("deleted_at = ?")
.where("user_deleted = ?")
# Q 397 : # Post.where(hidden: false, deleted_at: nil, topic_id: @topic.id).where("posts.id in (?)", post_ids).joins("LEFT JOIN users u on u.id = posts.user_id").pluck(:id, :cooked, :username).map
Query(Post)
.where("hidden = ?")
.where("deleted_at = ?")
.where("topic_id = ?")
.select('id')
.select('cooked')
# Q 398 : # Post.where(id: @details[:post_id]).pluck(:user_id)
Query(Post)
.where("id = ?")
.select('reply_to_user_id')
# Q 399 : # Post.where(id: params[:id] || params[:post_id])
Query(Post)
.where("id = ?")
# Q 400 : # Post.where(id: params[:id])
Query(Post)
.where("id = ?")
# Q 401 : # Post.where(id: params[:id].to_i)
Query(Post)
.where("id = ?")
# Q 402 : # Post.where(id: params[:post_id]).first
Query(Post)
.where("id = ?")
.return_limit('1')
# Q 403 : # Post.where(id: params[:post_ids]).order(:id)
Query(Post)
.where("id = ?")
.order('id')
# Q 404 : # Post.where(id: post.id)
Query(Post)
.where("id = ?")
# Q 405 : # Post.where(id: post_id)
Query(Post)
.where("id = ?")
# Q 406 : # Post.where(id: post_id)
Query(Post)
.where("id = ?")
# Q 407 : # Post.where(id: post_id)
Query(Post)
.where("id = ?")
# Q 408 : # Post.where(id: post_id).first
Query(Post)
.where("id = ?")
.return_limit('1')
# Q 409 : # Post.where(id: post_ids).each
Query(Post)
.where("id = ?")
# Q 410 : # Post.where(id: post_ids).order(:created_at).last
Query(Post)
.where("id = ?")
.order('created_at')
.return_limit('1')
# Q 411 : # Post.where(id: post_ids).order(:created_at).last
Query(Post)
.where("id = ?")
.order('created_at')
.return_limit('1')
# Q 412 : # Post.where(id: post_ids, topic_id: @topic.id).includes({ user: :primary_group }, :reply_to_user, :deleted_by, :incoming_email, :topic).order("sort_order")
Query(Post)
.where("id = ?")
.where("topic_id = ?")
.includes('user')
.includes('incoming_email')
.includes('topic')
.order('id, sort_order')
# Q 413 : # Post.where(id: post_ids_including_replies).order(:id)
Query(Post)
.where("id = ?")
.order('id')
# Q 414 : # Post.where(id: reply_ids.map { |r|
#   
#   r[:id]
# })
Query(Post)
.where("id = ?")
# Q 415 : # Post.where(post_type: Post.types[:regular], topic_id: @post.topic_id).where("post_number > 1").group(:user_id).count
Query(Post)
.where("post_type = ?")
.where("topic_id = ?")
.group('reply_to_user_id')
# Q 416 : # Post.where(post_type: Post.types[:regular], topic_id: @post.topic_id).where("post_number > 1").group(:user_id).count
Query(Post)
.where("post_type = ?")
.where("topic_id = ?")
.group('reply_to_user_id')
# Q 417 : # Post.where(post_type: Topic.visible_post_types(@guardian.user)).joins(:post_search_data, :topic).joins("LEFT JOIN categories ON categories.id = topics.category_id")
Query(Post)
.where("post_type = ?")
.joins('topic')
# Q 418 : # Post.where(topic: @original_topic, id: post_ids).where.not(post_type: Post.types[:small_action]).where.not(raw: "").order(:created_at).tap
Query(Post)
.where("topic = ?")
.where("id = ?")
.where("post_type = ?")
.where("raw = ?")
.order('created_at')
# Q 419 : # Post.where(topic: topic, id: post_ids).order(:post_number).pluck_first(:post_type)
Query(Post)
.where("topic = ?")
.where("id = ?")
.order('post_number')
# Q 420 : # Post.where(topic: topic_id, post_number: post_number).pluck_first(:id)
Query(Post)
.where("topic = ?")
.where("post_number = ?")
# Q 421 : # Post.where(topic_id: @details[:topic_id]).where("created_at > ?", 1.day.ago).where(post_type: Post.types[:regular]).order("created_at desc").limit(SiteSetting.sequential_replies_threshold).pluck(:user_id)
Query(Post)
.where("topic_id = ?")
.where("post_type = ?")
.order('id, created_at')
.return_limit('10')
.select('reply_to_user_id')
# Q 422 : # Post.where(topic_id: @topic.id).where("post_number > ?", @post.post_number).exists?
Query(Post)
.where("topic_id = ?")
.return_limit('1')
# Q 423 : # Post.where(topic_id: @topic.id, post_number: post_number).with_deleted
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 424 : # Post.where(topic_id: @topic_id, post_number: @post_number).first
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
.return_limit('1')
# Q 425 : # Post.where(topic_id: message_ids.map { |message_id|
#   
#   message_id[topic_id_regexp, 1]
# }.compact, post_number: 1).pluck(:id)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
.select('id')
# Q 426 : # Post.where(topic_id: opts[:topic_id], post_number: opts[:post_number] || 1).pluck_first(:id)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 427 : # Post.where(topic_id: params[:topic_id], post_number: params[:post_number])
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 428 : # Post.where(topic_id: post.topic_id, post_number: post.reply_to_post_number).pluck_first(:id)
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
# Q 429 : # Post.where(topic_id: post.topic_id, post_number: post.reply_to_post_number).select(:user_id, :post_type).lock.first
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
.select('reply_to_user_id')
.select('post_type')
.return_limit('1')
# Q 430 : # Post.where(topic_id: topic.id, post_number: 1).where.not(locked_by_id: nil).exists?
Query(Post)
.where("topic_id = ?")
.where("post_number = ?")
.where("locked_by_id = ?")
.return_limit('1')
# Q 431 : # Post.where(topic_id: topic_id).sum(column)
Query(Post)
.where("topic_id = ?")
# Q 432 : # Post.where(topic_id: topic_ids).update_all("reads = reads - 1")
Query(Post)
.where("topic_id = ?")
# Q 433 : # Post.where(topic_id: user_export.topic_id).find_each
Query(Post)
.where("topic_id = ?")
# Q 434 : # Post.where(user_id: @user.id).order(created_at: :desc).limit(1).pluck(:created_at).first
Query(Post)
.where("reply_to_user_id = ?")
.order('created_at')
.return_limit('10')
.select('created_at')
# Q 435 : # Post.where(user_id: id, topic_id: topic_id)
Query(Post)
.where("user_id = ?")
.where("topic_id = ?")
# Q 436 : # Post.with_deleted.find(post_reply_key.post_id)
Query(Post)
.where("id = ?")
# Q 437 : # Post.with_deleted.find_by(id: post_action&.post_id)
Query(Post)
.where("id = ?")
# Q 438 : # Post.with_deleted.find_by(id: target_id)
Query(Post)
.where("id = ?")
# Q 439 : # Post.with_deleted.where("raw ~ '/uploads/#{
# db}/\\d+/' OR raw ~ '/uploads/#{
# db}/original/(\\d|[a-z])/'").select(:id, :raw, :cooked).all
Query(Post)
.select('id')
.select('raw')
.select('cooked')
# Q 440 : # Post.with_deleted.where(id: @post.id).update_all(Hash[*f.flatten])
Query(Post)
.where("id = ?")
# Q 441 : # Post.with_deleted.where(id: post.id).update_all(raw: post.raw, cooked: post.cooked)
Query(Post)
.where("id = ?")
# Q 442 : # Post.with_deleted.where(id: post_id).pluck_first(:topic_id)
Query(Post)
.where("id = ?")
# Q 443 : # Post.with_deleted.where(id: target_id).update_all(cached)
Query(Post)
.where("id = ?")
# Q 444 : # Post.with_deleted.where(user_id: self.id).where(id: PostAction.where(post_action_type_id: PostActionType.notify_flag_type_ids).where(disagreed_at: nil).select(:post_id)).count
Query(Post)
.where("reply_to_user_id = ?")
.where("id = ?")
# Q 445 : # Post.with_deleted.where(user_id: self.id).where.not(deleted_at: nil).count
Query(Post)
.where("reply_to_user_id = ?")
.where("deleted_at = ?")
# Q 446 : # PostAction.active.where(post_id: target_id).where(post_action_type_id: PostActionType.notify_flag_type_ids)
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
# Q 447 : # PostAction.active.where(post_id: target_id).where(post_action_type_id: PostActionType.notify_flag_types.values)
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
# Q 448 : # PostAction.active.where(post_id: target_id).where(post_action_type_id: action_type_ids)
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
# Q 449 : # PostAction.find_by(post_action_type_id: PostActionType.types[:like], post_id: @data[:last_post_id], user_id: @user.id)
Query(PostAction)
.where("post_action_type_id = ?")
.where("post_id = ?")
.where("user_id = ?")
# Q 450 : # PostAction.find_by(post_id: params[:post_id], user_id: user.id)
Query(PostAction)
.where("post_id = ?")
.where("user_id = ?")
# Q 451 : # PostAction.find_by(user: @created_by, post: @post, post_action_type_id: @post_action_type_id)
Query(PostAction)
.where("user = ?")
.where("post = ?")
.where("post_action_type_id = ?")
# Q 452 : # PostAction.joins(:post).where(user_id: user.id).where("topic_id = ?", topic.id).each
Query(PostAction)
.joins('post')
.where("user_id = ?")
# Q 453 : # PostAction.joins(:user).where(post_id: post_id).sum("CASE WHEN users.moderator OR users.admin THEN #{
# SiteSetting.staff_like_weight} ELSE 1 END")
Query(PostAction)
.joins('user')
.where("post_id = ?")
# Q 454 : # PostAction.publics.where(post_id: @post.id)
Query(PostAction)
.where("post_id = ?")
# Q 455 : # PostAction.publics.with_deleted.where(post_id: self.id, id: self.custom_fields["deleted_public_actions"]).find_each
Query(PostAction)
.where("post_id = ?")
.where("id = ?")
# Q 456 : # PostAction.unscoped.where(post_action_type_id: post_action_type)
Query(PostAction)
.where("post_action_type_id = ?")
# Q 457 : # PostAction.where(post_action_type_id: PostActionType.types[:spam]).where.not(disagreed_at: nil).pluck(:post_id)
Query(PostAction)
.where("post_action_type_id = ?")
.where("disagreed_at = ?")
.select('post_id')
# Q 458 : # PostAction.where(post_id: @filtered_posts.pluck(:id), post_action_type_id: PostActionType.types[:like])
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
# Q 459 : # PostAction.where(post_id: collection_ids, user_id: user_id)
Query(PostAction)
.where("post_id = ?")
.where("user_id = ?")
# Q 460 : # PostAction.where(post_id: post_id).where(post_action_type_id: post_action_type_id).count
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
# Q 461 : # PostAction.where(user: @destroyed_by, post: @post, post_action_type_id: @post_action_type_id)
Query(PostAction)
.where("user = ?")
.where("post = ?")
.where("post_action_type_id = ?")
# Q 462 : # PostAction.where(user_id: id, post_action_type_id: PostActionType.flag_types_without_custom.values).count
Query(PostAction)
.where("user_id = ?")
.where("post_action_type_id = ?")
# Q 463 : # PostAction.where(user_id: self.id).where(disagreed_at: nil).where(post_action_type_id: PostActionType.notify_flag_type_ids).count
Query(PostAction)
.where("user_id = ?")
.where("disagreed_at = ?")
.where("post_action_type_id = ?")
# Q 464 : # PostAction.where(user_id: user_id).where(post_id: post_id).where(post_action_type_id: post_action_type_ids).where(deleted_at: nil).where(disagreed_at: nil).where(targets_topic: targets_topic).exists?
Query(PostAction)
.where("user_id = ?")
.where("post_id = ?")
.where("post_action_type_id = ?")
.where("deleted_at = ?")
.where("disagreed_at = ?")
.where("targets_topic = ?")
.return_limit('1')
# Q 465 : # PostAction.where(where_attrs).with_deleted.where("deleted_at IS NOT NULL").first
Query(PostAction)
.return_limit('1')
# Q 466 : # PostAction.with_deleted.where(post_id: flagged_post_ids).where.not(user_id: @user.id).where.not(agreed_at: nil).pluck(:post_id).uniq.count
Query(PostAction)
.where("post_id = ?")
.where("user_id = ?")
.where("agreed_at = ?")
.select('post_id')
.distinct('')
# Q 467 : # PostAction.with_deleted.where(post_id: flagged_post_ids).where.not(user_id: @user.id).where.not(agreed_at: nil).pluck(:user_id).uniq.count
Query(PostAction)
.where("post_id = ?")
.where("user_id = ?")
.where("agreed_at = ?")
.select('user_id')
.distinct('')
# Q 468 : # PostActionType.where(id: PostActionType.flag_types.values).order("id")
Query(PostActionType)
.where("id = ?")
.order('id')
# Q 469 : # PostActionType.where(id: id).update_all(reviewable_priority: priority.to_i, score_bonus: priority.to_f)
Query(PostActionType)
.where("id = ?")
# Q 470 : # PostActionType.where(id: reviewable_score_type).pluck(:score_bonus)
Query(PostActionType)
.where("id = ?")
.select('score_bonus')
# Q 471 : # PostCustomField.where(name: "import_id", value: import_id).first&.post
Query(PostCustomField)
.where("name = ?")
.where("value = ?")
.return_limit('1')
.where("id = ?")
# Q 472 : # PostCustomField.where(name: "import_id", value: post_import_id).first&.post
Query(PostCustomField)
.where("name = ?")
.where("value = ?")
.return_limit('1')
.where("id = ?")
# Q 473 : # PostCustomField.where(name: Post::MISSING_UPLOADS).delete_all
Query(PostCustomField)
.where("name = ?")
# Q 474 : # PostReply.where(post_id: params[:reply_post_ids]).pluck(:reply_id)
Query(PostReply)
.where("post_id = ?")
.select('reply_id')
# Q 475 : # PostReply.where(reply_id: @post.id).delete_all
Query(PostReply)
.where("reply_id = ?")
# Q 476 : # PostReply.where(reply_id: @post.id).pluck(:post_id)
Query(PostReply)
.where("reply_id = ?")
.select('post_id')
# Q 479 : # PostRevision.find_by(post_id: @post.id, number: @post.version)
Query(PostRevision)
.where("post_id = ?")
.where("number = ?")
# Q 480 : # PostRevision.find_by(post_id: id, number: (
# number + 1))
Query(PostRevision)
.where("post_id = ?")
.where("number = ?")
# Q 481 : # PostRevision.find_by(post_id: post.id, number: revision)
Query(PostRevision)
.where("post_id = ?")
.where("number = ?")
# Q 482 : # PostRevision.find_by(post_id: post_id, number: revision)
Query(PostRevision)
.where("post_id = ?")
.where("number = ?")
# Q 483 : # PostRevision.find_by(post_id: post_id, number: revision)
Query(PostRevision)
.where("post_id = ?")
.where("number = ?")
# Q 484 : # PostRevision.where(post_id: post_id).order(:number)
Query(PostRevision)
.where("post_id = ?")
.order('number')
# Q 485 : # PostTiming.where("topic_id = ? AND user_id = ? AND post_number > ?", topic.id, user.id, last_read).delete_all
Query(PostTiming)

# Q 486 : # PostTiming.where("user_id = ? and topic_id in (?)", user_id, topic_ids).delete_all
Query(PostTiming)

# Q 487 : # PostTiming.where(topic_id: @topic.id, user_id: @user.id).where(post_number: @posts.pluck(:post_number)).pluck(:post_number)
Query(PostTiming)
.where("topic_id = ?")
.where("user_id = ?")
.where("post_number = ?")
.select('post_number')
# Q 488 : # PostTiming.where(topic_id: topic_id, post_number: post_number, user_id: user.id).exists?
Query(PostTiming)
.where("topic_id = ?")
.where("post_number = ?")
.where("user_id = ?")
.return_limit('1')
# Q 489 : # PostUpload.where(post_id: self.id).delete_all
Query(PostUpload)
.where("post_id = ?")
# Q 490 : # QuotedPost.where(post_id: post.id, quoted_post_id: reply_post_id).count
Query(QuotedPost)
.where("post_id = ?")
.where("quoted_post_id = ?")
# Q 491 : # Report.find("web_crawlers", start_date: start_date, end_date: end_date)&.as_json
Query(Report)
.where("id = ?")
# Q 492 : # Report.find(report_type, args)
Query(Report)
.where("id = ?")
# Q 493 : # Report.find(report_type, args)
Query(Report)
.where("id = ?")
# Q 494 : # Report.find(type).as_json
Query(Report)
.where("id = ?")
# Q 495 : # Reviewable.custom_filters.map(&:first)
Query(Reviewable)

# Q 496 : # Reviewable.find_by(id: params[:reviewable_id], created_by: user)
Query(Reviewable)
.where("id = ?")
.where("created_by = ?")
# Q 497 : # Reviewable.viewable_by(user).where(id: params[:reviewable_id]).first
Query(Reviewable)
.where("id = ?")
.return_limit('1')
# Q 498 : # Reviewable.where(category_id: id).update_all(reviewable_by_group_id: reviewable_by_group_id)
Query(Reviewable)
.where("category_id = ?")
# Q 499 : # Reviewable.where(created_by: created_by).pluck(:id)
Query(Reviewable)
.where("created_by = ?")
.select('id')
# Q 500 : # Reviewable.where(created_by_id: id).delete_all
Query(Reviewable)
.where("created_by_id = ?")
# Q 501 : # ReviewableClaimedTopic.where(topic_id: reviewable.topic_id).pluck(:user_id)
Query(ReviewableClaimedTopic)
.where("topic_id = ?")
.select('user_id')
# Q 502 : # ReviewableClaimedTopic.where(topic_id: topic.id).delete_all
Query(ReviewableClaimedTopic)
.where("topic_id = ?")
# Q 503 : # ReviewableClaimedTopic.where(topic_id: topic_ids).includes(:user).each
Query(ReviewableClaimedTopic)
.where("topic_id = ?")
.includes('user')
# Q 504 : # ReviewableFlaggedPost.find_by(target: @post)&.score
Query(ReviewableFlaggedPost)
.select('score')
# Q 505 : # ReviewableFlaggedPost.pending.default_visible.where(topic_id: id).exists?
Query(ReviewableFlaggedPost)
.where("topic_id = ?")
.return_limit('1')
# Q 507 : # ReviewableQueuedPost.pending.where(created_by: @user, topic: @topic).order(:created_at)
Query(ReviewableQueuedPost)
.where("created_by = ?")
.where("topic = ?")
.order('created_at')
# Q 508 : # ReviewableQueuedPost.viewable_by(@user).where(topic_id: @topic.id).pending.count
Query(ReviewableQueuedPost)
.where("topic_id = ?")
# Q 509 : # ReviewableQueuedPost.where(created_by: @user).pending.count
Query(ReviewableQueuedPost)
.where("created_by = ?")
# Q 510 : # ReviewableScore.includes(:reviewable).where("reviewables.type" => "ReviewableFlaggedPost")
Query(ReviewableScore)
.includes('reviewable')
.where("reviewable.type = ?")
# Q 511 : # ReviewableScore.joins(reviewable: :topic).where("reviewables.type = ?", name)
Query(ReviewableScore)

# Q 512 : # ReviewableScore.pending.joins(:reviewable).where("reviewables.topic_id = ?", self.id).pluck("COUNT(DISTINCT reviewable_scores.user_id), COALESCE(SUM(reviewable_scores.score), 0.0)").first
Query(ReviewableScore)
.joins('reviewable')
.return_limit('1')
# Q 515 : # ReviewableUser.find_by(target: self, status: Reviewable.statuses[:pending])
Query(ReviewableUser)
.where("status = ?")
# Q 517 : # ScreenedEmail.find(params[:id].to_i)
Query(ScreenedEmail)
.where("id = ?")
# Q 518 : # ScreenedEmail.limit(200).order("last_match_at desc").to_a
Query(ScreenedEmail)
.return_limit('10')
.order('id, last_match_at')
# Q 519 : # ScreenedEmail.order(created_at: :desc).limit(100)
Query(ScreenedEmail)
.order('created_at')
.return_limit('10')
# Q 520 : # ScreenedIpAddress.find(params[:id])
Query(ScreenedIpAddress)
.where("id = ?")
# Q 521 : # ScreenedIpAddress.where("? <<= ip_address", subnet).exists?
Query(ScreenedIpAddress)
.return_limit('1')
# Q 522 : # ScreenedIpAddress.where(action_type: ScreenedIpAddress.actions[:block]).where("family(ip_address) = 4").where("ip_address << ?", subnet).delete_all
Query(ScreenedIpAddress)
.where("action_type = ?")
# Q 523 : # ScreenedIpAddress.where(action_type: actions[:allow_admin]).count
Query(ScreenedIpAddress)
.where("action_type = ?")
# Q 524 : # ScreenedUrl.select("domain, sum(match_count) as match_count, max(last_match_at) as last_match_at, min(created_at) as created_at").group(:domain).order("last_match_at DESC").to_a
Query(ScreenedUrl)
.select('domain')
.group('domain')
.order('id, last_match_at')
# Q 525 : # SearchLog.order(:id).offset(SiteSetting.search_query_log_max_size).limit(1).pluck(:id)
Query(SearchLog)
.order('id')
.return_limit('10')
.select('id')
# Q 526 : # SearchLog.select("COUNT(*) AS count, created_at::date AS date").where("lower(term) = ? AND created_at > ?", term.downcase, start_of(period))
Query(SearchLog)
.where('term = ?')
# Q 527 : # SearchLog.select(select_sql).where("created_at > ?", start_date)
Query(SearchLog)

# Q 528 : # SearchLog.where("created_at < TIMESTAMP ?", SiteSetting.search_query_log_max_retention_days.days.ago).delete_all
Query(SearchLog)

# Q 529 : # SearchLog.where("id < ?", search_id[0]).delete_all
Query(SearchLog)

# Q 530 : # SharedDraft.where(category_id: destination_category_id).pluck(:topic_id)
Query(SharedDraft)
.where("category_id = ?")
.select('topic_id')
# Q 531 : # SharedDraft.where(topic: @topic).delete_all
Query(SharedDraft)
.where("topic = ?")
# Q 532 : # SharedDraft.where(topic_id: topic.id).update_all(category_id: category.id)
Query(SharedDraft)
.where("topic_id = ?")
# Q 533 : # SingleSignOnRecord.find_by(external_id: external_id)
Query(SingleSignOnRecord)
.where("external_id = ?")
# Q 534 : # SingleSignOnRecord.find_by(external_id: external_id).try(:user)
Query(SingleSignOnRecord)
.where("external_id = ?")
.select('user')
# Q 535 : # SingleSignOnRecord.find_by(external_id: external_id.to_s).try(:user)
Query(SingleSignOnRecord)
.where("external_id = ?")
.select('user')
# Q 536 : # SiteSetting.get("rate_limit_#{
# limit_key}")
Query(SiteSetting)

# Q 537 : # SiteSetting.get("rate_limit_new_user_#{
# limit_key}")
Query(SiteSetting)

# Q 538 : # SiteSetting.has_setting?("rate_limit_new_user_#{
# limit_key}")
Query(SiteSetting)

# Q 539 : # StylesheetCache.where(target: qualified_target, digest: digest).exists?
Query(StylesheetCache)
.where("target = ?")
.where("digest = ?")
.return_limit('1')
# Q 540 : # StylesheetCache.where(target: target)
Query(StylesheetCache)
.where("target = ?")
# Q 541 : # StylesheetCache.where(target: target).limit(max_to_keep).order("id desc").pluck(:id).last
Query(StylesheetCache)
.where("target = ?")
.order('id')
.select('id')
.return_limit('1')
# Q 542 : # Tag.find_by(name: text)
Query(Tag)
.where("name = ?")
# Q 543 : # Tag.find_by(name: text.gsub!("#{
# tag_postfix}", ""))
Query(Tag)
.where("name = ?")
# Q 544 : # Tag.find_by_id(tag_id)
Query(Tag)
.where("id = ?")
# Q 545 : # Tag.find_by_name(params[:search_result_id])&.id
Query(Tag)
.where("name = ?")
# Q 546 : # Tag.find_by_name(params[:tag_id])
Query(Tag)
.where("name = ?")
# Q 547 : # Tag.find_by_name(params[:tag_id])
Query(Tag)
.where("name = ?")
# Q 548 : # Tag.find_by_name(params[:tag_id].force_encoding("UTF-8"))
Query(Tag)
.where("name = ?")
# Q 549 : # Tag.find_by_name(tag_name)
Query(Tag)
.where("name = ?")
# Q 550 : # Tag.find_by_name(tag_name)
Query(Tag)
.where("name = ?")
# Q 551 : # Tag.find_by_name(tag_name)
Query(Tag)
.where("name = ?")
# Q 552 : # Tag.includes(:tag_search_data).where("tag_search_data.search_data @@ #{
# ts_query}").references(:tag_search_data).order("name asc").limit(limit)
Query(Tag)
.order('id, name')
.return_limit('10')
# Q 553 : # Tag.joins(:tag_groups).where("tag_groups.id NOT IN (
#         SELECT tag_group_id
#         FROM tag_group_permissions
#         WHERE group_id = ?)", Group::AUTO_GROUPS[:everyone])
Query(Tag)
.joins('tag_groups')
# Q 554 : # Tag.joins(tag_groups: :tag_group_permissions).where("tag_group_permissions.group_id = ? AND tag_group_permissions.permission_type = ?", Group::AUTO_GROUPS[:everyone], TagGroupPermission.permission_types[:readonly]).pluck(:name)
Query(Tag)
.select('name')
# Q 555 : # Tag.unused.pluck(:name)
Query(Tag)
.select('name')
# Q 556 : # Tag.where("tags.id NOT IN (SELECT tag_id FROM tag_group_memberships)")
Query(Tag)

# Q 557 : # Tag.where("tags.topic_count > 0")
Query(Tag)

# Q 558 : # Tag.where(id: @opts[:tags]).all
Query(Tag)
.where("id = ?")
# Q 559 : # Tag.where(id: missing_parent_tag_ids).all
Query(Tag)
.where("id = ?")
# Q 560 : # Tag.where(id: tags.map(&:id)).all.to_a
Query(Tag)
.where("id = ?")
# Q 561 : # Tag.where(id: tags.map(&:target_tag_id).compact.uniq).select(:id, :name)
Query(Tag)
.where("id = ?")
.select('id')
.select('name')
# Q 562 : # Tag.where(id: tags_arg)
Query(Tag)
.where("id = ?")
# Q 563 : # Tag.where(name: new_value.split("|")).pluck(:id)
Query(Tag)
.where("name = ?")
.select('id')
# Q 564 : # Tag.where(name: new_value.split("|")).pluck(:id)
Query(Tag)
.where("name = ?")
.select('id')
# Q 565 : # Tag.where(name: previous_value.split("|")).pluck(:id)
Query(Tag)
.where("name = ?")
.select('id')
# Q 566 : # Tag.where(name: previous_value.split("|")).pluck(:id)
Query(Tag)
.where("name = ?")
.select('id')
# Q 567 : # Tag.where(name: tag_names).pluck(:id).each
Query(Tag)
.where("name = ?")
.select('id')
# Q 569 : # Tag.where_name(clean_name).first
Query(Tag)
.return_limit('1')
# Q 570 : # Tag.where_name(name).exists?
Query(Tag)
.return_limit('1')
# Q 571 : # Tag.where_name(opts[:selected_tags]).pluck(:id)
Query(Tag)
.select('id')
# Q 572 : # Tag.where_name(params[:synonym_id]).first
Query(Tag)
.return_limit('1')
# Q 573 : # Tag.where_name(params[:tag_id]).first
Query(Tag)
.return_limit('1')
# Q 574 : # Tag.where_name(params[:tag_values]).map do |tag|
#   
#   { value: tag.name, url: tag.full_url }
# end.compact
Query(Tag)
.where("id != 0")
# Q 575 : # Tag.where_name(search_context[:name]).first
Query(Tag)
.return_limit('1')
# Q 576 : # Tag.where_name(tag_names).all
Query(Tag)

# Q 577 : # Tag.where_name(tag_names).all
Query(Tag)

# Q 580 : # Tag.where_name(tags).pluck(:id)
Query(Tag)
.select('id')
# Q 581 : # Tag.where_name(tags_arg)
Query(Tag)

# Q 582 : # Tag.where_name(tags_arg).pluck(:name)
Query(Tag)
.select('name')
# Q 583 : # TagGroup.find(params[:id])
Query(TagGroup)
.where("id = ?")
# Q 584 : # TagGroup.find_by(name: tag_group_name)
Query(TagGroup)
.where("name = ?")
# Q 585 : # TagGroup.order("name ASC").includes(:parent_tag).preload(:tags).all
Query(TagGroup)
.order('id, name')
.includes('parent_tag')
.includes('tags')
# Q 586 : # TagGroup.order("name ASC").includes(:parent_tag).preload(:tags).all
Query(TagGroup)
.order('id, name')
.includes('parent_tag')
.includes('tags')
# Q 587 : # TagGroup.visible(guardian).order("name ASC").includes(:tags).map
Query(TagGroup)
.order('id, name')
.includes('tags')
# Q 588 : # TagGroup.where("lower(name) ILIKE ?", "%#{
# params[:q].strip}%")
Query(TagGroup)

# Q 589 : # TagGroup.where(name: group_name).first
Query(TagGroup)
.where("name = ?")
.return_limit('1')
# Q 590 : # TagGroup.where(name: group_names).all.to_a
Query(TagGroup)
.where("name = ?")
# Q 591 : # TagUser.lookup(user, :muted).joins(:tag).pluck("tags.name")
Query(TagUser)
.joins('tag')
.select('tag.name')
# Q 592 : # TagUser.lookup(user, :muted).joins(:tag).where("tags.name = ?", opts[:tags].first).exists?
Query(TagUser)
.joins('tag')
.return_limit('1')
# Q 593 : # TagUser.lookup(user, :muted).pluck(:tag_id)
Query(TagUser)
.select('tag_id')
# Q 594 : # TagUser.lookup(user, :muted).pluck(:tag_id)
Query(TagUser)
.select('tag_id')
# Q 595 : # TagUser.lookup(user, :muted).pluck(:tag_id)
Query(TagUser)
.select('tag_id')
# Q 596 : # TagUser.where(tag_id: (
# previous_tag_ids - new_tag_ids), notification_level: notification_level).delete_all
Query(TagUser)
.where("tag_id = ?")
.where("notification_level = ?")
# Q 597 : # TagUser.where(tag_id: previous_tag_ids - new_tag_ids, notification_level: notification_level).distinct.pluck(:user_id)
Query(TagUser)
.where("tag_id = ?")
.where("notification_level = ?")
.distinct('')
.select('user_id')
# Q 598 : # TagUser.where(tag_id: tag_id).pluck(:user_id)
Query(TagUser)
.where("tag_id = ?")
.select('user_id')
# Q 599 : # TagUser.where(user: user, notification_level: notification_levels[level])
Query(TagUser)
.where("user = ?")
.where("notification_level = ?")
# Q 600 : # TagUser.where(user_id: user_id).where("tag_id IN (SELECT tag_id FROM topic_tags WHERE topic_id = :id)", id: topic_id).where("notification_level IN (:levels)", levels: [CategoryUser.notification_levels[:watching], CategoryUser.notification_levels[:tracking]]).order("notification_level DESC").limit(1).pluck(:notification_level).first
Query(TagUser)
.where("user_id = ?")
.order('id, notification_level')
.select('notification_level')
.return_limit('10')
# Q 601 : # TagUser.where(user_id: user_id, tag_id: tag_id).first
Query(TagUser)
.where("user_id = ?")
.where("tag_id = ?")
.return_limit('1')
# Q 602 : # Theme.find(@theme_id)
Query(Theme)
.where("id = ?")
# Q 603 : # Theme.find(import_theme_id)
Query(Theme)
.where("id = ?")
# Q 604 : # Theme.find(theme_id).update_javascript_cache!
Query(Theme)
.where("id = ?")
# Q 605 : # Theme.find_by(color_scheme_id: color_scheme_id)
Query(Theme)
.where("color_scheme_id = ?")
# Q 606 : # Theme.find_by(id: @theme_id)
Query(Theme)
.where("id = ?")
# Q 607 : # Theme.find_by(id: SiteSetting.default_theme_id)
Query(Theme)
.where("id = ?")
# Q 608 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 609 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 610 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 611 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 612 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 613 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 614 : # Theme.find_by(id: params[:id])
Query(Theme)
.where("id = ?")
# Q 615 : # Theme.find_by(id: theme_id)
Query(Theme)
.where("id = ?")
# Q 616 : # Theme.find_by(id: theme_id)
Query(Theme)
.where("id = ?")
# Q 617 : # Theme.find_by(name: theme_info["name"])
Query(Theme)
.where("name = ?")
# Q 618 : # Theme.find_by(remote_theme_id: remote_theme_id)
Query(Theme)
.where("remote_theme_id = ?")
# Q 619 : # Theme.order(:name).includes(:child_themes, :parent_themes, :remote_theme, :theme_settings, :settings_field, :locale_fields, :user, :color_scheme, theme_fields: :upload)
Query(Theme)
.order('name')
.includes('child_themes')
.includes('parent_themes')
.includes('remote_theme')
.includes('theme_settings')
.includes('locale_fields')
.includes('user')
.includes('color_scheme')
# Q 620 : # Theme.pluck(:id)
Query(Theme)
.select('id')
# Q 621 : # Theme.user_selectable.pluck(:id)
Query(Theme)
.select('user_selectable')
.select('id')
# Q 622 : # Theme.where("user_selectable OR id = ?", SiteSetting.default_theme_id).pluck(:id, :name)
Query(Theme)
.select('id')
.select('name')
# Q 623 : # Theme.where(color_scheme_id: scheme.id).order(:id).to_a
Query(Theme)
.where("color_scheme_id = ?")
.order('id')
# Q 624 : # Theme.where(color_scheme_id: self.id).pluck(:id)
Query(Theme)
.where("color_scheme_id = ?")
.select('id')
# Q 625 : # Theme.where(id: SiteSetting.default_theme_id).first&.color_scheme
Query(ColorScheme)
.where("id = ?")
.return_limit('1')
.where("id = ?")
# Q 626 : # Theme.where(id: Theme.transform_ids([id])).each
Query(Theme)
.where("id = ?")
# Q 627 : # Theme.where(id: Theme.transform_ids(theme_ids)).each
Query(Theme)
.where("id = ?")
# Q 628 : # Theme.where(id: Theme.transform_ids(theme_ids)).find_each
Query(Theme)
.where("id = ?")
# Q 629 : # Theme.where(id: all_ids).includes(:remote_theme).select { |t|
#   
#   !t.supported? || !t.enabled?
# }.pluck(:id)
Query(Theme)
.where("id = ?")
.includes('remote_theme')
.select('id')
# Q 630 : # Theme.where(id: expected).each
Query(Theme)
.where("id = ?")
# Q 632 : # Theme.where(id: theme_ids.first).pluck(:color_scheme_id).first
Query(Theme)
.where("id = ?")
.select('color_scheme_id')
.return_limit('1')
# Q 633 : # ThemeField.find_by_theme_ids(ids).where(type_id: ThemeField.theme_var_type_ids).each
Query(ThemeField)
.where("theme_id = ?")
.where("type_id = ?")
# Q 634 : # ThemeField.find_by_theme_ids(theme_ids).where(target_id: [Theme.targets[target], Theme.targets[:common]])
Query(ThemeField)
.where("theme_id = ?")
.where("target_id = ?")
# Q 635 : # ThemeField.find_first_locale_fields(theme_ids, I18n.fallbacks[name])
Query(ThemeField)

# Q 636 : # ThemeField.where(id: field_ids_to_destroy).destroy_all
Query(ThemeField)
.where("id = ?")
# Q 637 : # ThemeField.where(name: "yaml", type_id: ThemeField.types[:yaml], theme_id: theme_ids).pluck(:updated_at)
Query(ThemeField)
.where("name = ?")
.where("type_id = ?")
.where("theme_id = ?")
.select('updated_at')
# Q 638 : # ThemeField.where(theme_id: theme_ids, target_id: Theme.targets[:extra_js]).where("compiler_version <> ?", ThemeField::COMPILER_VERSION)
Query(ThemeField)
.where("theme_id = ?")
.where("target_id = ?")
# Q 639 : # ThemeField.where(type_id: ThemeField.types[:theme_upload_var], name: THEME_SPRITE_VAR_NAME, theme_id: Theme.transform_ids(theme_ids)).pluck(:upload_id).each
Query(ThemeField)
.where("type_id = ?")
.where("name = ?")
.where("theme_id = ?")
.select('upload_id')
# Q 640 : # ThemeSetting.where(theme_id: theme_ids).pluck(:updated_at)
Query(ThemeSetting)
.where("theme_id = ?")
.select('updated_at')
# Q 641 : # Topic.find(@topic_id)
Query(Topic)
.where("id = ?")
# Q 642 : # Topic.find(params[:id])
Query(Topic)
.where("id = ?")
# Q 643 : # Topic.find(params[:id]).posts.first.id
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 644 : # Topic.find(params[:id].to_i)
Query(Topic)
.where("id = ?")
# Q 645 : # Topic.find(params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 646 : # Topic.find(params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 647 : # Topic.find(params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 648 : # Topic.find(params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 649 : # Topic.find(topic_id)
Query(Topic)
.where("id = ?")
# Q 650 : # Topic.find_by(id: @opts[:topic_id])
Query(Topic)
.where("id = ?")
# Q 651 : # Topic.find_by(id: @topic_id)
Query(Topic)
.where("id = ?")
# Q 652 : # Topic.find_by(id: details[:topic_id])
Query(Topic)
.where("id = ?")
# Q 653 : # Topic.find_by(id: opts[:topic_id])
Query(Topic)
.where("id = ?")
# Q 654 : # Topic.find_by(id: params[:id])
Query(Topic)
.where("id = ?")
# Q 655 : # Topic.find_by(id: params[:id])
Query(Topic)
.where("id = ?")
# Q 656 : # Topic.find_by(id: params[:id])
Query(Topic)
.where("id = ?")
# Q 657 : # Topic.find_by(id: params[:id])
Query(Topic)
.where("id = ?")
# Q 658 : # Topic.find_by(id: params[:id])
Query(Topic)
.where("id = ?")
# Q 659 : # Topic.find_by(id: params[:reviewable_claimed_topic][:topic_id])
Query(Topic)
.where("id = ?")
# Q 660 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 661 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 662 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 663 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 664 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 665 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 666 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 667 : # Topic.find_by(id: params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 668 : # Topic.find_by(id: params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 669 : # Topic.find_by(id: params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 670 : # Topic.find_by(id: params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 671 : # Topic.find_by(id: params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 672 : # Topic.find_by(id: params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 673 : # Topic.find_by(id: params[:topic_id].to_i)
Query(Topic)
.where("id = ?")
# Q 674 : # Topic.find_by(id: route[:topic_id])
Query(Topic)
.where("id = ?")
# Q 675 : # Topic.find_by(id: search_context[:id].to_i)
Query(Topic)
.where("id = ?")
# Q 676 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 677 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 678 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 679 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 680 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 681 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 682 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 683 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 684 : # Topic.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 685 : # Topic.find_by(slug: "welcome-to-discourse", archetype: Archetype.default)
Query(Topic)
.where("slug = ?")
.where("archetype = ?")
# Q 686 : # Topic.find_by(slug: encoded_slug)
Query(Topic)
.where("slug = ?")
# Q 687 : # Topic.find_by(slug: slug.downcase)
Query(Topic)
.where("slug = ?")
# Q 688 : # Topic.find_by(slug: topic_slug)
Query(Topic)
.where("slug = ?")
# Q 689 : # Topic.find_by_id(SiteSetting.get(map[@page][:topic_id]))
Query(Topic)
.where("id = ?")
# Q 690 : # Topic.find_by_id(id)
Query(Topic)
.where("id = ?")
# Q 691 : # Topic.find_by_id(params[:topic_id])
Query(Topic)
.where("id = ?")
# Q 692 : # Topic.find_by_slug(params[:id])
Query(Topic)
.where("slug = ?")
# Q 693 : # Topic.find_by_slug(params[:id])
Query(Topic)
.where("slug = ?")
# Q 694 : # Topic.find_by_slug(params[:slug])
Query(Topic)
.where("slug = ?")
# Q 695 : # Topic.includes(:allowed_groups).select(:highest_post_number, :archetype, :id).find_by(id: topic_id)
Query(Topic)
.select('highest_post_number')
.select('archetype')
.select('id')
.where("id = ?")
# Q 696 : # Topic.includes(:allowed_groups).select(:highest_post_number, :archetype, :id).find_by(id: topic_id)
Query(Topic)
.select('highest_post_number')
.select('archetype')
.select('id')
.where("id = ?")
# Q 697 : # Topic.includes(:category).find_by(id: hash[:target_topic_id])
Query(Topic)
.where("id = ?")
# Q 698 : # Topic.joins("INNER JOIN posts ON topics.id = posts.topic_id AND topics.user_id <> posts.user_id").where("posts.deleted_at IS NULL AND posts.user_id = ?", self.user_id).distinct.count
Query(Topic)
.distinct('')
# Q 699 : # Topic.joins("JOIN posts AS p ON p.topic_id = topics.id AND p.post_number = 1").where("topics.id IN (?)", candidate_ids).order("similarity DESC").limit(SiteSetting.max_similar_results)
Query(Topic)
.order('id')
.return_limit('10')
# Q 700 : # Topic.joins(:posts).where("posts.id" => ids).select(["posts.id as post_id", "post_number", "topics.slug", "topics.title", "topics.id"]).each
Query(Topic)
.joins('posts')
.where("id = ?")
.select('posts.id, slug, title, id')
# Q 701 : # Topic.listable_topics.visible.secured(@guardian).where("topics.category_id in (?)", top_categories.keys).where(user: @user).group("topics.category_id").order("COUNT(*) DESC").pluck("category_id, COUNT(*)").each
Query(Topic)
.select('visible')
.where("user = ?")
.group('category_id, id')
.order('id')
.select('category_id')
# Q 702 : # Topic.listable_topics.visible.secured(Guardian.new(nil)).where.not(id: category_topic_ids)
Query(Topic)
.select('visible')
.where("id = ?")
# Q 703 : # Topic.listable_topics.visible.secured.order("created_at desc").limit(max)
Query(Topic)
.select('visible')
.order('id, created_at')
.return_limit('10')
# Q 704 : # Topic.listable_topics.visible.secured.order("views desc").limit(max)
Query(Topic)
.select('visible')
.order('id, views')
.return_limit('10')
# Q 705 : # Topic.listable_topics.where("created_at > ?", 30.days.ago).count
Query(Topic)

# Q 706 : # Topic.listable_topics.where("created_at > ?", 7.days.ago).count
Query(Topic)

# Q 707 : # Topic.listable_topics.where(archetype: Archetype.banner).count
Query(Topic)
.where("archetype = ?")
# Q 708 : # Topic.listable_topics.where(id: topic_ids).minimum(:updated_at)
Query(Topic)
.where("id = ?")
# Q 709 : # Topic.listable_topics.where(pinned_globally: true).order(:created_at).limit(1).pluck(:id)
Query(Topic)
.where("pinned_globally = ?")
.order('created_at')
.return_limit('10')
.select('id')
# Q 710 : # Topic.listable_topics.where(slug: slug).pluck(:id)
Query(Topic)
.where("slug = ?")
.select('id')
# Q 711 : # Topic.order("topics.created_at desc").where("visible").where("topics.category_id = :id", id: self.id).limit(1).pluck("topics.id").first
Query(Topic)
.order('id, created_at')
.select('id')
.return_limit('1')
# Q 712 : # Topic.private_messages.where("topics.user_id > 0").with_subtype(topic_subtype)
Query(Topic)

# Q 713 : # Topic.private_messages.where(id: topic_id).exists?
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 714 : # Topic.secured(@guardian).listable_topics.visible.where(user: @user).order("like_count DESC, created_at DESC").limit(MAX_SUMMARY_RESULTS)
Query(Topic)
.select('visible')
.where("user = ?")
.order('id, like_count, created_at')
.return_limit('10')
# Q 715 : # Topic.select("id, slug, title").where("id in (?)", num_clicks.map { |z|
#   
#   z[0]
# })
Query(Topic)
.select('id, slug, title')
# Q 716 : # Topic.select("topics.category_id, COUNT(*) topic_count, SUM(topics.posts_count) post_count").where("topics.id NOT IN (select cc.topic_id from categories cc WHERE topic_id IS NOT NULL)").group("topics.category_id").visible.to_sql
Query(Topic)
.select('category_id')
.group('category_id, id')
.select('visible')
# Q 717 : # Topic.unscoped.where(id: manager.args[:topic_id]).first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 718 : # Topic.visible.listable_topics.secured(Guardian.new(user)).joins("JOIN topic_search_data s ON topics.id = s.topic_id").joins("LEFT JOIN categories c ON topics.id = c.topic_id").where("search_data @@ #{
# ts_query}").where("c.topic_id IS NULL").order("ts_rank(search_data, #{
# ts_query}) DESC").limit(SiteSetting.max_similar_results * 3)
Query(Topic)
.select('visible')
.order('id')
.return_limit('10')
# Q 719 : # Topic.visible.secured(Guardian.new(user)).joins("LEFT OUTER JOIN topic_users ON topic_users.topic_id = topics.id AND topic_users.user_id = #{
# user.id.to_i}").joins("LEFT OUTER JOIN category_users ON category_users.category_id = topics.category_id AND category_users.user_id = #{
# user.id.to_i}").joins("LEFT OUTER JOIN users ON users.id = topics.user_id").where(closed: false, archived: false).where("COALESCE(topic_users.notification_level, 1) <> ?", TopicUser.notification_levels[:muted]).created_since(since).where("topics.created_at < ?", (
# SiteSetting.editing_grace_period || 0).seconds.ago).listable_topics.includes(:category)
Query(Topic)
.select('visible')
.where("closed = ?")
.where("archived = ?")
# Q 720 : # Topic.where("id = :topic_id AND NOT EXISTS(SELECT 1 FROM POSTS WHERE topic_id = :topic_id AND NOT hidden)", topic_id: topic_id).update_all(visible: false)
Query(Topic)

# Q 721 : # Topic.where("pinned_until < now()").update_all(pinned_at: nil, pinned_globally: false, pinned_until: nil)
Query(Topic)

# Q 722 : # Topic.where("topics.archetype = ?", Archetype.private_message).joins("LEFT JOIN topic_users tu ON topics.id = tu.topic_id AND tu.user_id = #{
# @user.id.to_i}")
Query(Topic)

# Q 723 : # Topic.where("topics.user_id > 0")
Query(Topic)

# Q 724 : # Topic.where(archetype: Archetype.banner).first
Query(Topic)
.where("archetype = ?")
.return_limit('1')
# Q 725 : # Topic.where(archetype: Archetype.banner).first
Query(Topic)
.where("archetype = ?")
.return_limit('1')
# Q 726 : # Topic.where(archetype: Archetype::private_message).includes(:invites).where(invites: { email: invite.email }).pluck(:id)
Query(Topic)
.where("archetype = ?")
.select('id')
# Q 727 : # Topic.where(id: @topic_ids)
Query(Topic)
.where("id = ?")
# Q 728 : # Topic.where(id: args[:topic_id], archetype: Archetype.private_message).exists?
Query(Topic)
.where("id = ?")
.where("archetype = ?")
.return_limit('1')
# Q 729 : # Topic.where(id: category_featured_topics.map(&:topic_id))
Query(Topic)
.where("id = ?")
# Q 730 : # Topic.where(id: ft_by_id.keys).to_a
Query(Topic)
.where("id = ?")
# Q 731 : # Topic.where(id: hash[:target_topic_id], archetype: Archetype.private_message).exists?
Query(Topic)
.where("id = ?")
.where("archetype = ?")
.return_limit('1')
# Q 732 : # Topic.where(id: params[:topic_id]).first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 733 : # Topic.where(id: params[:topic_id]).with_deleted.first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 734 : # Topic.where(id: route[:topic_id].to_i).first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 735 : # Topic.where(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 736 : # Topic.where(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 737 : # Topic.where(id: topic_id).first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 738 : # Topic.where(id: topic_id).first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 739 : # Topic.where(id: topic_id).pluck_first(:archetype)
Query(Topic)
.where("id = ?")
# Q 740 : # Topic.where(id: topic_ids).order("reviewable_score DESC")
Query(Topic)
.where("id = ?")
.order('id, reviewable_score')
# Q 741 : # Topic.where(id: topic_ids).to_a
Query(Topic)
.where("id = ?")
# Q 742 : # Topic.where(id: topic_ids).with_deleted.where.not(archetype: "private_message")
Query(Topic)
.where("id = ?")
.where("archetype = ?")
# Q 743 : # Topic.with_deleted.find(post.topic_id)
Query(Topic)
.where("id = ?")
# Q 744 : # Topic.with_deleted.find(post.topic_id)
Query(Topic)
.where("id = ?")
# Q 745 : # Topic.with_deleted.find(post.topic_id)
Query(Topic)
.where("id = ?")
# Q 746 : # Topic.with_deleted.find(topic_id)
Query(Topic)
.where("id = ?")
# Q 747 : # Topic.with_deleted.find_by(id: id).destroy!
Query(Topic)
.where("id = ?")
# Q 748 : # Topic.with_deleted.find_by(id: topic_id)
Query(Topic)
.where("id = ?")
# Q 749 : # Topic.with_deleted.where(id: params[:topic_id]).first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 750 : # Topic.with_deleted.where(id: topic_ids.to_a).to_a
Query(Topic)
.where("id = ?")
# Q 751 : # Topic.with_deleted.where(id: topic_or_topic_id).includes(:category)
Query(Topic)
.where("id = ?")
# Q 752 : # TopicEmbed.find_by("lower(embed_url) = ?", url)
Query(TopicEmbed)

# Q 753 : # TopicEmbed.where("embed_url ~* ?", "^https?://#{
# Regexp.escape(embed_url)}$").pluck_first(:topic_id)
Query(TopicEmbed)

# Q 754 : # TopicEmbed.where(embed_url: @embed_url).exists?
Query(TopicEmbed)
.where("embed_url = ?")
.return_limit('1')
# Q 755 : # TopicEmbed.where(embed_url: embed_url).first
Query(TopicEmbed)
.where("embed_url = ?")
.return_limit('1')
# Q 756 : # TopicEmbed.where(embed_url: urls).includes(:topic).references(:topic)
Query(TopicEmbed)
.where("embed_url = ?")
.includes('topic')
# Q 757 : # TopicEmbed.where(topic_id: id).exists?
Query(TopicEmbed)
.where("topic_id = ?")
.return_limit('1')
# Q 758 : # TopicEmbed.where(topic_id: post.topic_id).pluck_first(:embed_url)
Query(TopicEmbed)
.where("topic_id = ?")
# Q 759 : # TopicLink.find_by(topic_id: topic&.id, post_id: reflected_post&.id, url: reflected_url)
Query(TopicLink)
.where("topic_id = ?")
.where("post_id = ?")
.where("url = ?")
# Q 760 : # TopicLink.find_by(url: url)
Query(TopicLink)
.where("url = ?")
# Q 761 : # TopicLink.includes(:post, :user).joins(:post, :user).where("posts.id IS NOT NULL AND users.id IS NOT NULL").where(topic_id: topic.id, reflection: false).last(200)
Query(TopicLink)
.includes('post')
.includes('user')
.joins('post')
.joins('user')
.where("topic_id = ?")
.where("reflection = ?")
.return_limit('1')
# Q 762 : # TopicLink.joins(:topic, :post).includes(:topic, :post).where("posts.post_type IN (?)", Topic.visible_post_types(@guardian && @guardian.user)).merge(Topic.listable_topics.visible.secured(@guardian)).where(user: @user).where(internal: false, reflection: false, quote: false).order("clicks DESC, topic_links.created_at DESC").limit(MAX_SUMMARY_RESULTS)
Query(TopicLink)
.joins('topic')
.joins('post')
.includes('topic')
.includes('post')
.where("user = ?")
.where("internal = ?")
.where("reflection = ?")
.where("quote = ?")
.order('id, clicks, created_at')
.return_limit('10')
# Q 763 : # TopicLink.where("(post_id = :post_id AND NOT reflection) OR (link_post_id = :post_id AND reflection)", post_id: post.id).delete_all
Query(TopicLink)

# Q 764 : # TopicLink.where("link_post_id = :post_id AND reflection", post_id: post.id).delete_all
Query(TopicLink)

# Q 765 : # TopicLink.where(domain: hosts.keys, user_id: acting_user.id).group(:domain, :post_id).count.each_key
Query(TopicLink)
.where("domain = ?")
.where("user_id = ?")
.group('domain, post_id')
# Q 766 : # TopicTag.where(tag_id: successful.map(&:id)).update_all(tag_id: target_tag.id)
Query(TopicTag)
.where("tag_id = ?")
# Q 767 : # TopicTimer.where("topic_timers.execute_at < ?", Time.zone.now).find_each
Query(TopicTimer)

# Q 768 : # TopicTimer.where(topic: @topic).update_all(deleted_at: DateTime.now, deleted_by_id: @published_by.id)
Query(TopicTimer)
.where("topic = ?")
# Q 769 : # TopicUser.find_by(topic_id: topic, user_id: user)
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
# Q 770 : # TopicUser.joins(:topic).where(:user => user, :notification_level => TopicUser.notification_levels[:watching], "topics.category_id" => topic.category_id).update_all(notification_level: TopicUser.notification_levels[:tracking])
Query(TopicUser)
.joins('topic')
.where("user = ?")
.where("notification_level = ?")
.where("topic.category_id = ?")
# Q 771 : # TopicUser.joins(:topic).where(user: @user, notification_level: watching, "topics.category_id" => @topic.category_id).count
Query(TopicUser)
.joins('topic')
.where("user = ?")
.where("notification_level = ?")
.where("topic.category_id = ?")
# Q 772 : # TopicUser.where("user_id = ? and topic_id in (?)", user_id, topic_ids).delete_all
Query(TopicUser)

# Q 773 : # TopicUser.where(topic: self, user: target_user, notification_level: TopicUser.notification_levels[:muted]).exists?
Query(TopicUser)
.where("topic = ?")
.where("user = ?")
.where("notification_level = ?")
.return_limit('1')
# Q 774 : # TopicUser.where(topic_id: @original_topic.id, user_id: posts.pluck(:user_id)).pluck(:user_id, :notification_level).to_h
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
.select('user_id')
.select('notification_level')
# Q 775 : # TopicUser.where(topic_id: @post.topic_id, user_id: @post.user_id)
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
# Q 776 : # TopicUser.where(topic_id: topic.id, user_id: user.id).update_all(notification_level: TopicUser.notification_levels[:muted])
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
# Q 777 : # TopicUser.where(topic_id: topic.id, user_id: user.id).update_all(notification_level: TopicUser.notification_levels[:tracking])
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
# Q 778 : # TopicUser.where(topic_id: topic_id, user_id: user_id).update_all([attrs_sql, *vals])
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
# Q 779 : # TopicUser.where(topic_id: topic_id, user_id: user_id).update_all(last_visited_at: now)
Query(TopicUser)
.where("topic_id = ?")
.where("user_id = ?")
# Q 780 : # TopicUser.where(user_id: user.id, topic_id: topic.id).update_all(highest_seen_post_number: last_read, last_read_post_number: last_read)
Query(TopicUser)
.where("user_id = ?")
.where("topic_id = ?")
# Q 781 : # TopicUser.where(user_id: user_id, topic_id: topic.id).exists?
Query(TopicUser)
.where("user_id = ?")
.where("topic_id = ?")
.return_limit('1')
# Q 782 : # TopicUser.where(user_id: user_id, topic_id: topic_id).where("notifications_reason_id IS NULL OR (notification_level < :max AND notification_level > :min)", max: notification_level, min: notification_levels[:regular]).exists?
Query(TopicUser)
.where("user_id = ?")
.where("topic_id = ?")
.return_limit('1')
# Q 783 : # TopicUser.where(user_id: user_id, topic_id: topic_id, notification_level: TopicUser.notification_levels[:muted]).exists?
Query(TopicUser)
.where("user_id = ?")
.where("topic_id = ?")
.where("notification_level = ?")
.return_limit('1')
# Q 784 : # TopicViewItem.where(user_id: @user.id).select("topic_id")
Query(TopicView)
.where("user_id = ?")
.select('topic_id')
# Q 785 : # TranslationOverride.where(locale: I18n.locale).pluck(:translation_key)
Query(TranslationOverride)
.where("locale = ?")
.select('translation_key')
# Q 786 : # TranslationOverride.where(locale: I18n.locale).pluck(:translation_key)
Query(TranslationOverride)
.where("locale = ?")
.select('translation_key')
# Q 787 : # TranslationOverride.where(locale: locale).pluck(:translation_key, :value, :compiled_js)
Query(TranslationOverride)
.where("locale = ?")
.select('translation_key')
.select('value')
.select('compiled_js')
# Q 788 : # TranslationOverride.where(locale: locale, translation_key: keys).delete_all
Query(TranslationOverride)
.where("locale = ?")
.where("translation_key = ?")
# Q 789 : # TranslationOverride.where(translation_key: key, locale: I18n.locale).pluck(:value)
Query(TranslationOverride)
.where("translation_key = ?")
.where("locale = ?")
.select('value')
# Q 790 : # UnsubscribeKey.find_by(key: params[:key])
Query(UnsubscribeKey)
.where("key = ?")
# Q 791 : # UnsubscribeKey.find_by(key: params[:key])
Query(UnsubscribeKey)
.where("key = ?")
# Q 792 : # Upload.by_users.where("url NOT LIKE '%/original/_X/%' AND url LIKE '%/uploads/#{
# db}%'").order(id: :desc)
Query(Upload)
.order('id')
# Q 793 : # Upload.find(SKETCH_LOGO_ID)
Query(Upload)
.where("id = ?")
# Q 794 : # Upload.find(upload_id)
Query(Upload)
.where("id = ?")
# Q 795 : # Upload.find_by(id: params[:id], url: request.env["PATH_INFO"])
Query(Upload)
.where("id = ?")
.where("url = ?")
# Q 796 : # Upload.find_by(id: upload_id)
Query(Upload)
.where("id = ?")
# Q 797 : # Upload.find_by(id: upload_id)
Query(Upload)
.where("id = ?")
# Q 798 : # Upload.find_by(id: value)
Query(Upload)
.where("id = ?")
# Q 799 : # Upload.find_by(sha1: params[:sha])
Query(Upload)
.where("sha1 = ?")
# Q 800 : # Upload.find_by(sha1: sha1)
Query(Upload)
.where("sha1 = ?")
# Q 801 : # Upload.find_by(sha1: sha1)
Query(Upload)
.where("sha1 = ?")
# Q 802 : # Upload.find_by(sha1: sha1)
Query(Upload)
.where("sha1 = ?")
# Q 803 : # Upload.find_by(sha1: sha1)
Query(Upload)
.where("sha1 = ?")
# Q 804 : # Upload.find_by(url: url)
Query(Upload)
.where("url = ?")
# Q 805 : # Upload.find_by(url: urls.sample)
Query(Upload)
.where("url = ?")
# Q 806 : # Upload.find_by(url: value)
Query(Upload)
.where("url = ?")
# Q 807 : # Upload.find_by_id(upload_id)
Query(Upload)
.where("id = ?")
# Q 808 : # Upload.joins(:post_uploads).where("post_uploads.post_id >= ? AND post_uploads.post_id <= ?", ids.min, ids.max).pluck(:sha1)
Query(Upload)
.joins('post_uploads')
.select('sha1')
# Q 809 : # Upload.where("id < ?", Upload::SEEDED_ID_THRESHOLD).pluck(:id, :url).to_h
Query(Upload)
.select('id')
.select('url')
# Q 810 : # Upload.where("uploads.extension IS NOT NULL").find_each
Query(Upload)

# Q 811 : # Upload.where(extension: "unknown").update_all(extension: nil)
Query(Upload)
.where("extension = ?")
# Q 812 : # Upload.where(id: downloaded_images.values).pluck(:id)
Query(Upload)
.where("id = ?")
.select('id')
# Q 813 : # Upload.where(id: upload_ids, secure: true).pluck(:original_filename)
Query(Upload)
.where("id = ?")
.select('original_filename')
# Q 814 : # Upload.where(sha1: map.values).pluck(:sha1, :url, :extension, :original_filename, :secure).each
Query(Upload)
.where("sha1 = ?")
.select('sha1')
.select('url')
.select('extension')
.select('original_filename')
# Q 815 : # Upload.where(sha1: sha1).pluck_first(:id)
Query(Upload)
.where("sha1 = ?")
# Q 816 : # User.admins.real.order(:id).first
Query(User)
.order('id')
.return_limit('1')
# Q 817 : # User.find(-2)
Query(User)
.where("id = ?")
# Q 818 : # User.find(@fields["user_id"])
Query(User)
.where("id = ?")
# Q 819 : # User.find(@post.user_id)
Query(User)
.where("id = ?")
# Q 820 : # User.find(params[:for_user_id])
Query(User)
.where("id = ?")
# Q 821 : # User.find(params[:user_id].to_i)
Query(User)
.where("id = ?")
# Q 822 : # User.find(params[:user_id].to_i)
Query(User)
.where("id = ?")
# Q 823 : # User.find(params[:user_id].to_i)
Query(User)
.where("id = ?")
# Q 824 : # User.find(parsed["performed_by"].to_i)
Query(User)
.where("id = ?")
# Q 825 : # User.find(parsed["target_user_id"].to_i)
Query(User)
.where("id = ?")
# Q 826 : # User.find(user.id)
Query(User)
.where("id = ?")
# Q 827 : # User.find(user_id)
Query(User)
.where("id = ?")
# Q 828 : # User.find_by(id: @user_id)
Query(User)
.where("id = ?")
# Q 829 : # User.find_by(id: @user_id)
Query(User)
.where("id = ?")
# Q 830 : # User.find_by(id: SYSTEM_USER_ID)
Query(User)
.where("id = ?")
# Q 831 : # User.find_by(id: opts[:user_id])
Query(User)
.where("id = ?")
# Q 832 : # User.find_by(id: params[:id])
Query(User)
.where("id = ?")
# Q 833 : # User.find_by(id: params[:id].to_i)
Query(User)
.where("id = ?")
# Q 834 : # User.find_by(id: params[:user_id])
Query(User)
.where("id = ?")
# Q 835 : # User.find_by(id: params[:user_id])
Query(User)
.where("id = ?")
# Q 836 : # User.find_by(id: uid.to_i)
Query(User)
.where("id = ?")
# Q 837 : # User.find_by(id: user_id)
Query(User)
.where("id = ?")
# Q 838 : # User.find_by(id: user_id)
Query(User)
.where("id = ?")
# Q 839 : # User.find_by(id: user_id)&.publish_notifications_state
Query(User)
.where("id = ?")
# Q 840 : # User.find_by(id: user_id)&.staff?
Query(User)
.where("id = ?")
# Q 841 : # User.find_by(id: user_id.to_i)
Query(User)
.where("id = ?")
# Q 842 : # User.find_by(username: params[:username])
Query(User)
.where("username = ?")
# Q 843 : # User.find_by(username: params[:username].to_s)
Query(User)
.where("username = ?")
# Q 844 : # User.find_by(username: username)
Query(User)
.where("username = ?")
# Q 845 : # User.find_by(username_lower: SiteSetting.site_contact_username.downcase)
Query(User)
.where("username_lower = ?")
# Q 846 : # User.find_by(username_lower: api_username.downcase)
Query(User)
.where("username_lower = ?")
# Q 847 : # User.find_by(username_lower: params[:username].downcase)
Query(User)
.where("username_lower = ?")
# Q 848 : # User.find_by(username_lower: search_context[:id].downcase)
Query(User)
.where("username_lower = ?")
# Q 849 : # User.find_by(username_lower: username.downcase)
Query(User)
.where("username_lower = ?")
# Q 850 : # User.find_by(username_lower: username.downcase)
Query(User)
.where("username_lower = ?")
# Q 851 : # User.find_by(username_lower: username.downcase)
Query(User)
.where("username_lower = ?")
# Q 852 : # User.find_by(username_lower: username.downcase)
Query(User)
.where("username_lower = ?")
# Q 853 : # User.find_by_email(@email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 854 : # User.find_by_email(@email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 855 : # User.find_by_email(@from_email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 856 : # User.find_by_email(@user_info[:email])
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 857 : # User.find_by_email(@user_info[:email])
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 858 : # User.find_by_email(auth_token.dig(:info, :email))
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 859 : # User.find_by_email(candidate[:email])
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 860 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 861 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 862 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 863 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 864 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 865 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 866 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 867 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 868 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 869 : # User.find_by_email(email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 870 : # User.find_by_email(lower_email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 871 : # User.find_by_email(to_address)&.staff?
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 872 : # User.find_by_email(user.primary_email&.email)
Query(User)
.joins('user_emails')
.where("user_emails.email = ?")
# Q 873 : # User.find_by_id(self.last_editor_id)
Query(User)
.where("id = ?")
# Q 874 : # User.find_by_username(otp_username)
Query(User)
.where("username = ?")
# Q 875 : # User.find_by_username(params[:session_id])
Query(User)
.where("username = ?")
# Q 876 : # User.find_by_username(params[:username])
Query(User)
.where("username = ?")
# Q 877 : # User.find_by_username(params[:username])
Query(User)
.where("username = ?")
# Q 878 : # User.find_by_username(username)
Query(User)
.where("username = ?")
# Q 879 : # User.find_by_username(username)&.id
Query(User)
.where("username = ?")
# Q 888 : # User.human_users.where("admin OR moderator OR id = ?", user_id).pluck(:id)
Query(User)
.select('id')
# Q 889 : # User.human_users.where("admin OR moderator").pluck(:id)
Query(User)
.select('id')
# Q 890 : # User.human_users.where(admin: true).pluck(:username).each
Query(User)
.where("admin = ?")
.select('username')
# Q 891 : # User.includes(:user_option).where(username: names).find_each
Query(User)
.includes('user_option')
.where("username = ?")
# Q 892 : # User.includes(:user_search_data).references(:user_search_data).where(active: true).where(staged: false).where("user_search_data.search_data @@ #{
# ts_query("simple")}").order("CASE WHEN username_lower = '#{
# @original_term.downcase}' THEN 0 ELSE 1 END").order("last_posted_at DESC").limit(limit)
Query(User)
.where("active = ?")
.where("staged = ?")
.order('id, username_lower')
.order('id, last_posted_at')
.return_limit('10')
# Q 893 : # User.includes(:user_stat).where(id: user_ids.to_a).to_a
Query(User)
.includes('user_stat')
.where("id = ?")
# Q 894 : # User.joins("CROSS JOIN categories c").joins("LEFT JOIN category_users cu ON users.id = cu.user_id AND c.id = cu.category_id").where("c.id IN (?) AND cu.notification_level IS NULL", new_category_ids - previous_category_ids).distinct.pluck("users.id")
Query(User)
.distinct('')
.select('id')
# Q 895 : # User.joins("CROSS JOIN tags t").joins("LEFT JOIN tag_users tu ON users.id = tu.user_id AND t.id = tu.tag_id").where("t.id IN (?) AND tu.notification_level IS NULL", new_tag_ids - previous_tag_ids).distinct.pluck("users.id")
Query(User)
.distinct('')
.select('id')
# Q 896 : # User.joins("JOIN (SELECT unnest uid, row_number() OVER () AS rn
#       FROM unnest('{#{
# ids.join(",")}}'::int[])
#     ) x on uid = users.id").order("rn")
Query(User)
.order('id')
# Q 897 : # User.joins("LEFT JOIN user_options ON user_options.user_id = users.id").joins("LEFT JOIN muted_users ON muted_users.user_id = users.id AND muted_users.muted_user_id = #{
# @user.id.to_i}").joins("LEFT JOIN ignored_users ON ignored_users.user_id = users.id AND ignored_users.ignored_user_id = #{
# @user.id.to_i}").where("user_options.user_id IS NOT NULL").where("
#           (user_options.user_id IN (:user_ids) AND NOT user_options.allow_private_messages) OR
#           muted_users.user_id IN (:user_ids) OR
#           ignored_users.user_id IN (:user_ids)
#         ", user_ids: users.keys).pluck(:id).each
Query(User)
.select('id')
# Q 898 : # User.joins(:posts).where("posts.topic_id IN (?)", topic_ids).distinct
Query(User)
.joins('posts')
.distinct('')
# Q 899 : # User.joins(:user_emails).exists?(staged: true, username_lower: lower, user_emails: { primary: true, email: email })
Query(User)
.joins('user_emails')
.return_limit('1')
# Q 900 : # User.joins(:user_emails).where("username_lower IN (:users) OR lower(user_emails.email) IN (:users)", users: users).pluck(:id, :username_lower, :"user_emails.email")
Query(User)
.joins('user_emails')
.select('id')
.select('username_lower')
# Q 901 : # User.joins(:user_emails).where(id: @user_ids).select(AvatarLookup.lookup_columns).each
Query(User)
.joins('user_emails')
.where("id = ?")
# Q 902 : # User.real.where(admin: true).count
Query(User)
.where("admin = ?")
# Q 903 : # User.real.where(staged: false).where.not(id: post.user_id).joins(:topic_users).where.not(topic_users: { last_read_post_number: nil }).where("topic_users.topic_id = ? AND topic_users.last_read_post_number >= ?", post.topic_id, post.post_number)
Query(User)
.where("staged = ?")
.where("id = ?")
.joins('topic_users')
.where("topic_users.last_read_post_number = ?")
# Q 904 : # User.select(:id).find_by(username_lower: username.downcase)
Query(User)
.select('id')
.where("username_lower = ?")
# Q 905 : # User.staff.human_users.where("username_lower not in (?)", reserved_usernames).count
Query(User)

# Q 906 : # User.unscoped.where(trust_level: TrustLevel[0]).where(ip_address: ip_address.to_s).count
Query(User)
.where("trust_level = ?")
# Q 907 : # User.where("0=1")
Query(User)

# Q 908 : # User.where("created_at > ?", 30.days.ago).count
Query(User)

# Q 909 : # User.where("created_at > ?", 7.days.ago).count
Query(User)

# Q 910 : # User.where("id = ? AND primary_group_id = ?", gu.user_id, gu.group_id)
Query(User)

# Q 911 : # User.where("last_seen_at > ?", 30.days.ago).count
Query(User)

# Q 912 : # User.where("last_seen_at > ?", 7.days.ago).count
Query(User)

# Q 913 : # User.where("length(username) < ?", value).pluck_first(:username)
Query(User)

# Q 914 : # User.where("length(username) > ?", value).pluck_first(:username)
Query(User)

# Q 916 : # User.where("uploaded_avatar_id IS NOT NULL").find_each
Query(User)

# Q 917 : # User.where(active: false).where("created_at < ?", SiteSetting.purge_unactivated_users_grace_period_days.days.ago).where("NOT admin AND NOT moderator").where("NOT EXISTS
#               (SELECT 1 FROM topic_allowed_users tu JOIN topics t ON t.id = tu.topic_id AND t.user_id > 0 WHERE tu.user_id = users.id LIMIT 1)
#             ").limit(200).find_each
Query(User)
.where("active = ?")
.return_limit('10')
# Q 918 : # User.where(active: true)
Query(User)
.where("active = ?")
# Q 919 : # User.where(admin: false, staged: false).find_by_email(invite.email)
Query(User)
.where("admin = ?")
.where("staged = ?")
.joins('user_emails')
.where("user_emails.email = ?")
# Q 920 : # User.where(admin: true).human_users.joins(:user_auth_tokens).order("user_auth_tokens.created_at").pluck_first(:id)
Query(User)
.where("admin = ?")
.joins('user_auth_tokens')
.order('id, created_at')
# Q 921 : # User.where(admin: true).human_users.order("last_seen_at DESC")
Query(User)
.where("admin = ?")
.order('id, last_seen_at')
# Q 922 : # User.where(admin: true).where.not(id: id).human_users.blank?
Query(User)
.where("admin = ?")
.where("id = ?")
# Q 923 : # User.where(id: @user_ids).where.not(primary_group_id: nil).select(:id, :primary_group_id)
Query(User)
.where("id = ?")
.where("primary_group_id = ?")
.select('id')
.select('primary_group_id')
# Q 924 : # User.where(id: last_x_replies[0]).pluck_first(:username)
Query(User)
.where("id = ?")
# Q 925 : # User.where(id: params[:user_id].to_i)
Query(User)
.where("id = ?")
# Q 926 : # User.where(id: params[:user_ids].to_s.split(","))
Query(User)
.where("id = ?")
# Q 927 : # User.where(id: post_counts_by_user.keys).includes(:primary_group).each
Query(User)
.where("id = ?")
.includes('primary_group')
# Q 928 : # User.where(id: results.map(&:user_ids).flatten.uniq).each
Query(User)
.where("id = ?")
# Q 929 : # User.where(id: session_user_id.to_i).first
Query(User)
.where("id = ?")
.return_limit('1')
# Q 930 : # User.where(id: staff_user_ids).where(ip_address: ip_address.to_s).count
Query(User)
.where("id = ?")
# Q 931 : # User.where(id: user_id).where("moderator OR admin").exists?
Query(User)
.where("id = ?")
.return_limit('1')
# Q 932 : # User.where(id: user_ids)
Query(User)
.where("id = ?")
# Q 933 : # User.where(id: user_ids)
Query(User)
.where("id = ?")
# Q 934 : # User.where(id: user_ids).update_all(user_attributes)
Query(User)
.where("id = ?")
# Q 935 : # User.where(id: user_key.to_i).first
Query(User)
.where("id = ?")
.return_limit('1')
# Q 936 : # User.where(moderator: true, admin: false).human_users.order("last_seen_at DESC")
Query(User)
.where("moderator = ?")
.where("admin = ?")
.order('id, last_seen_at')
# Q 937 : # User.where(staged: false).where(username_lower: usernames).pluck(:username_lower)
Query(User)
.where("staged = ?")
.where("username_lower = ?")
.select('username_lower')
# Q 938 : # User.where(staged: true).with_email(params[:email].strip.downcase).first
Query(User)
.where("staged = ?")
.return_limit('1')
# Q 939 : # User.where(username: additions + deletions).select("id,username").map { |u|
#   
#   [u.username, u.id]
# }.flatten
Query(User)
.where("username = ?")
.select('id, username')
# Q 940 : # User.where(username: group_params[:owner_usernames].split(",")).pluck(:id)
Query(User)
.where("username = ?")
.select('id')
# Q 941 : # User.where(username: group_params[:usernames].split(","))
Query(User)
.where("username = ?")
# Q 942 : # User.where(username: group_params[:usernames].split(",")).pluck(:id)
Query(User)
.where("username = ?")
.select('id')
# Q 943 : # User.where(username: names).find_each
Query(User)
.where("username = ?")
# Q 944 : # User.where(username: names).pluck(:id, :username).to_h
Query(User)
.where("username = ?")
.select('id')
.select('username')
# Q 945 : # User.where(username: num_clicks.keys).select(:id, :username, :uploaded_avatar_id).inject({ })
Query(User)
.where("username = ?")
.select('id')
.select('username')
.select('uploaded_avatar_id')
# Q 946 : # User.where(username: val).exists?
Query(User)
.where("username = ?")
.return_limit('1')
# Q 947 : # User.where(username_lower: auth_element[:content].strip).first
Query(User)
.where("username_lower = ?")
.return_limit('1')
# Q 948 : # User.where(username_lower: filters[key].downcase).pluck(:id)
Query(User)
.where("username_lower = ?")
.select('id')
# Q 949 : # User.where(username_lower: params[:username].downcase).pluck_first(:id)
Query(User)
.where("username_lower = ?")
# Q 950 : # User.where(username_lower: params[:username].to_s.downcase).pluck_first(:id)
Query(User)
.where("username_lower = ?")
# Q 951 : # User.where(username_lower: params[:usernames].split(",").map(&:downcase))
Query(User)
.where("username_lower = ?")
# Q 952 : # User.where(username_lower: params[filter]).pluck(:id)
Query(User)
.where("username_lower = ?")
.select('id')
# Q 953 : # User.where(username_lower: username.downcase).first
Query(User)
.where("username_lower = ?")
.return_limit('1')
# Q 954 : # User.where.not(id: skip_user_ids).select(:id).find_in_batches
Query(User)
.where("id = ?")
.select('id')
# Q 955 : # User.where.not(id: skip_user_ids).select(:id).find_in_batches
Query(User)
.where("id = ?")
.select('id')
# Q 956 : # User.with_email(Email.downcase(email)).where(staged: false).first
Query(User)
.where("staged = ?")
.return_limit('1')
# Q 957 : # User.with_email(Email.downcase(params[:from])).exists?
Query(User)
.return_limit('1')
# Q 958 : # User.with_email(params[:email]).admins.human_users.first
Query(User)
.return_limit('1')
# Q 959 : # User.with_email(u[:email]).first
Query(User)
.return_limit('1')
# Q 960 : # UserAction.joins(:target_topic, :target_post).merge(Topic.listable_topics.visible.secured(@guardian)).where(action_type: UserAction::WAS_LIKED).where(acting_user_id: @user.id).group(:user_id).order("COUNT(*) DESC").limit(MAX_SUMMARY_RESULTS).pluck("user_actions.user_id, COUNT(*)").each
Query(UserAction)
.joins('target_topic')
.joins('target_post')
.where("action_type = ?")
.where("acting_user_id = ?")
.group('user_id')
.order('id')
.return_limit('10')
# Q 961 : # UserAction.joins(:target_topic, :target_post).merge(Topic.listable_topics.visible.secured(@guardian)).where(user: @user).where(action_type: UserAction::WAS_LIKED).group(:acting_user_id).order("COUNT(*) DESC").limit(MAX_SUMMARY_RESULTS).pluck("acting_user_id, COUNT(*)").each
Query(UserAction)
.joins('target_topic')
.joins('target_post')
.where("user = ?")
.where("action_type = ?")
.group('acting_user_id')
.order('id')
.return_limit('10')
# Q 962 : # UserAction.where(action_type: UserAction::LIKE).count
Query(UserAction)
.where("action_type = ?")
# Q 963 : # UserAction.where(action_type: UserAction::LIKE).where("created_at > ?", 30.days.ago).count
Query(UserAction)
.where("action_type = ?")
# Q 964 : # UserAction.where(action_type: UserAction::LIKE).where("created_at > ?", 7.days.ago).count
Query(UserAction)
.where("action_type = ?")
# Q 965 : # UserAction.where(target_post_id: @post.id).each
Query(UserAction)
.where("target_post_id = ?")
# Q 966 : # UserAction.where(target_post_id: @post.id).where(user_id: prev_owner.id).where(action_type: USER_ACTIONS_TO_REMOVE).update_all(user_id: new_owner.id)
Query(UserAction)
.where("target_post_id = ?")
.where("user_id = ?")
.where("action_type = ?")
# Q 967 : # UserAction.where(target_post_id: @post.id).where(user_id: prev_owner.id).where(action_type: UserAction::WAS_LIKED).update_all(user_id: new_owner.id)
Query(UserAction)
.where("target_post_id = ?")
.where("user_id = ?")
.where("action_type = ?")
# Q 968 : # UserAction.where(target_topic_id: @post.topic_id).where(user_id: prev_owner.id).where(action_type: UserAction::NEW_TOPIC).update_all(user_id: new_owner.id)
Query(UserAction)
.where("target_topic_id = ?")
.where("user_id = ?")
.where("action_type = ?")
# Q 969 : # UserAction.where(user: @user).where(action_type: UserAction::BOOKMARK).count
Query(UserAction)
.where("user = ?")
.where("action_type = ?")
# Q 970 : # UserAction.where(user_id: @user.id, action_type: UserAction::LIKE).where("created_at > ?", time_period.days.ago).count
Query(UserAction)
.where("user_id = ?")
.where("action_type = ?")
# Q 971 : # UserAction.where(user_id: @user.id, action_type: UserAction::WAS_LIKED).where("created_at > ?", time_period.days.ago)
Query(UserAction)
.where("user_id = ?")
.where("action_type = ?")
# Q 972 : # UserAction.where(user_id: id, action_type: UserAction::LIKE).count
Query(UserAction)
.where("user_id = ?")
.where("action_type = ?")
# Q 973 : # UserAction.where(user_id: id, action_type: UserAction::WAS_LIKED).count
Query(UserAction)
.where("user_id = ?")
.where("action_type = ?")
# Q 974 : # UserAction.where(user_id: user_id, target_topic_id: topic_id, action_type: [RESPONSE, MENTION, QUOTE]).order("created_at DESC").pluck_first(:target_post_id)
Query(UserAction)
.where("user_id = ?")
.where("target_topic_id = ?")
.where("action_type = ?")
.order('id, created_at')
# Q 975 : # UserApiKey.find(params[:id])
Query(UserApiKey)
.where("id = ?")
# Q 976 : # UserApiKey.find_by(key: current_key)
Query(UserApiKey)
.where("key = ?")
# Q 977 : # UserApiKey.where(client_id: client_id, user_id: api_key.user_id).where("id <> ?", api_key.id).destroy_all
Query(UserApiKey)
.where("client_id = ?")
.where("user_id = ?")
# Q 978 : # UserApiKey.where(key: user_api_key, revoked_at: nil).includes(:user).first
Query(UserApiKey)
.where("key = ?")
.where("revoked_at = ?")
.includes('user')
.return_limit('1')
# Q 979 : # UserApiKey.where(user_id: user.id, client_id: params[:client_id]).destroy_all
Query(UserApiKey)
.where("user_id = ?")
.where("client_id = ?")
# Q 980 : # UserArchivedMessage.where(topic_id: @topic.id).pluck(:user_id).each
Query(UserArchivedMessage)
.where("topic_id = ?")
.select('user_id')
# Q 981 : # UserArchivedMessage.where(user_id: user_id, topic_id: topic_id).destroy_all
Query(UserArchivedMessage)
.where("user_id = ?")
.where("topic_id = ?")
# Q 982 : # UserArchivedMessage.where(user_id: user_id, topic_id: topic_id).destroy_all
Query(UserArchivedMessage)
.where("user_id = ?")
.where("topic_id = ?")
# Q 983 : # UserAssociatedAccount.find_by(provider_name: name, user_id: user.id)
Query(UserAssociatedAccount)
.where("provider_name = ?")
.where("user_id = ?")
# Q 984 : # UserAssociatedAccount.find_by(provider_name: name, user_id: user.id)
Query(UserAssociatedAccount)
.where("provider_name = ?")
.where("user_id = ?")
# Q 985 : # UserAssociatedAccount.where(user: user, provider_name: auth_token[:provider]).destroy_all
Query(UserAssociatedAccount)
.where("user = ?")
.where("provider_name = ?")
# Q 986 : # UserAuthToken.find_by(id: params[:token_id], user_id: user.id)
Query(UserAuthToken)
.where("id = ?")
.where("user_id = ?")
# Q 987 : # UserAuthToken.where("rotated_at < ?", 1.minute.ago).where(id: user_token.id, prev_auth_token: token).update_all(auth_token_seen: false)
Query(UserAuthToken)
.where("id = ?")
.where("prev_auth_token = ?")
# Q 988 : # UserAuthToken.where(id: params[:token_id], user_id: user.id).each(&:destroy!)
Query(UserAuthToken)
.where("id = ?")
.where("user_id = ?")
# Q 989 : # UserAuthToken.where(id: user_token.id, auth_token: token).update_all(auth_token_seen: true, seen_at: Time.zone.now)
Query(UserAuthToken)
.where("id = ?")
.where("auth_token = ?")
# Q 990 : # UserAuthToken.where(user_id: id).destroy_all
Query(UserAuthToken)
.where("user_id = ?")
# Q 991 : # UserAuthToken.where(user_id: user.id).each(&:destroy!)
Query(UserAuthToken)
.where("user_id = ?")
# Q 992 : # UserAuthTokenLog.where(user_id: user_id).pluck(:client_ip)
Query(UserAuthTokenLog)
.where("user_id = ?")
# Q 993 : # UserBadge.find(params[:id])
Query(UserBadge)
.where("id = ?")
# Q 994 : # UserBadge.find_by(id: params[:user_badge_id])
Query(UserBadge)
.where("id = ?")
# Q 995 : # UserBadge.find_by(user_id: user.id, badge_id: @badge.id)
Query(UserBadge)
.where("user_id = ?")
.where("badge_id = ?")
# Q 996 : # UserBadge.where(badge_id: id).count
Query(UserBadge)
.where("badge_id = ?")
# Q 997 : # UserCustomField.where(name: "import_id", value: "#{
# external_user_id}#{
# import_source}").first
Query(UserCustomField)
.where("name = ?")
.where("value = ?")
.return_limit('1')
# Q 998 : # UserExport.where("created_at < ?", DESTROY_CREATED_BEFORE).find_each
Query(UserExport)

# Q 999 : # UserExport.where(user_id: @user.id, created_at: (
# Time.zone.now.beginning_of_day..Time.zone.now.end_of_day)).count
Query(UserExport)
.where("user_id = ?")
.where("created_at = ?")
# Q 1000 : # UserField.all.includes(:user_field_options).order(:position)
Query(UserField)
.includes('user_field_options')
.order('position')
# Q 1001 : # UserField.order(:position).all
Query(UserField)
.order('position')
# Q 1002 : # UserField.pluck(:id)
Query(UserField)
.select('id')
# Q 1003 : # UserField.pluck(:id)
Query(UserField)
.select('id')
# Q 1004 : # UserField.where("show_on_profile OR show_on_user_card").pluck(:id)
Query(UserField)
.select('id')
# Q 1005 : # UserField.where(id: params.require(:id)).first
Query(UserField)
.where("id = ?")
.return_limit('1')
# Q 1006 : # UserField.where(id: params.require(:id)).first
Query(UserField)
.where("id = ?")
.return_limit('1')
# Q 1007 : # UserFieldOption.where(user_field_id: field.id).delete_all
Query(UserFieldOption)
.where("user_field_id = ?")
# Q 1008 : # UserHistory.find(params[:id])
Query(UserHistory)
.where("id = ?")
# Q 1009 : # UserHistory.for(self, :auto_trust_level_change).where("created_at >= ?", SiteSetting.tl3_promotion_min_duration.to_i.days.ago).where(previous_value: TrustLevel[2].to_s).where(new_value: TrustLevel[3].to_s).exists?
Query(UserHistory)
.where("previous_value = ?")
.where("new_value = ?")
.return_limit('1')
# Q 1010 : # UserHistory.for(self, :silence_user).order("id DESC").first
Query(UserHistory)
.order('id')
.return_limit('1')
# Q 1011 : # UserHistory.for(self, :suspend_user).order("id DESC").first
Query(UserHistory)
.order('id')
.return_limit('1')
# Q 1012 : # UserHistory.where(acting_user_id: @user.id, action: UserHistory.actions[:check_personal_message], topic_id: @topic.id).where("created_at > ?", 1.hour.ago).exists?
Query(UserHistory)
.where("acting_user_id = ?")
.where("action = ?")
.where("topic_id = ?")
.return_limit('1')
# Q 1013 : # UserHistory.where(action: UserHistory.actions[:wizard_step], context: steps).distinct.order(:context).pluck(:context)
Query(UserHistory)
.where("action = ?")
.where("context = ?")
.distinct('')
.order('context')
.select('context')
# Q 1014 : # UserHistory.where(action: UserHistory.actions[:wizard_step], context: steps_with_fields.map(&:id)).uniq.pluck(:context)
Query(UserHistory)
.where("action = ?")
.where("context = ?")
.distinct('')
.select('context')
# Q 1015 : # UserHistory.where(context: id.to_s, action: UserHistory.actions[:disable_theme_component]).order("created_at DESC").first
Query(UserHistory)
.where("context = ?")
.where("action = ?")
.order('id, created_at')
.return_limit('1')
# Q 1016 : # UserOpenId.find_by_url(identity_url)
Query(UserOpenId)
.where("url = ?")
# Q 1017 : # UserOpenId.where("url LIKE ?", "#{
# @identifier}%").find_by(user_id: user.id)
Query(UserOpenId)
.where("user_id = ?")
# Q 1018 : # UserOpenId.where("url LIKE ?", "#{
# @identifier}%").find_by(user_id: user.id)
Query(UserOpenId)
.where("user_id = ?")
# Q 1019 : # UserOption.where(user_id: self.id, timezone: nil).update_all(timezone: timezone)
Query(UserOption)
.where("user_id = ?")
# Q 1020 : # UserOption.where(user_id: user_id).pluck_first(:auto_track_topics_after_msecs)
Query(UserOption)
.where("user_id = ?")
# Q 1021 : # UserProfile.find(user_profile_id).increment!(:views)
Query(UserProfile)
.where("id = ?")
# Q 1022 : # UserProfile.where("bio_cooked_version IS NULL OR bio_cooked_version < ?", BAKED_VERSION).limit(limit).each
Query(UserProfile)
.return_limit('10')
# Q 1023 : # UserProfile.where("dismissed_banner_key IS NOT NULL").update_all(dismissed_banner_key: nil)
Query(UserProfile)

# Q 1024 : # UserSearch.new(params[:name], include_staged_users: true).search.pluck(:id)
Query(UserSearch)
.select('id')
# Q 1026 : # UserStat.where("reset_bounce_score_after < now()").where("bounce_score > 0").update_all(bounce_score: 0)
Query(UserStat)

# Q 1027 : # UserStat.where(user_id: @topic.user_id).update_all("topic_count = topic_count + 1")
Query(UserStat)
.where("user_id = ?")
# Q 1028 : # UserStat.where(user_id: @topic.user_id).update_all("topic_count = topic_count - 1")
Query(UserStat)
.where("user_id = ?")
# Q 1029 : # UserStat.where(user_id: args[:user_id])
Query(UserStat)
.where("user_id = ?")
# Q 1030 : # UserStat.where(user_id: id).update_all(update_args)
Query(UserStat)
.where("user_id = ?")
# Q 1031 : # UserStat.where(user_id: posters).update_all("post_count = post_count + 1")
Query(UserStat)
.where("user_id = ?")
# Q 1032 : # UserStat.where(user_id: posters).update_all("post_count = post_count - 1")
Query(UserStat)
.where("user_id = ?")
# Q 1033 : # UserStat.where(user_id: user_id)
Query(UserStat)
.where("user_id = ?")
# Q 1034 : # UserStat.where(user_id: user_id).first
Query(UserStat)
.where("user_id = ?")
.return_limit('1')
# Q 1035 : # UserStat.where(user_id: user_id).first
Query(UserStat)
.where("user_id = ?")
.return_limit('1')
# Q 1036 : # UserStat.where(user_id: user_id).update_all("likes_given = likes_given + #{
# delta.to_i}")
Query(UserStat)
.where("user_id = ?")
# Q 1037 : # UserStat.where(user_id: user_id).update_all("likes_received = likes_received + #{
# delta.to_i}")
Query(UserStat)
.where("user_id = ?")
# Q 1038 : # UserVisit.where(user_id: id, visited_at: Time.zone.now.to_date).update_all(update_args)
Query(UserVisit)
.where("user_id = ?")
.where("visited_at = ?")
# Q 1039 : # WatchedWord.find_by(id: params[:id])
Query(WatchedWord)
.where("id = ?")
# Q 1040 : # WatchedWord.where("word ILIKE ?", new_word).first
Query(WatchedWord)
.return_limit('1')
# Q 1041 : # WatchedWord.where(action: action).delete_all
Query(WatchedWord)
.where("action = ?")
# Q 1042 : # WatchedWord.where(action: action).pluck(:word).join("\n")
Query(WatchedWord)
.where("action = ?")
.select('word')
# Q 1043 : # WebHook.enqueue_hooks(:post, event, id: post.id, category_id: post.topic&.category_id, tag_ids: post.topic&.tags&.pluck(:id), payload: payload)
Query(WebHook)

# Q 1044 : # WebHook.enqueue_hooks(:topic, event, id: topic.id, category_id: topic.category_id, tag_ids: topic.tags.pluck(:id), payload: payload)
Query(WebHook)

# Q 1045 : # WebHook.find(params[:id])
Query(WebHook)
.where("id = ?")
# Q 1046 : # WebHook.limit(limit).offset(offset).includes(:web_hook_event_types).includes(:categories).includes(:groups)
Query(WebHook)
.return_limit('10')
.includes('web_hook_event_types')
.includes('categories')
.includes('groups')
# Q 1047 : # WebHook.where(active: true).joins(:web_hook_event_types).where("web_hooks.wildcard_web_hook = ? OR web_hook_event_types.name = ?", true, type.to_s).distinct
Query(WebHook)
.where("active = ?")
.joins('web_hook_event_types')
.distinct('')
# Q 1048 : # WebHookEvent.find(params[:event_id])
Query(WebHookEvent)
.where("id = ?")
# Q 1049 : # WebHookEventType.find(WebHookEventType::POST)
Query(WebHookEventType)
.where("id = ?")
# Q 1050 : # badge.user_badges.order("granted_at DESC, id DESC").limit(96)
Query(UserBadge)
.where("badge_id = ?")
.order('id, granted_at')
.return_limit('10')
# Q 1051 : # badge.user_badges.where(user_id: user_id).count
Query(UserBadge)
.where("badge_id = ?")
.where("user_id = ?")
# Q 1052 : # badge_groupings.find
Query(BadgeGrouping)
.where("id = ?")
# Q 1053 : # badges.find
Query(Badge)
.where("id = ?")
# Q 1054 : # badges.includes(:badge_grouping).includes(:badge_type).where(enabled: true, listable: true)
Query(Badge)
.includes('badge_grouping')
.includes('badge_type')
.where("enabled = ?")
.where("listable = ?")
# Q 1055 : # badges.where("name ILIKE ?", "%#{
# search}%")
Query(Badge)

# Q 1056 : # badges.where(allow_title: true).pluck_first(:name)
Query(Badge)
.where("allow_title = ?")
# Q 1057 : # categories.left_outer_joins(:featured_topics).where(topics: { category_id: allowed_category_ids }).group("categories.id").order("max(topics.bumped_at) DESC NULLS LAST").order("categories.id ASC")
Query(Category)
.left_outer_joins('topics')
.where("topics.category_id = ?")
.group('id')
.order('id, topics.bumped_at')
.order('id')
# Q 1058 : # categories.map do |params|
#   
#   category = find_category(params[:site_setting_name])
#   next unless category
#   { id: params[:site_setting_name], name: category.name, selected: unchanged?(category) }
# end.compact
Query(Category)
.where("id != 0")
# Q 1059 : # categories.order(:position, :id)
Query(Category)
.order('position, id')
# Q 1060 : # categories.pluck(:id)
Query(Category)
.select('id')
# Q 1061 : # category&.required_tag_group
Query(TagGroup)
.where("id = ?")
# Q 1062 : # category&.topic&.first_post
Query(Topic)
.where("id = ?")
# Q 1063 : # category&.topic&.first_post
Query(Topic)
.where("id = ?")
# Q 1064 : # category.required_tag_group
Query(TagGroup)
.where("id = ?")
# Q 1065 : # category.required_tag_group.tags.pluck(:id)
Query(Tag)
.where("id = ?")
.select('id')
# Q 1066 : # category.required_tag_group.tags.where("tags.id in (?)", tags.map(&:id)).count
Query(Tag)
.where("id = ?")
# Q 1067 : # category.reviewable_by_group_id
Query(Category)
.select('reviewable_by_group_id')
# Q 1068 : # category.reviewable_by_group_id
Query(Category)
.select('reviewable_by_group_id')
# Q 1069 : # category.subcategories.pluck(:id)
Query(Category)
.select('id')
# Q 1072 : # category.topic.ordered_posts.first
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 1073 : # category.topics.where.not(id: category.topic_id).order("created_at ASC").limit(1).first
Query(Topic)
.where("category_id = ?")
.where("id = ?")
.order('id, created_at')
.return_limit('10')
# Q 1074 : # category_group.group.present?
Query(Group)
.where("id = ?")
# Q 1075 : # category_group.permission_type
Query(CategoryGroup)
.select('permission_type')
# Q 1076 : # category_groups.includes(:group).each
Query(CategoryGroup)
.includes('group')
# Q 1077 : # user.groups.pluck(:id)
Query(Group)
.select('id')
# Q 1078 : # user.security_keys.find_by(id: params[:id].to_i)
Query(UserSecurityKey)
.where("user_id = ?")
.where("id = ?")
# Q 1080 : # user.totps.select(:id, :name, :last_used, :created_at, :method).where(enabled: true).order(:created_at)
Query(UserSecondFactor)
.where("user_id = ?")
.select('id')
.select('last_used')
.select('created_at')
.select('method')
.where("enabled = ?")
.order('created_at')
# Q 1081 : # user.user_second_factors.totps.find_by(id: second_factor_id)
Query(UserSecondFactor)
.where("user_id = ?")
.where("id = ?")
# Q 1082 : # email_logs.where("post_reply_keys.reply_key = ?", reply_key)
Query(EmailLog)

# Q 1083 : # email_logs.where("replace(post_reply_keys.reply_key::VARCHAR, '-', '') ILIKE ?", "%#{
# reply_key}%")
Query(EmailLog)

# Q 1084 : # email_tokens.where("not expired").update_all(expired: true)
Query(EmailToken)

# Q 1085 : # email_tokens.where(email: email, confirmed: true).present?
Query(EmailToken)
.where("email = ?")
.where("confirmed = ?")
# Q 1086 : # find_all_invites_from(inviter, offset).where("invites.user_id IS NOT NULL").order("invites.redeemed_at DESC")
Query(UserExists)
.order('id')
# Q 1088 : # find_by("? <<= ip_address", ip_address.to_s)
Query(ScreenedIpAddress)

# Q 1089 : # find_by(id: id)
Query(Group)
.where("id = ?")
# Q 1090 : # find_by(id: scheme_id)
Query(ColorScheme)
.where("id = ?")
# Q 1091 : # find_by(name: name, https: https, port: port)
Query(IncomingDomain)
.where("name = ?")
.where("https = ?")
.where("port = ?")
# Q 1092 : # find_by(name: name, https: https, port: port)
Query(IncomingDomain)
.where("name = ?")
.where("https = ?")
.where("port = ?")
# Q 1093 : # find_by(path: path, incoming_domain_id: domain_id)
Query(IncomingReferer)
.where("path = ?")
.where("incoming_domain_id = ?")
# Q 1094 : # find_by(path: path, incoming_domain_id: domain_id)
Query(IncomingReferer)
.where("path = ?")
.where("incoming_domain_id = ?")
# Q 1096 : # find_by(upload_id: upload.id, width: width, height: height)
Query(OptimizedImage)
.where("upload_id = ?")
.where("width = ?")
.where("height = ?")
# Q 1097 : # find_by(upload_id: upload.id, width: width, height: height)
Query(OptimizedImage)
.where("upload_id = ?")
.where("width = ?")
.where("height = ?")
# Q 1099 : # find_by_theme_ids(theme_ids).filter_locale_fields(locale_codes).reorder("X.theme_sort_column", "Y.locale_sort_column").select("DISTINCT ON (X.theme_sort_column) *")
Query(ThemeField)
.where("theme_id = ?")
.order('id')
# Q 1100 : # group&.default_notification_level
Query(Group)
.select('default_notification_level')
# Q 1101 : # group.automatic
Query(Group)
.select('automatic')
# Q 1102 : # group.automatic
Query(Group)
.select('automatic')
# Q 1103 : # group.automatic
Query(Group)
.select('automatic')
# Q 1104 : # group.automatic
Query(Group)
.select('automatic')
# Q 1105 : # group.automatic
Query(Group)
.select('automatic')
# Q 1106 : # group.automatic
Query(Group)
.select('automatic')
# Q 1107 : # group.automatic
Query(Group)
.select('automatic')
# Q 1108 : # group.bio_cooked.present?
Query(Group)
.select('bio_cooked')
# Q 1109 : # group.find_by("lower(name) = ?", name.downcase)
Query(Group)

# Q 1110 : # group.full_name.capitalize
Query(Group)
.select('full_name')
# Q 1111 : # group.full_name.present?
Query(Group)
.select('full_name')
# Q 1112 : # group.grant_trust_level.nil?
Query(Group)
.select('grant_trust_level')
# Q 1113 : # group.grant_trust_level.nil?
Query(Group)
.select('grant_trust_level')
# Q 1114 : # group.group_users.build(user_id: user_id)
Query(GroupUser)
.where("group_id = ?")
# Q 1115 : # group.group_users.build(user_id: user_id, owner: true)
Query(GroupUser)
.where("group_id = ?")
# Q 1116 : # group.group_users.create!(user_id: user_id)
Query(GroupUser)
.where("group_id = ?")
# Q 1117 : # group.group_users.where(user_id: @user.id).exists?
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 1118 : # group.group_users.where(user_id: user.id).update_all(owner: false)
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
# Q 1119 : # group.group_users.where(user_id: user.id).update_all(owner: true)
Query(GroupUser)
.where("group_id = ?")
.where("user_id = ?")
# Q 1120 : # group.has_messages
Query(Group)
.select('has_messages')
# Q 1121 : # group.name
Query(Group)
.select('name')
# Q 1122 : # group.name.downcase
Query(Group)
.select('name')
# Q 1123 : # group.primary_group
Query(Group)
.select('primary_group')
# Q 1124 : # group.public_admission
Query(Group)
.select('public_admission')
# Q 1125 : # group.public_admission
Query(Group)
.select('public_admission')
# Q 1126 : # group.public_exit
Query(Group)
.select('public_exit')
# Q 1127 : # group.public_exit
Query(Group)
.select('public_exit')
# Q 1129 : # group.title
Query(Group)
.select('title')
# Q 1130 : # group.title.present?
Query(Group)
.select('title')
# Q 1131 : # group.title.present?
Query(Group)
.select('title')
# Q 1140 : # group.visibility_level
Query(Group)
.select('visibility_level')
# Q 1141 : # group.visibility_level
Query(Group)
.select('visibility_level')
# Q 1142 : # group.visibility_level
Query(Group)
.select('visibility_level')
# Q 1143 : # group.visibility_level
Query(Group)
.select('visibility_level')
# Q 1144 : # group.visibility_level
Query(Group)
.select('visibility_level')
# Q 1145 : # group.visibility_level
Query(Group)
.select('visibility_level')
# Q 1146 : # group_user.owner
Query(GroupUser)
.select('owner')
# Q 1147 : # group_users.pluck(:group_id)
Query(GroupUser)
.select('group_id')
# Q 1148 : # group_users.pluck(:user_id, :notification_level).each
Query(GroupUser)
.select('user_id')
.select('notification_level')
# Q 1149 : # group_users.where("group_id IN (?)", ids).pluck(:group_id)
Query(GroupUser)
.select('group_id')
# Q 1150 : # group_users.where("group_id NOT IN (?)", ids)
Query(GroupUser)

# Q 1151 : # group_users.where(owner: true).pluck(:group_id)
Query(GroupUser)
.where("owner = ?")
.select('group_id')
# Q 1152 : # groups.joins("LEFT JOIN group_users gu ON gu.group_id = groups.id
#     ").where("gu.user_id = ?", user.id)
Query(Group)

# Q 1153 : # groups.map(&:id)
Query(Group)

# Q 1154 : # groups.map(&:id)
Query(Group)

# Q 1155 : # groups.map(&:id)
Query(Group)

# Q 1156 : # groups.map(&:id)
Query(Group)

# Q 1157 : # groups.order("groups.name asc")
Query(Group)
.order('id, name')
# Q 1158 : # groups.pluck("groups.id")
Query(Group)
.select('id')
# Q 1159 : # groups.visible_groups(self)
Query(Group)

# Q 1160 : # groups.where("automatic IS FALSE OR groups.id = #{
# Group::AUTO_GROUPS[:moderators]}")
Query(Group)

# Q 1161 : # groups.where("groups.title <> ''")
Query(Group)

# Q 1162 : # groups.where(automatic: false)
Query(Group)
.where("automatic = ?")
# Q 1163 : # groups.where(automatic: false)
Query(Group)
.where("automatic = ?")
# Q 1164 : # groups.where(visibility_level: Group.visibility_levels[:public])
Query(Group)
.where("visibility_level = ?")
# Q 1165 : # human_users.where("NOT EXISTS(
#                      SELECT 1
#                      FROM anonymous_users a
#                      WHERE a.user_id = users.id
#                   )")
Query(User)

# Q 1166 : # ignored_users.pluck(:id)
Query(IgnoredUser)
.select('id')
# Q 1167 : # includes(:post_details).find_by(post_details: { key: key, value: value })
Query(Post)
.includes('post_details')
.where("post_details.key = ?")
# Q 1169 : # incoming_emails.includes(:user, post: :topic).order(created_at: :desc).offset(params[:offset] || 0).limit(50)
Query(IncomingEmail)
.includes('user')
.includes('topic')
.order('created_at')
.return_limit('10')
# Q 1170 : # incoming_emails.where("error ILIKE ?", "%#{
# params[:error]}%")
Query(IncomingEmail)

# Q 1171 : # incoming_emails.where("from_address ILIKE ?", "%#{
# params[:from]}%")
Query(IncomingEmail)

# Q 1172 : # incoming_emails.where("subject ILIKE ?", "%#{
# params[:subject]}%")
Query(IncomingEmail)

# Q 1173 : # invite.groups.pluck(:id)
Query(Invite)
.select('id')
# Q 1176 : # invites.where("redeemed_at is not null").includes(:invited_by).first
Query(Invite)
.return_limit('1')
# Q 1178 : # joins("LEFT JOIN topics ON notifications.topic_id = topics.id").where("topics.id IS NULL OR topics.deleted_at IS NULL")
Query(Notification)

# Q 1179 : # joins(:topic).where("topics.archetype <> ?", Archetype.private_message)
Query(Post)
.joins('topic')
# Q 1180 : # joins(:topic).where("topics.archetype = ?", Archetype.private_message)
Query(Post)
.joins('topic')
# Q 1181 : # joins(:topic).where("topics.subtype = ?", subtype)
Query(Post)
.joins('topic')
# Q 1182 : # joins(:topic).where("topics.visible = true").where(hidden: false)
Query(Post)
.joins('topic')
.where("hidden = ?")
# Q 1183 : # joins(:user_emails).where("lower(user_emails.email) IN (?)", email)
Query(User)
.joins('user_emails')
# Q 1184 : # muted_users.pluck(:id)
Query(MutedUser)
.select('id')
# Q 1185 : # notifications.uniq(&:id).sort do |x, y|
#   
#   if x.unread_pm? && !y.unread_pm?
#     
#     -1
#   elsif y.unread_pm? && !x.unread_pm?
#     
#     1
#   else
#     
#     y.created_at <=> x.created_at
#   end
# end.take(count)
Query(Notification)
.distinct('')
.return_limit('1')
# Q 1186 : # notifications.visible.order("notifications.created_at desc").first
Query(Notification)
.order('id, created_at')
.return_limit('1')
# Q 1187 : # notifications.where("notification_type <> ?", notification_type)
Query(Notification)

# Q 1188 : # notifications.where("read = false").count
Query(Notification)

# Q 1189 : # optimized_images.find_by(width: width, height: height)
Query(OptimizedImage)
.where("width = ?")
.where("height = ?")
# Q 1190 : # order("action ASC, word ASC")
Query(WatchedWord)
.order('id, action, word')
# Q 1191 : # order("created_at DESC, id DESC")
Query(Post)
.order('id, created_at')
# Q 1192 : # order("notifications.created_at desc").limit(n)
Query(Notification)
.order('id, created_at')
.return_limit('10')
# Q 1193 : # order("position asc")
Query(PostActionType)
.order('id, position')
# Q 1194 : # order("post_number ASC")
Query(Post)
.order('id, post_number')
# Q 1195 : # order("sort_order desc, post_number desc")
Query(Post)
.order('id, sort_order, post_number')
# Q 1196 : # order("topic_count DESC")
Query(Category)
.order('id, topic_count')
# Q 1197 : # order("topics.bumped_at desc")
Query(UserExists)
.order('id')
# Q 1198 : # order("topics.created_at desc, topics.id desc")
Query(UserExists)
.order('id')
# Q 1199 : # order(:sort_order, :post_number)
Query(Post)
.order('sort_order, post_number')
# Q 1200 : # post.errors.add(:base, I18n.t(limit_translation_key, count: max_count))
Query(Post)

# Q 1201 : # post.last_editor_id
Query(Post)
.select('last_editor_id')
# Q 1202 : # post.last_version_at
Query(Post)
.select('last_version_at')
# Q 1203 : # post.post_actions.where(post_action_type_id: post_action_type_id).includes(:user).offset(page * page_size).order("post_actions.created_at ASC").limit(page_size)
Query(PostAction)
.where("post_id = ?")
.where("post_action_type_id = ?")
.includes('user')
.order('id, created_at')
.return_limit('10')
# Q 1204 : # post.topic.category.secure_group_ids
Query(Topic)
.where("id = ?")
# Q 1205 : # post.topic.invite_group(@user, Group[:admins])
Query(Topic)
.where("id = ?")
# Q 1206 : # post_actions.where(post_action_type_id: PostActionType.flag_types_without_custom.values, deleted_at: nil).count
Query(PostAction)
.where("post_action_type_id = ?")
.where("deleted_at = ?")
# Q 1207 : # post_actions.where(user_id: user.id)
Query(PostAction)
.where("user_id = ?")
# Q 1208 : # posts.dup.pluck(:topic_id)
Query(Post)
.select('topic_id')
# Q 1209 : # posts.have_uploads.find_each
Query(Post)

# Q 1210 : # posts.includes(:post_actions).where("post_actions.post_action_type_id" => PostActionType.flag_types_without_custom.values).count
Query(Post)
.includes('post_actions')
.where("post_actions.post_action_type_id = ?")
# Q 1211 : # posts.joins("JOIN users u ON u.id = posts.user_id")
Query(Post)

# Q 1212 : # posts.joins("LEFT JOIN topic_tags ON topic_tags.topic_id = topics.id").joins("LEFT JOIN tags ON tags.id = topic_tags.tag_id")
Query(Post)

# Q 1213 : # posts.order("#{
# data_ranking} DESC")
Query(Post)
.order('id')
# Q 1214 : # posts.order("MAX(#{
# data_ranking}) DESC")
Query(Post)
.order('id')
# Q 1215 : # posts.order("MAX(posts.created_at) DESC")
Query(Post)
.order('id, created_at')
# Q 1216 : # posts.order("MAX(posts.like_count) DESC")
Query(Post)
.order('id, like_count')
# Q 1217 : # posts.order("MAX(topics.created_at) DESC")
Query(Post)
.order('id, created_at')
# Q 1218 : # posts.order("MAX(topics.views) DESC")
Query(Post)
.order('id')
# Q 1219 : # posts.order("post_number desc").limit(batch_size).each
Query(Post)
.order('id, post_number')
.return_limit('10')
# Q 1220 : # posts.order("post_number desc").where("not hidden AND posts.deleted_at IS NULL").first
Query(Post)
.order('id, post_number')
.return_limit('1')
# Q 1221 : # posts.order("posts.like_count DESC")
Query(Post)
.order('id, like_count')
# Q 1222 : # posts.order("topics.bumped_at DESC")
Query(Post)
.order('id')
# Q 1223 : # posts.order("topics.created_at DESC")
Query(Post)
.order('id, created_at')
# Q 1224 : # posts.order("topics.views DESC")
Query(Post)
.order('id')
# Q 1225 : # posts.order(:post_number).pluck(:post_number)
Query(Post)
.order('post_number')
.select('post_number')
# Q 1226 : # posts.pluck(:id)
Query(Post)
.select('id')
# Q 1227 : # posts.pluck(:id)
Query(Post)
.select('id')
# Q 1228 : # posts.pluck(:user_id).uniq.map { |user_id|
#   
#   [user_id, TopicUser.notification_levels[:watching]]
# }.to_h
Query(Post)
.select('user_id')
.distinct('')
# Q 1229 : # posts.reorder("posts.created_at DESC")
Query(Post)
.order('id, created_at')
# Q 1230 : # posts.select(:sort_order).first.try(:sort_order)
Query(Post)
.select('sort_order')
.return_limit('1')
.select('sort_order')
# Q 1231 : # posts.where("(categories.id IS NULL) OR (NOT categories.read_restricted) OR (categories.id IN (?))", secure_category_ids).references(:categories)
Query(Post)

# Q 1232 : # posts.where("(categories.id IS NULL) OR (NOT categories.read_restricted)").references(:categories)
Query(Post)

# Q 1233 : # posts.where("categories.id NOT IN (
#       SELECT categories.id WHERE categories.search_priority = ?
# )
# ", Searchable::PRIORITIES[:ignore])
Query(Post)

# Q 1234 : # posts.where("post_search_data.search_data @@ #{
# ts_query(weight_filter: weights)}")
Query(Post)

# Q 1235 : # posts.where("posts.raw  || ' ' || u.username || ' ' || COALESCE(u.name, '') ilike ?", "%#{
# term_without_quote}%")
Query(Post)

# Q 1236 : # posts.where("posts.user_id = #{
# @search_context.id}")
Query(Post)

# Q 1237 : # posts.where("posts.user_id = ? OR post_type IN (?)", @user.id, visible_types)
Query(Post)

# Q 1238 : # posts.where("tags.id = #{
# @search_context.id}")
Query(Post)

# Q 1239 : # posts.where("topics.archetype <> ?", Archetype.private_message)
Query(Post)

# Q 1240 : # posts.where("topics.archetype =  ?", Archetype.private_message)
Query(Post)

# Q 1241 : # posts.where("topics.category_id in (?)", category_ids)
Query(Post)

# Q 1242 : # posts.where("topics.id #{
# modifier} IN (
#         SELECT DISTINCT(tt.topic_id)
#         FROM topic_tags tt, tags
#         WHERE tt.tag_id = tags.id AND lower(tags.name) IN (?)
#       )", tags)
Query(Post)

# Q 1243 : # posts.where("topics.id #{
# modifier} IN (
#         SELECT tt.topic_id
#         FROM topic_tags tt, tags
#         WHERE tt.tag_id = tags.id
#         GROUP BY tt.topic_id
#         HAVING to_tsvector(#{
# default_ts_config}, array_to_string(array_agg(lower(tags.name)), ' ')) @@ to_tsquery(#{
# default_ts_config}, ?)
#       )", tags.join("&"))
Query(Post)

# Q 1244 : # posts.where("topics.id = #{
# @search_context.id}").order("posts.post_number #{
# @order == :latest ? "DESC" : ""}")
Query(Post)
.order('id, post_number')
# Q 1245 : # posts.where("topics.visible")
Query(Post)

# Q 1246 : # posts.where(post_type: Post.types[:regular], user_deleted: false).order("score desc nulls last").limit(1).first
Query(Post)
.where("post_type = ?")
.where("user_deleted = ?")
.order('id, score')
.return_limit('10')
# Q 1247 : # posts.where(post_type: visible_types)
Query(Post)
.where("post_type = ?")
# Q 1248 : # posts.where(topic_id: topics.pluck(:id))
Query(Post)
.where("topic_id = ?")
# Q 1251 : # reviewable.reviewable_scores.order("created_at DESC").first
Query(Reviewable)
.order('id, created_at')
.return_limit('1')
# Q 1252 : # reviewable_histories.order(:created_at)
Query(ReviewableHistory)
.order('created_at')
# Q 1253 : # reviewables.map(&:target_id).uniq
Query(Reviewable)
.distinct('')
# Q 1254 : # reviewables.where("status <> ?", Reviewable.statuses[:pending])
Query(Reviewable)

# Q 1255 : # reviewables.where(target_created_by_id: opts[:user_id])
Query(Reviewable)
.where("target_created_by_id = ?")
# Q 1256 : # reviewables.where(topic_id: opts[:topic_id])
Query(Reviewable)
.where("topic_id = ?")
# Q 1257 : # screened_ip_addresses.limit(200).order("match_count desc")
Query(ScreenedIpAddress)
.return_limit('10')
.order('id, match_count')
# Q 1258 : # screened_ip_addresses.where("cidr :filter >>= ip_address", filter: filter)
Query(ScreenedIpAddress)

# Q 1259 : # select(:user_id).distinct.where(action_type: [LIKE, NEW_TOPIC, REPLY, NEW_PRIVATE_MESSAGE])
Query(UserAction)
.select('user_id')
.distinct('')
.where("action_type = ?")
# Q 1260 : # self.class.where("lower(email) = ?", email).exists?
Query(UserEmail)
.return_limit('1')
# Q 1261 : # self.errors.add(:base, I18n.t("category.errors.email_already_used_in_group", email: escaped, group_name: Rack::Utils.escape_html(group.name)))
Query(Category)

# Q 1262 : # self.errors.add(:base, I18n.t("groups.errors.cant_allow_membership_requests"))
Query(Group)

# Q 1263 : # self.errors.add(:base, I18n.t("groups.errors.email_already_used_in_category", email: escaped, category_name: Rack::Utils.escape_html(category.name)))
Query(Group)

# Q 1264 : # self.errors.add(:base, I18n.t("groups.errors.email_already_used_in_group", email: escaped, group_name: Rack::Utils.escape_html(group.name)))
Query(Group)

# Q 1265 : # self.errors.add(:base, I18n.t("groups.errors.grant_trust_level_not_valid", trust_level: self.grant_trust_level))
Query(Group)

# Q 1266 : # self.errors.add(:base, I18n.t("groups.errors.invalid_incoming_email", email: escaped))
Query(Group)

# Q 1267 : # self.errors.add(:email, :taken)
Query(UserEmail)

# Q 1268 : # self.execute_at
Query(TopicTimer)
.select('execute_at')
# Q 1269 : # self.find_by("lower(name) = ?", name.downcase)
Query(Tag)

# Q 1271 : # self.group_users.any?(&:owner)
Query(GroupUser)
.where("group_id = ?")
# Q 1272 : # self.group_users.create!(user: user, owner: true)
Query(GroupUser)
.where("group_id = ?")
# Q 1273 : # self.group_users.find_by(user: user)
Query(GroupUser)
.where("group_id = ?")
.where("user = ?")
# Q 1274 : # self.group_users.where(owner: true).exists?
Query(GroupUser)
.where("group_id = ?")
.where("owner = ?")
.return_limit('1')
# Q 1275 : # self.group_users.where(user: user).each(&:destroy)
Query(GroupUser)
.where("group_id = ?")
.where("user = ?")
# Q 1276 : # self.groups.pluck(:id)
Query(Group)
.select('id')
# Q 1278 : # self.includes(:acting_user, :target_user).where(group_id: group.id).order("group_histories.created_at DESC")
Query(GroupHistory)
.includes('target_user')
.where("group_id = ?")
.order('id, created_at')
# Q 1281 : # self.last_editor_id
Query(Post)
.select('last_editor_id')
# Q 1282 : # self.member_of(groups, user).where("gu.owner")
Query(Group)

# Q 1284 : # self.pluck(:id, :name).each
Query(TagGroup)
.select('id')
.select('name')
# Q 1285 : # self.posts.order(sort_order: :asc).first
Query(Post)
.return_limit('1')
# Q 1287 : # self.where("string_to_array(email_in, '|') @> ARRAY[?]", Email.downcase(email)).first
Query(Category)
.return_limit('1')
# Q 1288 : # self.where("string_to_array(incoming_email, '|') @> ARRAY[?]", Email.downcase(email)).first
Query(Group)
.return_limit('1')
# Q 1289 : # self.where("user_id IS NULL AND updated_at < ?", 1.day.ago).delete_all
Query(UserAssociatedAccount)

# Q 1290 : # self.where("viewed_at >= ? AND viewed_at < ?", start_date, end_date + 1.day)
Query(UserProfileView)

# Q 1291 : # self.where(email_type: "signup").order(created_at: :desc).limit(1).pluck(:to_address).first
Query(EmailLog)
.where("email_type = ?")
.order('created_at')
.return_limit('10')
.select('to_address')
# Q 1292 : # self.where(id: parent_slug.to_i).pluck_first(:id)
Query(Category)
.where("id = ?")
# Q 1293 : # self.where(id: req_id(date, user_agent)).update_all(["count = count + ?", val])
Query(WebCrawlerRequest)
.where("id = ?")
# Q 1294 : # self.where(id: slug_or_id.to_i, parent_category_id: parent_category_id).first
Query(Category)
.where("id = ?")
.where("parent_category_id = ?")
.return_limit('1')
# Q 1295 : # self.where(req_type: i)
Query(ApplicationRequest)
.where("req_type = ?")
# Q 1296 : # self.where(slug: (
# encoded_parent_slug || parent_slug), parent_category_id: nil).pluck_first(:id)
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
# Q 1297 : # self.where(slug: (
# encoded_slug_or_id || slug_or_id), parent_category_id: parent_category_id).first
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
.return_limit('1')
# Q 1298 : # self.where(slug: category_slug, parent_category_id: nil).first
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
.return_limit('1')
# Q 1299 : # self.where(slug: category_slug, parent_category_id: parent_category_id).first
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
.return_limit('1')
# Q 1300 : # self.where(slug: parent_category_slug, parent_category_id: nil).select(:id)
Query(Category)
.where("slug = ?")
.where("parent_category_id = ?")
.select('id')
# Q 1301 : # self.where(tag_id: topic.tags.map(&:id), category_id: from_category_id).where("topic_count > 0").update_all("topic_count = topic_count - 1")
Query(CategoryTagStat)
.where("tag_id = ?")
.where("category_id = ?")
# Q 1302 : # self.where(target_user_id: user.id, action: UserHistory.actions[action_type])
Query(UserHistory)
.where("target_user_id = ?")
.where("action = ?")
# Q 1303 : # self.where(target_user_id: user.id, action: UserHistory.actions[action_type])
Query(UserHistory)
.where("target_user_id = ?")
.where("action = ?")
# Q 1304 : # self.where(user: user, notification_level: notification_levels[level])
Query(CategoryUser)
.where("user = ?")
.where("notification_level = ?")
# Q 1305 : # self.with_filters(opts.slice(*staff_filters)).only_staff_actions.order("id DESC").includes(:acting_user, :target_user)
Query(UserHistory)
.order('id')
.includes('target_user')
# Q 1306 : # tag.categories.where(id: guardian.allowed_category_ids).pluck(:name)
Query(Category)
.where("id = ?")
.select('name')
# Q 1308 : # tag.tag_groups.include?(tag_group)
Query(TagGroup)
.where("id = ?")
# Q 1309 : # tag.tag_users.where(user: user).first.try(:notification_level)
Query(TagUser)
.where("tag_id = ?")
.where("user = ?")
.return_limit('1')
.select('notification_level')
# Q 1310 : # tag_group.name
Query(TagGroup)
.select('name')
# Q 1311 : # tag_group.tags
Query(Tag)
.where("id = ?")
# Q 1312 : # tag_group.tags.include?(self)
Query(Tag)
.where("id = ?")
# Q 1313 : # tags.find
Query(Tag)
.where("id = ?")
# Q 1314 : # theme.color_schemes.find_by(name: name)
Query(ColorScheme)
.where("theme_id = ?")
.where("name = ?")
# Q 1315 : # theme.color_schemes.pluck(:name, :id).flatten
Query(ColorScheme)
.where("theme_id = ?")
.select('name')
.select('id')
# Q 1316 : # theme.theme_fields.pluck(:id)
Query(ThemeField)
.where("theme_id = ?")
.select('id')
# Q 1317 : # theme.theme_fields.where(target_id: ThemeField.basic_targets.map { |t|
#   
#   Theme.targets[t.to_sym]
# }, name: ThemeField.scss_fields + ThemeField.html_fields)
Query(ThemeField)
.where("theme_id = ?")
.where("target_id = ?")
.where("name = ?")
# Q 1318 : # theme.theme_fields.where(target_id: ThemeField.basic_targets.map { |t|
#   
#   Theme.targets[t.to_sym]
# }, name: ThemeField.scss_fields)
Query(ThemeField)
.where("theme_id = ?")
.where("target_id = ?")
.where("name = ?")
# Q 1319 : # theme.theme_settings.to_a.find
Query(ThemeSetting)
.where("theme_id = ?")
.where("id = ?")
# Q 1320 : # theme.theme_translation_overrides.to_a.find
Query(ThemeTranslationOverride)
.where("theme_id = ?")
.where("id = ?")
# Q 1321 : # theme_fields.find
Query(ThemeField)
.where("id = ?")
# Q 1322 : # theme_fields.joins(:upload).where(type_id: ThemeField.types[:theme_upload_var]).each
Query(ThemeField)
.joins('upload')
.where("type_id = ?")
# Q 1323 : # theme_fields.where(target_id: Theme.targets[:extra_js]).pluck(:value_baked).join("\n")
Query(ThemeField)
.where("target_id = ?")
.select('value_baked')
# Q 1324 : # theme_fields.where(type_id: ThemeField.types[:theme_upload_var]).each
Query(ThemeField)
.where("type_id = ?")
# Q 1325 : # themes.find(&:default?)
Query(Theme)
.where("id = ?")
# Q 1326 : # top_topics.joins(:topic).where("topics.category_id = ?", category_id)
Query(TopTopic)
.joins('topic')
# Q 1327 : # topic.all_allowed_users.where(id: @user.id).exists?
Query(Topic)
.where("id = ?")
.return_limit('1')
# Q 1328 : # topic.allowed_groups.joins(:group_users).where(publish_read_state: true).select("ARRAY_AGG(group_users.user_id) AS members", :name, :id).group("groups.id")
Query(Topic)
.select('id')
.group('id')
# Q 1329 : # topic.allowed_groups.where("topic_allowed_groups.group_id IN (?)", group_ids).pluck(:id)
Query(Topic)
.select('id')
# Q 1330 : # topic.allowed_users.pluck(:id)
Query(Topic)
.select('id')
# Q 1331 : # topic.allowed_users.pluck(:id)
Query(Topic)
.select('id')
# Q 1332 : # topic.category.groups.pluck("groups.id")
Query(Topic)
.select('id')
# Q 1335 : # topic.first_post.created_at
Query(Topic)
.select('created_at')
# Q 1336 : # topic.last_post_user_id
Query(Topic)
.select('last_post_user_id')
# Q 1337 : # topic.last_post_user_id
Query(Topic)
.select('last_post_user_id')
# Q 1338 : # topic.last_post_user_id
Query(Topic)
.select('last_post_user_id')
# Q 1339 : # topic.last_post_user_id
Query(Topic)
.select('last_post_user_id')
# Q 1340 : # topic.last_post_user_id
Query(Topic)
.select('last_post_user_id')
# Q 1341 : # topic.last_post_user_id
Query(Topic)
.select('last_post_user_id')
# Q 1342 : # topic.posts.find_by(post_number: post_number).decrement!(:reads)
Query(Post)
.where("post_number = ?")
# Q 1344 : # topic.posts.where(post_number: post_number).first
Query(Post)
.where("post_number = ?")
.return_limit('1')
# Q 1345 : # topic.posts.with_deleted.order(:post_number).first
Query(Post)
.order('post_number')
.return_limit('1')
# Q 1346 : # topic.tags.pluck(:id)
Query(Topic)
.select('id')
# Q 1347 : # topic.tags.pluck(:id)
Query(Topic)
.select('id')
# Q 1348 : # topic.tags.pluck(:name)
Query(Tag)
.select('name')
# Q 1349 : # topic.topic_allowed_groups.joins("
#           LEFT JOIN group_users gu
#           ON topic_allowed_groups.group_id = gu.group_id
#           AND gu.user_id = #{
# @user.id.to_i}
#         ").where("gu.group_id IS NOT NULL").pluck(:group_id)
Query(GroupUser)
.select('group_id')
# Q 1350 : # topic.topic_allowed_groups.pluck(:group_id)
Query(GroupUser)
.select('group_id')
# Q 1351 : # topic.topic_allowed_groups.where("group_id IN (SELECT group_id FROM group_users WHERE user_id = ?)", user.id).exists?
Query(Topic)
.return_limit('1')
# Q 1352 : # topic.topic_allowed_users.where(user_id: -2).exists?
Query(Topic)
.where("user_id = ?")
.return_limit('1')
# Q 1353 : # topic.topic_allowed_users.where(user_id: user.id).exists?
Query(Topic)
.where("user_id = ?")
.return_limit('1')
# Q 1354 : # topic_allowed_group.group.set_message_default_notification_levels!(topic)
Query(Group)
.where("id = ?")
# Q 1355 : # topic_allowed_groups.find_by(group_id: group.id)
Query(TopicAllowedGroup)
.where("group_id = ?")
# Q 1356 : # topic_allowed_users.find_by(user_id: user.id)
Query(TopicAllowedUser)
.where("user_id = ?")
# Q 1357 : # topic_links.includes(:post).where.not(post_id: disagreed_flag_post_ids).each
Query(TopicLink)
.includes('post')
.where("post_id = ?")
# Q 1358 : # topic_timer.based_on_last_post
Query(TopicTimer)
.select('based_on_last_post')
# Q 1359 : # topic_timer.based_on_last_post
Query(TopicTimer)
.select('based_on_last_post')
# Q 1360 : # topic_timer.errors.add(:execute_at, :invalid)
Query(TopicTimer)

# Q 1361 : # topic_timer.execute_at
Query(TopicTimer)
.select('execute_at')
# Q 1362 : # topic_timers.find_by(deleted_at: nil, public_type: false, user_id: user.id)
Query(TopicTimer)
.where("deleted_at = ?")
.where("public_type = ?")
.where("user_id = ?")
# Q 1363 : # topic_timers.find_by(deleted_at: nil, public_type: true)
Query(TopicTimer)
.where("deleted_at = ?")
.where("public_type = ?")
# Q 1364 : # topics.find
Query(Topic)
.where("id = ?")
# Q 1365 : # topics.joins("LEFT OUTER JOIN top_topics ON top_topics.topic_id = topics.id").order(TopicQuerySQL.order_top_with_notification_levels(score))
Query(Topic)
.order('score')
# Q 1366 : # topics.map do |params|
#   
#   post = find_post(params[:site_setting_name])
#   next unless post
#   { id: params[:site_setting_name], name: post.topic.title, selected: unchanged?(post) }
# end.compact
Query(Topic)
.where("id != 0")
# Q 1367 : # topics.order(TopicQuerySQL.order_top_for(score))
Query(Topic)
.order('score')
# Q 1368 : # topics.order(TopicQuerySQL.order_top_with_pinned_category_for(score))
Query(Topic)
.order('score')
# Q 1369 : # topics.pluck(:id)
Query(Topic)
.select('id')
# Q 1376 : # topics.where("tu.last_visited_at IS NOT NULL").order("tu.last_visited_at DESC")
Query(Topic)
.joins('topic_users')
.order('id, topic_users.last_visited_at')
# Q 1377 : # topics.where(user_id: user.id)
Query(Topic)
.where("user_id = ?")
# Q 1378 : # upload.optimized_images.find_each
Query(OptimizedImage)
.where("upload_id = ?")
# Q 1379 : # upload.optimized_images.find_each(&:destroy!)
Query(OptimizedImage)
.where("upload_id = ?")
# Q 1380 : # uploads.joins("LEFT JOIN #{
# table_name} ON #{
# table_name}.etag = model.etag").where("#{
# table_name}.etag IS NULL AND model.etag IS NOT NULL")
Query(Upload)

# Q 1381 : # user.badges.where(allow_title: true).pluck(:name).any?
Query(User)
.joins('user_badges')
.joins('badges')
.where("user_badges.user_id = ?")
.where("badges.allow_title = ?")
.select('name')
# Q 1382 : # user.email_tokens.active.where(email: user.email).exists?
Query(EmailToken)
.where("user_id = ?")
.where("email = ?")
.return_limit('1')
# Q 1383 : # user.group_users.pluck(:group_id)
Query(GroupUser)
.where("user_id = ?")
.select('group_id')
# Q 1384 : # user.groups.where(title: title).exists?
Query(User)
.joins('group_users')
.where("group_users.user_id = ?")
.joins('groups')
.where("groups.title = ?")
.return_limit('1')
# Q 1385 : # user.last_seen_at
Query(User)
.select('last_seen_at')
# Q 1386 : # user.last_seen_at
Query(User)
.select('last_seen_at')
# Q 1387 : # user.last_seen_at
Query(User)
.select('last_seen_at')
# Q 1388 : # user.last_seen_at.nil?
Query(User)
.select('last_seen_at')
# Q 1389 : # user.notifications.order("notifications.created_at DESC").where(id: ids).joins(:topic).limit(count)
Query(Notification)
.where("user_id = ?")
.order('id, created_at')
.where("id = ?")
.joins('topic')
.return_limit('10')
# Q 1390 : # user.notifications.visible.recent(count).includes(:topic)
Query(Notification)
.where("user_id = ?")
.includes('topic')
# Q 1391 : # user.primary_group.try(:name)
Query(Group)
.where("id = ?")
.select('name')
# Q 1392 : # user.primary_group_id
Query(User)
.select('primary_group_id')
# Q 1394 : # user_badges.includes(:user, :granted_by, badge: :badge_type, post: :topic, user: :primary_group)
Query(UserBadge)
.includes('granted_by')
# Q 1395 : # user_badges.includes(badge: [:badge_grouping, :badge_type]).includes(post: :topic).includes(:granted_by)
Query(UserBadge)
.includes('granted_by')
# Q 1397 : # user_stat.try(:first_post_created_at)
Query(UserStat)
.select('first_post_created_at')
# Q 1398 : # user_visits.find_by(visited_at: date)
Query(UserVisit)
.where("visited_at = ?")
# Q 1399 : # users.includes(:secure_categories).where("users.admin = TRUE OR categories.id = ?", topic.category.id).references(:categories)
Query(User)
.includes('secure_categories')
# Q 1400 : # users.includes(:user_search_data).references(:user_search_data).where("user_search_data.search_data @@ #{
# query}").order(DB.sql_fragment("CASE WHEN username_lower LIKE ? THEN 0 ELSE 1 END ASC", @term_like))
Query(User)
.order('username_lower')
# Q 1401 : # users.joins("INNER JOIN group_users ON group_users.user_id = users.id").where("group_users.group_id IN (?)", @groups.map(&:id))
Query(User)

# Q 1402 : # users.joins(:user_option).select("users.*, user_options.timezone, group_users.created_at as added_at")
Query(User)
.joins('user_option')
.select('created_at')
# Q 1403 : # users.order("NOT group_users.owner").order(order).order(username_lower: dir).limit(limit).offset(offset).includes(:primary_group)
Query(User)
.joins('group_users')
.order('id, group_users.owner')
.order('username_lower')
.return_limit('10')
.includes('primary_group')
# Q 1404 : # users.order(order).order(username_lower: dir).where("group_users.owner").includes(:primary_group)
Query(User)
.order('username_lower')
.includes('primary_group')
# Q 1405 : # users.pluck(:username).join(",")
Query(User)
.select('username')
# Q 1406 : # users.select("users.*, group_requests.reason, group_requests.created_at requested_at").order(params[:order] == "requested_at" ? "group_requests.created_at #{
# dir}" : "").order(username_lower: dir).limit(limit).offset(offset)
Query(User)
.joins('group_requests')
.select('group_requests.reason, group_requests.created_at')
.order('username_lower')
.return_limit('10')
# Q 1407 : # users.where(staged: false)
Query(User)
.where("staged = ?")
# Q 1411 : # where("NOT categories.read_restricted")
Query(Category)
.where('read_restricted = ?')

# Q 1412 : # where("NOT is_bounce AND error IS NOT NULL")
Query(IncomingEmail)
.where('error = ?')

# Q 1413 : # where("action IN (?)", UserHistory.staff_action_ids)
Query(UserHistory)
.where('action = ?')

# Q 1414 : # where("lower(tags.name) IN (?)", name)
Query(Tag)
.where('name = ?')

# Q 1415 : # where("posts.created_at > ?", time_ago)
Query(Post)
.where('created_at = ?')

# Q 1416 : # where("posts.post_type IN (?)", Topic.visible_post_types(guardian&.user))
Query(Post)
.where('post_type = ?')

# Q 1420 : # where("silenced_till IS NOT NULL AND silenced_till > ?", Time.zone.now)
Query(User)
.where('silenced_till > ?')

# Q 1421 : # where("silenced_till IS NULL OR silenced_till <= ?", Time.zone.now)
Query(User)
.where('silenced_till <= ?')

# Q 1422 : # where("suspended_till IS NOT NULL AND suspended_till > ?", Time.zone.now)
Query(User)
.where('suspended_till > ?')

# Q 1423 : # where("suspended_till IS NULL OR suspended_till <= ?", Time.zone.now)
Query(User)
.where('suspended_till <= ?')

# Q 1424 : # where("topics.archetype <> ?", Archetype.private_message)
Query(Topic)
.where('archetype != ?')

# Q 1425 : # where("topics.category_id IS NULL OR topics.category_id IN (SELECT id FROM categories WHERE #{
# condition[0]})", condition[1])
Query(Topic)
.where('category_id = ?')

# Q 1426 : # where("topics.created_at > ?", time_ago)
Query(Topic)
.where('created_at > ?')

# Q 1427 : # where("topics.subtype = ?", subtype)
Query(Topic)
.where('subtype = ?')

# Q 1428 : # where("uploads.id > ?", SEEDED_ID_THRESHOLD)
Query(Upload)
.where('id > ?')

# Q 1429 : # where("user_selectable OR id = ?", SiteSetting.default_theme_id)
Query(Theme)
.where('user_selectable = ?')

# Q 1430 : # where("users.id > 0")
Query(User)
.where('id > ?')

# Q 1431 : # where("visited_at >= ? and visited_at <= ?", start_date.to_date, end_date.to_date)
Query(UserVisit)
.where('visited_at >= ?')

# Q 1432 : # where(active: true)
Query(User)
.where("active = ?")
# Q 1433 : # where(archetype: Archetype.private_message)
Query(Topic)
.where("archetype = ?")
# Q 1434 : # where(bounced: true)
Query(EmailLog)
.where("bounced = ?")
# Q 1435 : # where(confirmed: false)
Query(EmailToken)
.where("confirmed = ?")
# Q 1436 : # where(disagreed_at: nil, deferred_at: nil, agreed_at: nil, deleted_at: nil)
Query(PostAction)
.where("disagreed_at = ?")
.where("deferred_at = ?")
.where("agreed_at = ?")
.where("deleted_at = ?")
# Q 1437 : # where(expired: false).where("created_at > ?", valid_after)
Query(EmailToken)
.where("expired = ?")
# Q 1440 : # where(method: UserSecondFactor.methods[:backup_codes], enabled: true)
Query(UserSecondFactor)
.where("method = ?")
.where("enabled = ?")
# Q 1441 : # where(method: UserSecondFactor.methods[:totp])
Query(UserSecondFactor)
.where("method = ?")
# Q 1442 : # where(method: UserSecondFactor.methods[:totp], enabled: true)
Query(UserSecondFactor)
.where("method = ?")
.where("enabled = ?")
# Q 1443 : # where(post_action_type_id: PostActionType.notify_flag_type_ids)
Query(PostAction)
.where("post_action_type_id = ?")
# Q 1444 : # where(post_action_type_id: PostActionType.public_type_ids)
Query(PostAction)
.where("post_action_type_id = ?")
# Q 1445 : # where(post_action_type_id: PostActionType.types[:spam])
Query(PostAction)
.where("post_action_type_id = ?")
# Q 1446 : # where(primary: false)
Query(UserEmail)
.where("primary = ?")
# Q 1447 : # where(read: false)
Query(Notification)
.where("read = ?")
# Q 1448 : # where(status_type: TopicTimer.types[:bump], deleted_at: nil).pluck(:topic_id)
Query(TopicTimer)
.where("status_type = ?")
.where("deleted_at = ?")
.select('topic_id')
# Q 1449 : # where(target_id: Theme.targets[:translations], name: locale_codes).joins(self.sanitize_sql_array(["JOIN (
#         SELECT * FROM (VALUES #{
# locale_codes.map {
#   
#   "(?)"
# }.join(",")}) as Y (locale_code, locale_sort_column)
#       ) as Y ON Y.locale_code = theme_fields.name", *locale_codes.map.with_index { |code, index|
#   
#   [code, index]
# }])).order("Y.locale_sort_column")
Query(ThemeField)
.where("target_id = ?")
.where("name = ?")
.order('id')
# Q 1451 : # where(theme_id: theme_ids).joins("JOIN (
#           SELECT #{
# theme_ids.map.with_index { |id, idx|
#   
#   "#{
#   id.to_i} AS theme_id, #{
#   idx} AS theme_sort_column"
# }.join(" UNION ALL SELECT ")}
#         ) as X ON X.theme_id = theme_fields.theme_id").order("theme_sort_column")
Query(ThemeField)
.where("theme_id = ?")
.order('id')
# Q 1452 : # where(topic_count: 0, pm_topic_count: 0)
Query(Tag)
.where("topic_count = ?")
.where("pm_topic_count = ?")
# Q 1453 : # where(user: user, notification_level: notification_levels[level])
Query(TagUser)
.where("user = ?")
.where("notification_level = ?")
# Q 1454 : # where(user_id: user_id).where("rotated_at > ?", SiteSetting.maximum_session_age.hours.ago).order("rotated_at DESC").offset(MAX_SESSION_COUNT)
Query(UserAuthToken)
.where("user_id = ?")
.order('id, rotated_at')
# Q 1455 : # where(user_id: user_id, given_date: date)
Query(GivenDailyLike)
.where("user_id = ?")
.where("given_date = ?")
# Q 1457 : # where.not(id: TopicTimer.scheduled_bump_topics)
Query(UserExists)
.where("id = ?")
